# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  Salutation: String
  Status(
    cursor: StatusOnAccountWhereUniqueInput
    distinct: [StatusOnAccountScalarFieldEnum!]
    orderBy: [StatusOnAccountOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: StatusOnAccountWhereInput
  ): [StatusOnAccount!]!
  _count: AccountCount
  accesses(
    cursor: SubuserOnAccountWhereUniqueInput
    distinct: [SubuserOnAccountScalarFieldEnum!]
    orderBy: [SubuserOnAccountOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: SubuserOnAccountWhereInput
  ): [SubuserOnAccount!]!
  accountType: AccountType!
  accounts(
    cursor: ManagersOnAccountWhereUniqueInput
    distinct: [ManagersOnAccountScalarFieldEnum!]
    orderBy: [ManagersOnAccountOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: ManagersOnAccountWhereInput
  ): [ManagersOnAccount!]!
  addresses(
    cursor: AddressWhereUniqueInput
    distinct: [AddressScalarFieldEnum!]
    orderBy: [AddressOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: AddressWhereInput
  ): [Address!]!
  apiToken(
    cursor: TokenWhereUniqueInput
    distinct: [TokenScalarFieldEnum!]
    orderBy: [TokenOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: TokenWhereInput
  ): [Token!]!
  application(
    cursor: ApplicationWhereUniqueInput
    distinct: [ApplicationScalarFieldEnum!]
    orderBy: [ApplicationOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: ApplicationWhereInput
  ): [Application!]!
  applied: DateTime!
  contactOfAdress(
    cursor: ContactAtAddressWhereUniqueInput
    distinct: [ContactAtAddressScalarFieldEnum!]
    orderBy: [ContactAtAddressOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: ContactAtAddressWhereInput
  ): [ContactAtAddress!]!
  createdAt: DateTime!
  deleted: DateTime
  dob: DateTime!
  emails(
    cursor: EmailWhereUniqueInput
    distinct: [EmailScalarFieldEnum!]
    orderBy: [EmailOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: EmailWhereInput
  ): [Email!]!
  files(
    cursor: FilesWhereUniqueInput
    distinct: [FilesScalarFieldEnum!]
    orderBy: [FilesOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: FilesWhereInput
  ): [Files!]!
  firstname: String
  id: String!
  label: String!
  lastLogin: DateTime!
  lastname: String!
  managers(
    cursor: ManagersOnAccountWhereUniqueInput
    distinct: [ManagersOnAccountScalarFieldEnum!]
    orderBy: [ManagersOnAccountOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: ManagersOnAccountWhereInput
  ): [ManagersOnAccount!]!
  midname: String
  password: String
  phones(
    cursor: PhoneWhereUniqueInput
    distinct: [PhoneScalarFieldEnum!]
    orderBy: [PhoneOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: PhoneWhereInput
  ): [Phone!]!
  primaryAddress: Address
  promoted: DateTime!
  resetPasswordExpires: DateTime
  resetPasswordToken: String
  retired: DateTime!
  rtw(
    cursor: RTWWhereUniqueInput
    distinct: [RTWScalarFieldEnum!]
    orderBy: [RTWOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: RTWWhereInput
  ): [RTW!]!
  sex: String
  sia(
    cursor: SIABadgeWhereUniqueInput
    distinct: [SIABadgeScalarFieldEnum!]
    orderBy: [SIABadgeOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: SIABadgeWhereInput
  ): [SIABadge!]!
  subsciption: Boolean!
  subscription(
    cursor: SubscriptionOnAccountWhereUniqueInput
    distinct: [SubscriptionOnAccountScalarFieldEnum!]
    orderBy: [SubscriptionOnAccountOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: SubscriptionOnAccountWhereInput
  ): [SubscriptionOnAccount!]!
  subusers(
    cursor: SubuserOnAccountWhereUniqueInput
    distinct: [SubuserOnAccountScalarFieldEnum!]
    orderBy: [SubuserOnAccountOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: SubuserOnAccountWhereInput
  ): [SubuserOnAccount!]!
  title: Title
  transactions(
    cursor: TransactionWhereUniqueInput
    distinct: [TransactionScalarFieldEnum!]
    orderBy: [TransactionOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: TransactionWhereInput
  ): [Transaction!]!
  updatedAt: DateTime!
  username: String
}

type AccountCount {
  Status: Int!
  accesses: Int!
  accounts: Int!
  addresses: Int!
  apiToken: Int!
  application: Int!
  contactOfAdress: Int!
  emails: Int!
  files: Int!
  managers: Int!
  phones: Int!
  rtw: Int!
  sia: Int!
  subscription: Int!
  subusers: Int!
  transactions: Int!
}

type AccountCountAggregate {
  Salutation: Int!
  _all: Int!
  accountType: Int!
  applied: Int!
  createdAt: Int!
  deleted: Int!
  dob: Int!
  firstname: Int!
  id: Int!
  label: Int!
  lastLogin: Int!
  lastname: Int!
  midname: Int!
  password: Int!
  promoted: Int!
  resetPasswordExpires: Int!
  resetPasswordToken: Int!
  retired: Int!
  sex: Int!
  subsciption: Int!
  title: Int!
  updatedAt: Int!
  username: Int!
}

input AccountCountOrderByAggregateInput {
  Salutation: SortOrder
  accountType: SortOrder
  applied: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  dob: SortOrder
  firstname: SortOrder
  id: SortOrder
  label: SortOrder
  lastLogin: SortOrder
  lastname: SortOrder
  midname: SortOrder
  password: SortOrder
  promoted: SortOrder
  resetPasswordExpires: SortOrder
  resetPasswordToken: SortOrder
  retired: SortOrder
  sex: SortOrder
  subsciption: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input AccountCreateInput {
  Salutation: String
  Status: StatusOnAccountCreateNestedManyWithoutAccountInput
  accesses: SubuserOnAccountCreateNestedManyWithoutAccountInput
  accountType: AccountType
  accounts: ManagersOnAccountCreateNestedManyWithoutAccountInput
  addresses: AddressCreateNestedManyWithoutAccountInput
  apiToken: TokenCreateNestedManyWithoutAccountInput
  application: ApplicationCreateNestedManyWithoutAccountInput
  applied: DateTime
  contactOfAdress: ContactAtAddressCreateNestedManyWithoutAccountInput
  createdAt: DateTime
  deleted: DateTime
  dob: DateTime!
  emails: EmailCreateNestedManyWithoutAccountInput
  files: FilesCreateNestedManyWithoutAccountInput
  firstname: String
  id: String
  label: String!
  lastLogin: DateTime
  lastname: String!
  managers: ManagersOnAccountCreateNestedManyWithoutManagersInput
  midname: String
  password: String
  phones: PhoneCreateNestedManyWithoutAccountInput
  primaryAddress: AddressCreateNestedOneWithoutPrimaryAccountInput
  promoted: DateTime
  resetPasswordExpires: DateTime
  resetPasswordToken: String
  retired: DateTime
  rtw: RTWCreateNestedManyWithoutAccountInput
  sex: String
  sia: SIABadgeCreateNestedManyWithoutAccountInput
  subsciption: Boolean
  subscription: SubscriptionOnAccountCreateNestedManyWithoutAccountInput
  subusers: SubuserOnAccountCreateNestedManyWithoutSubuserInput
  title: Title
  transactions: TransactionCreateNestedManyWithoutAccountInput
  updatedAt: DateTime
  username: String
}

input AccountCreateManyInput {
  Salutation: String
  accountType: AccountType
  applied: DateTime
  createdAt: DateTime
  deleted: DateTime
  dob: DateTime!
  firstname: String
  id: String
  label: String!
  lastLogin: DateTime
  lastname: String!
  midname: String
  password: String
  promoted: DateTime
  resetPasswordExpires: DateTime
  resetPasswordToken: String
  retired: DateTime
  sex: String
  subsciption: Boolean
  title: Title
  updatedAt: DateTime
  username: String
}

input AccountCreateNestedManyWithoutFilesInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutFilesInput!]
  create: [AccountCreateWithoutFilesInput!]
}

input AccountCreateNestedOneWithoutAccessesInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutAccessesInput
  create: AccountCreateWithoutAccessesInput
}

input AccountCreateNestedOneWithoutAccountsInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutAccountsInput
  create: AccountCreateWithoutAccountsInput
}

input AccountCreateNestedOneWithoutAddressesInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutAddressesInput
  create: AccountCreateWithoutAddressesInput
}

input AccountCreateNestedOneWithoutApiTokenInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutApiTokenInput
  create: AccountCreateWithoutApiTokenInput
}

input AccountCreateNestedOneWithoutApplicationInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutApplicationInput
  create: AccountCreateWithoutApplicationInput
}

input AccountCreateNestedOneWithoutContactOfAdressInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutContactOfAdressInput
  create: AccountCreateWithoutContactOfAdressInput
}

input AccountCreateNestedOneWithoutEmailsInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutEmailsInput
  create: AccountCreateWithoutEmailsInput
}

input AccountCreateNestedOneWithoutManagersInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutManagersInput
  create: AccountCreateWithoutManagersInput
}

input AccountCreateNestedOneWithoutPhonesInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutPhonesInput
  create: AccountCreateWithoutPhonesInput
}

input AccountCreateNestedOneWithoutPrimaryAddressInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutPrimaryAddressInput
  create: AccountCreateWithoutPrimaryAddressInput
}

input AccountCreateNestedOneWithoutRtwInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutRtwInput
  create: AccountCreateWithoutRtwInput
}

input AccountCreateNestedOneWithoutSiaInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutSiaInput
  create: AccountCreateWithoutSiaInput
}

input AccountCreateNestedOneWithoutStatusInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutStatusInput
  create: AccountCreateWithoutStatusInput
}

input AccountCreateNestedOneWithoutSubscriptionInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutSubscriptionInput
  create: AccountCreateWithoutSubscriptionInput
}

input AccountCreateNestedOneWithoutSubusersInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutSubusersInput
  create: AccountCreateWithoutSubusersInput
}

input AccountCreateNestedOneWithoutTransactionsInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutTransactionsInput
  create: AccountCreateWithoutTransactionsInput
}

input AccountCreateOrConnectWithoutAccessesInput {
  create: AccountCreateWithoutAccessesInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateOrConnectWithoutAccountsInput {
  create: AccountCreateWithoutAccountsInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateOrConnectWithoutAddressesInput {
  create: AccountCreateWithoutAddressesInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateOrConnectWithoutApiTokenInput {
  create: AccountCreateWithoutApiTokenInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateOrConnectWithoutApplicationInput {
  create: AccountCreateWithoutApplicationInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateOrConnectWithoutContactOfAdressInput {
  create: AccountCreateWithoutContactOfAdressInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateOrConnectWithoutEmailsInput {
  create: AccountCreateWithoutEmailsInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateOrConnectWithoutFilesInput {
  create: AccountCreateWithoutFilesInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateOrConnectWithoutManagersInput {
  create: AccountCreateWithoutManagersInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateOrConnectWithoutPhonesInput {
  create: AccountCreateWithoutPhonesInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateOrConnectWithoutPrimaryAddressInput {
  create: AccountCreateWithoutPrimaryAddressInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateOrConnectWithoutRtwInput {
  create: AccountCreateWithoutRtwInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateOrConnectWithoutSiaInput {
  create: AccountCreateWithoutSiaInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateOrConnectWithoutStatusInput {
  create: AccountCreateWithoutStatusInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateOrConnectWithoutSubscriptionInput {
  create: AccountCreateWithoutSubscriptionInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateOrConnectWithoutSubusersInput {
  create: AccountCreateWithoutSubusersInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateOrConnectWithoutTransactionsInput {
  create: AccountCreateWithoutTransactionsInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateWithoutAccessesInput {
  Salutation: String
  Status: StatusOnAccountCreateNestedManyWithoutAccountInput
  accountType: AccountType
  accounts: ManagersOnAccountCreateNestedManyWithoutAccountInput
  addresses: AddressCreateNestedManyWithoutAccountInput
  apiToken: TokenCreateNestedManyWithoutAccountInput
  application: ApplicationCreateNestedManyWithoutAccountInput
  applied: DateTime
  contactOfAdress: ContactAtAddressCreateNestedManyWithoutAccountInput
  createdAt: DateTime
  deleted: DateTime
  dob: DateTime!
  emails: EmailCreateNestedManyWithoutAccountInput
  files: FilesCreateNestedManyWithoutAccountInput
  firstname: String
  id: String
  label: String!
  lastLogin: DateTime
  lastname: String!
  managers: ManagersOnAccountCreateNestedManyWithoutManagersInput
  midname: String
  password: String
  phones: PhoneCreateNestedManyWithoutAccountInput
  primaryAddress: AddressCreateNestedOneWithoutPrimaryAccountInput
  promoted: DateTime
  resetPasswordExpires: DateTime
  resetPasswordToken: String
  retired: DateTime
  rtw: RTWCreateNestedManyWithoutAccountInput
  sex: String
  sia: SIABadgeCreateNestedManyWithoutAccountInput
  subsciption: Boolean
  subscription: SubscriptionOnAccountCreateNestedManyWithoutAccountInput
  subusers: SubuserOnAccountCreateNestedManyWithoutSubuserInput
  title: Title
  transactions: TransactionCreateNestedManyWithoutAccountInput
  updatedAt: DateTime
  username: String
}

input AccountCreateWithoutAccountsInput {
  Salutation: String
  Status: StatusOnAccountCreateNestedManyWithoutAccountInput
  accesses: SubuserOnAccountCreateNestedManyWithoutAccountInput
  accountType: AccountType
  addresses: AddressCreateNestedManyWithoutAccountInput
  apiToken: TokenCreateNestedManyWithoutAccountInput
  application: ApplicationCreateNestedManyWithoutAccountInput
  applied: DateTime
  contactOfAdress: ContactAtAddressCreateNestedManyWithoutAccountInput
  createdAt: DateTime
  deleted: DateTime
  dob: DateTime!
  emails: EmailCreateNestedManyWithoutAccountInput
  files: FilesCreateNestedManyWithoutAccountInput
  firstname: String
  id: String
  label: String!
  lastLogin: DateTime
  lastname: String!
  managers: ManagersOnAccountCreateNestedManyWithoutManagersInput
  midname: String
  password: String
  phones: PhoneCreateNestedManyWithoutAccountInput
  primaryAddress: AddressCreateNestedOneWithoutPrimaryAccountInput
  promoted: DateTime
  resetPasswordExpires: DateTime
  resetPasswordToken: String
  retired: DateTime
  rtw: RTWCreateNestedManyWithoutAccountInput
  sex: String
  sia: SIABadgeCreateNestedManyWithoutAccountInput
  subsciption: Boolean
  subscription: SubscriptionOnAccountCreateNestedManyWithoutAccountInput
  subusers: SubuserOnAccountCreateNestedManyWithoutSubuserInput
  title: Title
  transactions: TransactionCreateNestedManyWithoutAccountInput
  updatedAt: DateTime
  username: String
}

input AccountCreateWithoutAddressesInput {
  Salutation: String
  Status: StatusOnAccountCreateNestedManyWithoutAccountInput
  accesses: SubuserOnAccountCreateNestedManyWithoutAccountInput
  accountType: AccountType
  accounts: ManagersOnAccountCreateNestedManyWithoutAccountInput
  apiToken: TokenCreateNestedManyWithoutAccountInput
  application: ApplicationCreateNestedManyWithoutAccountInput
  applied: DateTime
  contactOfAdress: ContactAtAddressCreateNestedManyWithoutAccountInput
  createdAt: DateTime
  deleted: DateTime
  dob: DateTime!
  emails: EmailCreateNestedManyWithoutAccountInput
  files: FilesCreateNestedManyWithoutAccountInput
  firstname: String
  id: String
  label: String!
  lastLogin: DateTime
  lastname: String!
  managers: ManagersOnAccountCreateNestedManyWithoutManagersInput
  midname: String
  password: String
  phones: PhoneCreateNestedManyWithoutAccountInput
  primaryAddress: AddressCreateNestedOneWithoutPrimaryAccountInput
  promoted: DateTime
  resetPasswordExpires: DateTime
  resetPasswordToken: String
  retired: DateTime
  rtw: RTWCreateNestedManyWithoutAccountInput
  sex: String
  sia: SIABadgeCreateNestedManyWithoutAccountInput
  subsciption: Boolean
  subscription: SubscriptionOnAccountCreateNestedManyWithoutAccountInput
  subusers: SubuserOnAccountCreateNestedManyWithoutSubuserInput
  title: Title
  transactions: TransactionCreateNestedManyWithoutAccountInput
  updatedAt: DateTime
  username: String
}

input AccountCreateWithoutApiTokenInput {
  Salutation: String
  Status: StatusOnAccountCreateNestedManyWithoutAccountInput
  accesses: SubuserOnAccountCreateNestedManyWithoutAccountInput
  accountType: AccountType
  accounts: ManagersOnAccountCreateNestedManyWithoutAccountInput
  addresses: AddressCreateNestedManyWithoutAccountInput
  application: ApplicationCreateNestedManyWithoutAccountInput
  applied: DateTime
  contactOfAdress: ContactAtAddressCreateNestedManyWithoutAccountInput
  createdAt: DateTime
  deleted: DateTime
  dob: DateTime!
  emails: EmailCreateNestedManyWithoutAccountInput
  files: FilesCreateNestedManyWithoutAccountInput
  firstname: String
  id: String
  label: String!
  lastLogin: DateTime
  lastname: String!
  managers: ManagersOnAccountCreateNestedManyWithoutManagersInput
  midname: String
  password: String
  phones: PhoneCreateNestedManyWithoutAccountInput
  primaryAddress: AddressCreateNestedOneWithoutPrimaryAccountInput
  promoted: DateTime
  resetPasswordExpires: DateTime
  resetPasswordToken: String
  retired: DateTime
  rtw: RTWCreateNestedManyWithoutAccountInput
  sex: String
  sia: SIABadgeCreateNestedManyWithoutAccountInput
  subsciption: Boolean
  subscription: SubscriptionOnAccountCreateNestedManyWithoutAccountInput
  subusers: SubuserOnAccountCreateNestedManyWithoutSubuserInput
  title: Title
  transactions: TransactionCreateNestedManyWithoutAccountInput
  updatedAt: DateTime
  username: String
}

input AccountCreateWithoutApplicationInput {
  Salutation: String
  Status: StatusOnAccountCreateNestedManyWithoutAccountInput
  accesses: SubuserOnAccountCreateNestedManyWithoutAccountInput
  accountType: AccountType
  accounts: ManagersOnAccountCreateNestedManyWithoutAccountInput
  addresses: AddressCreateNestedManyWithoutAccountInput
  apiToken: TokenCreateNestedManyWithoutAccountInput
  applied: DateTime
  contactOfAdress: ContactAtAddressCreateNestedManyWithoutAccountInput
  createdAt: DateTime
  deleted: DateTime
  dob: DateTime!
  emails: EmailCreateNestedManyWithoutAccountInput
  files: FilesCreateNestedManyWithoutAccountInput
  firstname: String
  id: String
  label: String!
  lastLogin: DateTime
  lastname: String!
  managers: ManagersOnAccountCreateNestedManyWithoutManagersInput
  midname: String
  password: String
  phones: PhoneCreateNestedManyWithoutAccountInput
  primaryAddress: AddressCreateNestedOneWithoutPrimaryAccountInput
  promoted: DateTime
  resetPasswordExpires: DateTime
  resetPasswordToken: String
  retired: DateTime
  rtw: RTWCreateNestedManyWithoutAccountInput
  sex: String
  sia: SIABadgeCreateNestedManyWithoutAccountInput
  subsciption: Boolean
  subscription: SubscriptionOnAccountCreateNestedManyWithoutAccountInput
  subusers: SubuserOnAccountCreateNestedManyWithoutSubuserInput
  title: Title
  transactions: TransactionCreateNestedManyWithoutAccountInput
  updatedAt: DateTime
  username: String
}

input AccountCreateWithoutContactOfAdressInput {
  Salutation: String
  Status: StatusOnAccountCreateNestedManyWithoutAccountInput
  accesses: SubuserOnAccountCreateNestedManyWithoutAccountInput
  accountType: AccountType
  accounts: ManagersOnAccountCreateNestedManyWithoutAccountInput
  addresses: AddressCreateNestedManyWithoutAccountInput
  apiToken: TokenCreateNestedManyWithoutAccountInput
  application: ApplicationCreateNestedManyWithoutAccountInput
  applied: DateTime
  createdAt: DateTime
  deleted: DateTime
  dob: DateTime!
  emails: EmailCreateNestedManyWithoutAccountInput
  files: FilesCreateNestedManyWithoutAccountInput
  firstname: String
  id: String
  label: String!
  lastLogin: DateTime
  lastname: String!
  managers: ManagersOnAccountCreateNestedManyWithoutManagersInput
  midname: String
  password: String
  phones: PhoneCreateNestedManyWithoutAccountInput
  primaryAddress: AddressCreateNestedOneWithoutPrimaryAccountInput
  promoted: DateTime
  resetPasswordExpires: DateTime
  resetPasswordToken: String
  retired: DateTime
  rtw: RTWCreateNestedManyWithoutAccountInput
  sex: String
  sia: SIABadgeCreateNestedManyWithoutAccountInput
  subsciption: Boolean
  subscription: SubscriptionOnAccountCreateNestedManyWithoutAccountInput
  subusers: SubuserOnAccountCreateNestedManyWithoutSubuserInput
  title: Title
  transactions: TransactionCreateNestedManyWithoutAccountInput
  updatedAt: DateTime
  username: String
}

input AccountCreateWithoutEmailsInput {
  Salutation: String
  Status: StatusOnAccountCreateNestedManyWithoutAccountInput
  accesses: SubuserOnAccountCreateNestedManyWithoutAccountInput
  accountType: AccountType
  accounts: ManagersOnAccountCreateNestedManyWithoutAccountInput
  addresses: AddressCreateNestedManyWithoutAccountInput
  apiToken: TokenCreateNestedManyWithoutAccountInput
  application: ApplicationCreateNestedManyWithoutAccountInput
  applied: DateTime
  contactOfAdress: ContactAtAddressCreateNestedManyWithoutAccountInput
  createdAt: DateTime
  deleted: DateTime
  dob: DateTime!
  files: FilesCreateNestedManyWithoutAccountInput
  firstname: String
  id: String
  label: String!
  lastLogin: DateTime
  lastname: String!
  managers: ManagersOnAccountCreateNestedManyWithoutManagersInput
  midname: String
  password: String
  phones: PhoneCreateNestedManyWithoutAccountInput
  primaryAddress: AddressCreateNestedOneWithoutPrimaryAccountInput
  promoted: DateTime
  resetPasswordExpires: DateTime
  resetPasswordToken: String
  retired: DateTime
  rtw: RTWCreateNestedManyWithoutAccountInput
  sex: String
  sia: SIABadgeCreateNestedManyWithoutAccountInput
  subsciption: Boolean
  subscription: SubscriptionOnAccountCreateNestedManyWithoutAccountInput
  subusers: SubuserOnAccountCreateNestedManyWithoutSubuserInput
  title: Title
  transactions: TransactionCreateNestedManyWithoutAccountInput
  updatedAt: DateTime
  username: String
}

input AccountCreateWithoutFilesInput {
  Salutation: String
  Status: StatusOnAccountCreateNestedManyWithoutAccountInput
  accesses: SubuserOnAccountCreateNestedManyWithoutAccountInput
  accountType: AccountType
  accounts: ManagersOnAccountCreateNestedManyWithoutAccountInput
  addresses: AddressCreateNestedManyWithoutAccountInput
  apiToken: TokenCreateNestedManyWithoutAccountInput
  application: ApplicationCreateNestedManyWithoutAccountInput
  applied: DateTime
  contactOfAdress: ContactAtAddressCreateNestedManyWithoutAccountInput
  createdAt: DateTime
  deleted: DateTime
  dob: DateTime!
  emails: EmailCreateNestedManyWithoutAccountInput
  firstname: String
  id: String
  label: String!
  lastLogin: DateTime
  lastname: String!
  managers: ManagersOnAccountCreateNestedManyWithoutManagersInput
  midname: String
  password: String
  phones: PhoneCreateNestedManyWithoutAccountInput
  primaryAddress: AddressCreateNestedOneWithoutPrimaryAccountInput
  promoted: DateTime
  resetPasswordExpires: DateTime
  resetPasswordToken: String
  retired: DateTime
  rtw: RTWCreateNestedManyWithoutAccountInput
  sex: String
  sia: SIABadgeCreateNestedManyWithoutAccountInput
  subsciption: Boolean
  subscription: SubscriptionOnAccountCreateNestedManyWithoutAccountInput
  subusers: SubuserOnAccountCreateNestedManyWithoutSubuserInput
  title: Title
  transactions: TransactionCreateNestedManyWithoutAccountInput
  updatedAt: DateTime
  username: String
}

input AccountCreateWithoutManagersInput {
  Salutation: String
  Status: StatusOnAccountCreateNestedManyWithoutAccountInput
  accesses: SubuserOnAccountCreateNestedManyWithoutAccountInput
  accountType: AccountType
  accounts: ManagersOnAccountCreateNestedManyWithoutAccountInput
  addresses: AddressCreateNestedManyWithoutAccountInput
  apiToken: TokenCreateNestedManyWithoutAccountInput
  application: ApplicationCreateNestedManyWithoutAccountInput
  applied: DateTime
  contactOfAdress: ContactAtAddressCreateNestedManyWithoutAccountInput
  createdAt: DateTime
  deleted: DateTime
  dob: DateTime!
  emails: EmailCreateNestedManyWithoutAccountInput
  files: FilesCreateNestedManyWithoutAccountInput
  firstname: String
  id: String
  label: String!
  lastLogin: DateTime
  lastname: String!
  midname: String
  password: String
  phones: PhoneCreateNestedManyWithoutAccountInput
  primaryAddress: AddressCreateNestedOneWithoutPrimaryAccountInput
  promoted: DateTime
  resetPasswordExpires: DateTime
  resetPasswordToken: String
  retired: DateTime
  rtw: RTWCreateNestedManyWithoutAccountInput
  sex: String
  sia: SIABadgeCreateNestedManyWithoutAccountInput
  subsciption: Boolean
  subscription: SubscriptionOnAccountCreateNestedManyWithoutAccountInput
  subusers: SubuserOnAccountCreateNestedManyWithoutSubuserInput
  title: Title
  transactions: TransactionCreateNestedManyWithoutAccountInput
  updatedAt: DateTime
  username: String
}

input AccountCreateWithoutPhonesInput {
  Salutation: String
  Status: StatusOnAccountCreateNestedManyWithoutAccountInput
  accesses: SubuserOnAccountCreateNestedManyWithoutAccountInput
  accountType: AccountType
  accounts: ManagersOnAccountCreateNestedManyWithoutAccountInput
  addresses: AddressCreateNestedManyWithoutAccountInput
  apiToken: TokenCreateNestedManyWithoutAccountInput
  application: ApplicationCreateNestedManyWithoutAccountInput
  applied: DateTime
  contactOfAdress: ContactAtAddressCreateNestedManyWithoutAccountInput
  createdAt: DateTime
  deleted: DateTime
  dob: DateTime!
  emails: EmailCreateNestedManyWithoutAccountInput
  files: FilesCreateNestedManyWithoutAccountInput
  firstname: String
  id: String
  label: String!
  lastLogin: DateTime
  lastname: String!
  managers: ManagersOnAccountCreateNestedManyWithoutManagersInput
  midname: String
  password: String
  primaryAddress: AddressCreateNestedOneWithoutPrimaryAccountInput
  promoted: DateTime
  resetPasswordExpires: DateTime
  resetPasswordToken: String
  retired: DateTime
  rtw: RTWCreateNestedManyWithoutAccountInput
  sex: String
  sia: SIABadgeCreateNestedManyWithoutAccountInput
  subsciption: Boolean
  subscription: SubscriptionOnAccountCreateNestedManyWithoutAccountInput
  subusers: SubuserOnAccountCreateNestedManyWithoutSubuserInput
  title: Title
  transactions: TransactionCreateNestedManyWithoutAccountInput
  updatedAt: DateTime
  username: String
}

input AccountCreateWithoutPrimaryAddressInput {
  Salutation: String
  Status: StatusOnAccountCreateNestedManyWithoutAccountInput
  accesses: SubuserOnAccountCreateNestedManyWithoutAccountInput
  accountType: AccountType
  accounts: ManagersOnAccountCreateNestedManyWithoutAccountInput
  addresses: AddressCreateNestedManyWithoutAccountInput
  apiToken: TokenCreateNestedManyWithoutAccountInput
  application: ApplicationCreateNestedManyWithoutAccountInput
  applied: DateTime
  contactOfAdress: ContactAtAddressCreateNestedManyWithoutAccountInput
  createdAt: DateTime
  deleted: DateTime
  dob: DateTime!
  emails: EmailCreateNestedManyWithoutAccountInput
  files: FilesCreateNestedManyWithoutAccountInput
  firstname: String
  id: String
  label: String!
  lastLogin: DateTime
  lastname: String!
  managers: ManagersOnAccountCreateNestedManyWithoutManagersInput
  midname: String
  password: String
  phones: PhoneCreateNestedManyWithoutAccountInput
  promoted: DateTime
  resetPasswordExpires: DateTime
  resetPasswordToken: String
  retired: DateTime
  rtw: RTWCreateNestedManyWithoutAccountInput
  sex: String
  sia: SIABadgeCreateNestedManyWithoutAccountInput
  subsciption: Boolean
  subscription: SubscriptionOnAccountCreateNestedManyWithoutAccountInput
  subusers: SubuserOnAccountCreateNestedManyWithoutSubuserInput
  title: Title
  transactions: TransactionCreateNestedManyWithoutAccountInput
  updatedAt: DateTime
  username: String
}

input AccountCreateWithoutRtwInput {
  Salutation: String
  Status: StatusOnAccountCreateNestedManyWithoutAccountInput
  accesses: SubuserOnAccountCreateNestedManyWithoutAccountInput
  accountType: AccountType
  accounts: ManagersOnAccountCreateNestedManyWithoutAccountInput
  addresses: AddressCreateNestedManyWithoutAccountInput
  apiToken: TokenCreateNestedManyWithoutAccountInput
  application: ApplicationCreateNestedManyWithoutAccountInput
  applied: DateTime
  contactOfAdress: ContactAtAddressCreateNestedManyWithoutAccountInput
  createdAt: DateTime
  deleted: DateTime
  dob: DateTime!
  emails: EmailCreateNestedManyWithoutAccountInput
  files: FilesCreateNestedManyWithoutAccountInput
  firstname: String
  id: String
  label: String!
  lastLogin: DateTime
  lastname: String!
  managers: ManagersOnAccountCreateNestedManyWithoutManagersInput
  midname: String
  password: String
  phones: PhoneCreateNestedManyWithoutAccountInput
  primaryAddress: AddressCreateNestedOneWithoutPrimaryAccountInput
  promoted: DateTime
  resetPasswordExpires: DateTime
  resetPasswordToken: String
  retired: DateTime
  sex: String
  sia: SIABadgeCreateNestedManyWithoutAccountInput
  subsciption: Boolean
  subscription: SubscriptionOnAccountCreateNestedManyWithoutAccountInput
  subusers: SubuserOnAccountCreateNestedManyWithoutSubuserInput
  title: Title
  transactions: TransactionCreateNestedManyWithoutAccountInput
  updatedAt: DateTime
  username: String
}

input AccountCreateWithoutSiaInput {
  Salutation: String
  Status: StatusOnAccountCreateNestedManyWithoutAccountInput
  accesses: SubuserOnAccountCreateNestedManyWithoutAccountInput
  accountType: AccountType
  accounts: ManagersOnAccountCreateNestedManyWithoutAccountInput
  addresses: AddressCreateNestedManyWithoutAccountInput
  apiToken: TokenCreateNestedManyWithoutAccountInput
  application: ApplicationCreateNestedManyWithoutAccountInput
  applied: DateTime
  contactOfAdress: ContactAtAddressCreateNestedManyWithoutAccountInput
  createdAt: DateTime
  deleted: DateTime
  dob: DateTime!
  emails: EmailCreateNestedManyWithoutAccountInput
  files: FilesCreateNestedManyWithoutAccountInput
  firstname: String
  id: String
  label: String!
  lastLogin: DateTime
  lastname: String!
  managers: ManagersOnAccountCreateNestedManyWithoutManagersInput
  midname: String
  password: String
  phones: PhoneCreateNestedManyWithoutAccountInput
  primaryAddress: AddressCreateNestedOneWithoutPrimaryAccountInput
  promoted: DateTime
  resetPasswordExpires: DateTime
  resetPasswordToken: String
  retired: DateTime
  rtw: RTWCreateNestedManyWithoutAccountInput
  sex: String
  subsciption: Boolean
  subscription: SubscriptionOnAccountCreateNestedManyWithoutAccountInput
  subusers: SubuserOnAccountCreateNestedManyWithoutSubuserInput
  title: Title
  transactions: TransactionCreateNestedManyWithoutAccountInput
  updatedAt: DateTime
  username: String
}

input AccountCreateWithoutStatusInput {
  Salutation: String
  accesses: SubuserOnAccountCreateNestedManyWithoutAccountInput
  accountType: AccountType
  accounts: ManagersOnAccountCreateNestedManyWithoutAccountInput
  addresses: AddressCreateNestedManyWithoutAccountInput
  apiToken: TokenCreateNestedManyWithoutAccountInput
  application: ApplicationCreateNestedManyWithoutAccountInput
  applied: DateTime
  contactOfAdress: ContactAtAddressCreateNestedManyWithoutAccountInput
  createdAt: DateTime
  deleted: DateTime
  dob: DateTime!
  emails: EmailCreateNestedManyWithoutAccountInput
  files: FilesCreateNestedManyWithoutAccountInput
  firstname: String
  id: String
  label: String!
  lastLogin: DateTime
  lastname: String!
  managers: ManagersOnAccountCreateNestedManyWithoutManagersInput
  midname: String
  password: String
  phones: PhoneCreateNestedManyWithoutAccountInput
  primaryAddress: AddressCreateNestedOneWithoutPrimaryAccountInput
  promoted: DateTime
  resetPasswordExpires: DateTime
  resetPasswordToken: String
  retired: DateTime
  rtw: RTWCreateNestedManyWithoutAccountInput
  sex: String
  sia: SIABadgeCreateNestedManyWithoutAccountInput
  subsciption: Boolean
  subscription: SubscriptionOnAccountCreateNestedManyWithoutAccountInput
  subusers: SubuserOnAccountCreateNestedManyWithoutSubuserInput
  title: Title
  transactions: TransactionCreateNestedManyWithoutAccountInput
  updatedAt: DateTime
  username: String
}

input AccountCreateWithoutSubscriptionInput {
  Salutation: String
  Status: StatusOnAccountCreateNestedManyWithoutAccountInput
  accesses: SubuserOnAccountCreateNestedManyWithoutAccountInput
  accountType: AccountType
  accounts: ManagersOnAccountCreateNestedManyWithoutAccountInput
  addresses: AddressCreateNestedManyWithoutAccountInput
  apiToken: TokenCreateNestedManyWithoutAccountInput
  application: ApplicationCreateNestedManyWithoutAccountInput
  applied: DateTime
  contactOfAdress: ContactAtAddressCreateNestedManyWithoutAccountInput
  createdAt: DateTime
  deleted: DateTime
  dob: DateTime!
  emails: EmailCreateNestedManyWithoutAccountInput
  files: FilesCreateNestedManyWithoutAccountInput
  firstname: String
  id: String
  label: String!
  lastLogin: DateTime
  lastname: String!
  managers: ManagersOnAccountCreateNestedManyWithoutManagersInput
  midname: String
  password: String
  phones: PhoneCreateNestedManyWithoutAccountInput
  primaryAddress: AddressCreateNestedOneWithoutPrimaryAccountInput
  promoted: DateTime
  resetPasswordExpires: DateTime
  resetPasswordToken: String
  retired: DateTime
  rtw: RTWCreateNestedManyWithoutAccountInput
  sex: String
  sia: SIABadgeCreateNestedManyWithoutAccountInput
  subsciption: Boolean
  subusers: SubuserOnAccountCreateNestedManyWithoutSubuserInput
  title: Title
  transactions: TransactionCreateNestedManyWithoutAccountInput
  updatedAt: DateTime
  username: String
}

input AccountCreateWithoutSubusersInput {
  Salutation: String
  Status: StatusOnAccountCreateNestedManyWithoutAccountInput
  accesses: SubuserOnAccountCreateNestedManyWithoutAccountInput
  accountType: AccountType
  accounts: ManagersOnAccountCreateNestedManyWithoutAccountInput
  addresses: AddressCreateNestedManyWithoutAccountInput
  apiToken: TokenCreateNestedManyWithoutAccountInput
  application: ApplicationCreateNestedManyWithoutAccountInput
  applied: DateTime
  contactOfAdress: ContactAtAddressCreateNestedManyWithoutAccountInput
  createdAt: DateTime
  deleted: DateTime
  dob: DateTime!
  emails: EmailCreateNestedManyWithoutAccountInput
  files: FilesCreateNestedManyWithoutAccountInput
  firstname: String
  id: String
  label: String!
  lastLogin: DateTime
  lastname: String!
  managers: ManagersOnAccountCreateNestedManyWithoutManagersInput
  midname: String
  password: String
  phones: PhoneCreateNestedManyWithoutAccountInput
  primaryAddress: AddressCreateNestedOneWithoutPrimaryAccountInput
  promoted: DateTime
  resetPasswordExpires: DateTime
  resetPasswordToken: String
  retired: DateTime
  rtw: RTWCreateNestedManyWithoutAccountInput
  sex: String
  sia: SIABadgeCreateNestedManyWithoutAccountInput
  subsciption: Boolean
  subscription: SubscriptionOnAccountCreateNestedManyWithoutAccountInput
  title: Title
  transactions: TransactionCreateNestedManyWithoutAccountInput
  updatedAt: DateTime
  username: String
}

input AccountCreateWithoutTransactionsInput {
  Salutation: String
  Status: StatusOnAccountCreateNestedManyWithoutAccountInput
  accesses: SubuserOnAccountCreateNestedManyWithoutAccountInput
  accountType: AccountType
  accounts: ManagersOnAccountCreateNestedManyWithoutAccountInput
  addresses: AddressCreateNestedManyWithoutAccountInput
  apiToken: TokenCreateNestedManyWithoutAccountInput
  application: ApplicationCreateNestedManyWithoutAccountInput
  applied: DateTime
  contactOfAdress: ContactAtAddressCreateNestedManyWithoutAccountInput
  createdAt: DateTime
  deleted: DateTime
  dob: DateTime!
  emails: EmailCreateNestedManyWithoutAccountInput
  files: FilesCreateNestedManyWithoutAccountInput
  firstname: String
  id: String
  label: String!
  lastLogin: DateTime
  lastname: String!
  managers: ManagersOnAccountCreateNestedManyWithoutManagersInput
  midname: String
  password: String
  phones: PhoneCreateNestedManyWithoutAccountInput
  primaryAddress: AddressCreateNestedOneWithoutPrimaryAccountInput
  promoted: DateTime
  resetPasswordExpires: DateTime
  resetPasswordToken: String
  retired: DateTime
  rtw: RTWCreateNestedManyWithoutAccountInput
  sex: String
  sia: SIABadgeCreateNestedManyWithoutAccountInput
  subsciption: Boolean
  subscription: SubscriptionOnAccountCreateNestedManyWithoutAccountInput
  subusers: SubuserOnAccountCreateNestedManyWithoutSubuserInput
  title: Title
  updatedAt: DateTime
  username: String
}

type AccountGroupBy {
  Salutation: String
  _count: AccountCountAggregate
  _max: AccountMaxAggregate
  _min: AccountMinAggregate
  accountType: AccountType!
  applied: DateTime!
  createdAt: DateTime!
  deleted: DateTime
  dob: DateTime!
  firstname: String
  id: String!
  label: String!
  lastLogin: DateTime!
  lastname: String!
  midname: String
  password: String
  promoted: DateTime!
  resetPasswordExpires: DateTime
  resetPasswordToken: String
  retired: DateTime!
  sex: String
  subsciption: Boolean!
  title: Title
  updatedAt: DateTime!
  username: String
}

input AccountListRelationFilter {
  every: AccountWhereInput
  none: AccountWhereInput
  some: AccountWhereInput
}

type AccountMaxAggregate {
  Salutation: String
  accountType: AccountType
  applied: DateTime
  createdAt: DateTime
  deleted: DateTime
  dob: DateTime
  firstname: String
  id: String
  label: String
  lastLogin: DateTime
  lastname: String
  midname: String
  password: String
  promoted: DateTime
  resetPasswordExpires: DateTime
  resetPasswordToken: String
  retired: DateTime
  sex: String
  subsciption: Boolean
  title: Title
  updatedAt: DateTime
  username: String
}

input AccountMaxOrderByAggregateInput {
  Salutation: SortOrder
  accountType: SortOrder
  applied: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  dob: SortOrder
  firstname: SortOrder
  id: SortOrder
  label: SortOrder
  lastLogin: SortOrder
  lastname: SortOrder
  midname: SortOrder
  password: SortOrder
  promoted: SortOrder
  resetPasswordExpires: SortOrder
  resetPasswordToken: SortOrder
  retired: SortOrder
  sex: SortOrder
  subsciption: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

type AccountMinAggregate {
  Salutation: String
  accountType: AccountType
  applied: DateTime
  createdAt: DateTime
  deleted: DateTime
  dob: DateTime
  firstname: String
  id: String
  label: String
  lastLogin: DateTime
  lastname: String
  midname: String
  password: String
  promoted: DateTime
  resetPasswordExpires: DateTime
  resetPasswordToken: String
  retired: DateTime
  sex: String
  subsciption: Boolean
  title: Title
  updatedAt: DateTime
  username: String
}

input AccountMinOrderByAggregateInput {
  Salutation: SortOrder
  accountType: SortOrder
  applied: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  dob: SortOrder
  firstname: SortOrder
  id: SortOrder
  label: SortOrder
  lastLogin: SortOrder
  lastname: SortOrder
  midname: SortOrder
  password: SortOrder
  promoted: SortOrder
  resetPasswordExpires: SortOrder
  resetPasswordToken: SortOrder
  retired: SortOrder
  sex: SortOrder
  subsciption: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input AccountOrderByRelationAggregateInput {
  _count: SortOrder
}

enum AccountOrderByRelevanceFieldEnum {
  Salutation
  firstname
  id
  label
  lastname
  midname
  password
  resetPasswordToken
  sex
  username
}

input AccountOrderByRelevanceInput {
  fields: [AccountOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input AccountOrderByWithAggregationInput {
  Salutation: SortOrder
  _count: AccountCountOrderByAggregateInput
  _max: AccountMaxOrderByAggregateInput
  _min: AccountMinOrderByAggregateInput
  accountType: SortOrder
  applied: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  dob: SortOrder
  firstname: SortOrder
  id: SortOrder
  label: SortOrder
  lastLogin: SortOrder
  lastname: SortOrder
  midname: SortOrder
  password: SortOrder
  promoted: SortOrder
  resetPasswordExpires: SortOrder
  resetPasswordToken: SortOrder
  retired: SortOrder
  sex: SortOrder
  subsciption: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input AccountOrderByWithRelationAndSearchRelevanceInput {
  Salutation: SortOrder
  Status: StatusOnAccountOrderByRelationAggregateInput
  _relevance: AccountOrderByRelevanceInput
  accesses: SubuserOnAccountOrderByRelationAggregateInput
  accountType: SortOrder
  accounts: ManagersOnAccountOrderByRelationAggregateInput
  addresses: AddressOrderByRelationAggregateInput
  apiToken: TokenOrderByRelationAggregateInput
  application: ApplicationOrderByRelationAggregateInput
  applied: SortOrder
  contactOfAdress: ContactAtAddressOrderByRelationAggregateInput
  createdAt: SortOrder
  deleted: SortOrder
  dob: SortOrder
  emails: EmailOrderByRelationAggregateInput
  files: FilesOrderByRelationAggregateInput
  firstname: SortOrder
  id: SortOrder
  label: SortOrder
  lastLogin: SortOrder
  lastname: SortOrder
  managers: ManagersOnAccountOrderByRelationAggregateInput
  midname: SortOrder
  password: SortOrder
  phones: PhoneOrderByRelationAggregateInput
  primaryAddress: AddressOrderByWithRelationAndSearchRelevanceInput
  promoted: SortOrder
  resetPasswordExpires: SortOrder
  resetPasswordToken: SortOrder
  retired: SortOrder
  rtw: RTWOrderByRelationAggregateInput
  sex: SortOrder
  sia: SIABadgeOrderByRelationAggregateInput
  subsciption: SortOrder
  subscription: SubscriptionOnAccountOrderByRelationAggregateInput
  subusers: SubuserOnAccountOrderByRelationAggregateInput
  title: SortOrder
  transactions: TransactionOrderByRelationAggregateInput
  updatedAt: SortOrder
  username: SortOrder
}

input AccountRelationFilter {
  is: AccountWhereInput
  isNot: AccountWhereInput
}

enum AccountScalarFieldEnum {
  Salutation
  accountType
  applied
  createdAt
  deleted
  dob
  firstname
  id
  label
  lastLogin
  lastname
  midname
  password
  promoted
  resetPasswordExpires
  resetPasswordToken
  retired
  sex
  subsciption
  title
  updatedAt
  username
}

input AccountScalarWhereInput {
  AND: [AccountScalarWhereInput!]
  NOT: [AccountScalarWhereInput!]
  OR: [AccountScalarWhereInput!]
  Salutation: StringNullableFilter
  accountType: EnumAccountTypeFilter
  applied: DateTimeFilter
  createdAt: DateTimeFilter
  deleted: DateTimeNullableFilter
  dob: DateTimeFilter
  firstname: StringNullableFilter
  id: StringFilter
  label: StringFilter
  lastLogin: DateTimeFilter
  lastname: StringFilter
  midname: StringNullableFilter
  password: StringNullableFilter
  promoted: DateTimeFilter
  resetPasswordExpires: DateTimeNullableFilter
  resetPasswordToken: StringNullableFilter
  retired: DateTimeFilter
  sex: StringNullableFilter
  subsciption: BoolFilter
  title: EnumTitleNullableFilter
  updatedAt: DateTimeFilter
  username: StringNullableFilter
}

input AccountScalarWhereWithAggregatesInput {
  AND: [AccountScalarWhereWithAggregatesInput!]
  NOT: [AccountScalarWhereWithAggregatesInput!]
  OR: [AccountScalarWhereWithAggregatesInput!]
  Salutation: StringNullableWithAggregatesFilter
  accountType: EnumAccountTypeWithAggregatesFilter
  applied: DateTimeWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deleted: DateTimeNullableWithAggregatesFilter
  dob: DateTimeWithAggregatesFilter
  firstname: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  label: StringWithAggregatesFilter
  lastLogin: DateTimeWithAggregatesFilter
  lastname: StringWithAggregatesFilter
  midname: StringNullableWithAggregatesFilter
  password: StringNullableWithAggregatesFilter
  promoted: DateTimeWithAggregatesFilter
  resetPasswordExpires: DateTimeNullableWithAggregatesFilter
  resetPasswordToken: StringNullableWithAggregatesFilter
  retired: DateTimeWithAggregatesFilter
  sex: StringNullableWithAggregatesFilter
  subsciption: BoolWithAggregatesFilter
  title: EnumTitleNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  username: StringNullableWithAggregatesFilter
}

enum AccountType {
  SOFTWARE
  SUPPLIER
  USER
  VENUE
}

input AccountUpdateInput {
  Salutation: NullableStringFieldUpdateOperationsInput
  Status: StatusOnAccountUpdateManyWithoutAccountInput
  accesses: SubuserOnAccountUpdateManyWithoutAccountInput
  accountType: EnumAccountTypeFieldUpdateOperationsInput
  accounts: ManagersOnAccountUpdateManyWithoutAccountInput
  addresses: AddressUpdateManyWithoutAccountInput
  apiToken: TokenUpdateManyWithoutAccountInput
  application: ApplicationUpdateManyWithoutAccountInput
  applied: DateTimeFieldUpdateOperationsInput
  contactOfAdress: ContactAtAddressUpdateManyWithoutAccountInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  dob: DateTimeFieldUpdateOperationsInput
  emails: EmailUpdateManyWithoutAccountInput
  files: FilesUpdateManyWithoutAccountInput
  firstname: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  lastLogin: DateTimeFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  managers: ManagersOnAccountUpdateManyWithoutManagersInput
  midname: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAccountInput
  primaryAddress: AddressUpdateOneWithoutPrimaryAccountInput
  promoted: DateTimeFieldUpdateOperationsInput
  resetPasswordExpires: NullableDateTimeFieldUpdateOperationsInput
  resetPasswordToken: NullableStringFieldUpdateOperationsInput
  retired: DateTimeFieldUpdateOperationsInput
  rtw: RTWUpdateManyWithoutAccountInput
  sex: NullableStringFieldUpdateOperationsInput
  sia: SIABadgeUpdateManyWithoutAccountInput
  subsciption: BoolFieldUpdateOperationsInput
  subscription: SubscriptionOnAccountUpdateManyWithoutAccountInput
  subusers: SubuserOnAccountUpdateManyWithoutSubuserInput
  title: NullableEnumTitleFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutAccountInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input AccountUpdateManyMutationInput {
  Salutation: NullableStringFieldUpdateOperationsInput
  accountType: EnumAccountTypeFieldUpdateOperationsInput
  applied: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  dob: DateTimeFieldUpdateOperationsInput
  firstname: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  lastLogin: DateTimeFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  midname: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  promoted: DateTimeFieldUpdateOperationsInput
  resetPasswordExpires: NullableDateTimeFieldUpdateOperationsInput
  resetPasswordToken: NullableStringFieldUpdateOperationsInput
  retired: DateTimeFieldUpdateOperationsInput
  sex: NullableStringFieldUpdateOperationsInput
  subsciption: BoolFieldUpdateOperationsInput
  title: NullableEnumTitleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input AccountUpdateManyWithWhereWithoutFilesInput {
  data: AccountUpdateManyMutationInput!
  where: AccountScalarWhereInput!
}

input AccountUpdateManyWithoutFilesInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutFilesInput!]
  create: [AccountCreateWithoutFilesInput!]
  delete: [AccountWhereUniqueInput!]
  deleteMany: [AccountScalarWhereInput!]
  disconnect: [AccountWhereUniqueInput!]
  set: [AccountWhereUniqueInput!]
  update: [AccountUpdateWithWhereUniqueWithoutFilesInput!]
  updateMany: [AccountUpdateManyWithWhereWithoutFilesInput!]
  upsert: [AccountUpsertWithWhereUniqueWithoutFilesInput!]
}

input AccountUpdateOneRequiredWithoutAccessesInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutAccessesInput
  create: AccountCreateWithoutAccessesInput
  update: AccountUpdateWithoutAccessesInput
  upsert: AccountUpsertWithoutAccessesInput
}

input AccountUpdateOneRequiredWithoutAccountsInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutAccountsInput
  create: AccountCreateWithoutAccountsInput
  update: AccountUpdateWithoutAccountsInput
  upsert: AccountUpsertWithoutAccountsInput
}

input AccountUpdateOneRequiredWithoutAddressesInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutAddressesInput
  create: AccountCreateWithoutAddressesInput
  update: AccountUpdateWithoutAddressesInput
  upsert: AccountUpsertWithoutAddressesInput
}

input AccountUpdateOneRequiredWithoutApiTokenInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutApiTokenInput
  create: AccountCreateWithoutApiTokenInput
  update: AccountUpdateWithoutApiTokenInput
  upsert: AccountUpsertWithoutApiTokenInput
}

input AccountUpdateOneRequiredWithoutApplicationInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutApplicationInput
  create: AccountCreateWithoutApplicationInput
  update: AccountUpdateWithoutApplicationInput
  upsert: AccountUpsertWithoutApplicationInput
}

input AccountUpdateOneRequiredWithoutContactOfAdressInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutContactOfAdressInput
  create: AccountCreateWithoutContactOfAdressInput
  update: AccountUpdateWithoutContactOfAdressInput
  upsert: AccountUpsertWithoutContactOfAdressInput
}

input AccountUpdateOneRequiredWithoutManagersInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutManagersInput
  create: AccountCreateWithoutManagersInput
  update: AccountUpdateWithoutManagersInput
  upsert: AccountUpsertWithoutManagersInput
}

input AccountUpdateOneRequiredWithoutPhonesInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutPhonesInput
  create: AccountCreateWithoutPhonesInput
  update: AccountUpdateWithoutPhonesInput
  upsert: AccountUpsertWithoutPhonesInput
}

input AccountUpdateOneRequiredWithoutRtwInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutRtwInput
  create: AccountCreateWithoutRtwInput
  update: AccountUpdateWithoutRtwInput
  upsert: AccountUpsertWithoutRtwInput
}

input AccountUpdateOneRequiredWithoutSiaInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutSiaInput
  create: AccountCreateWithoutSiaInput
  update: AccountUpdateWithoutSiaInput
  upsert: AccountUpsertWithoutSiaInput
}

input AccountUpdateOneRequiredWithoutStatusInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutStatusInput
  create: AccountCreateWithoutStatusInput
  update: AccountUpdateWithoutStatusInput
  upsert: AccountUpsertWithoutStatusInput
}

input AccountUpdateOneRequiredWithoutSubscriptionInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutSubscriptionInput
  create: AccountCreateWithoutSubscriptionInput
  update: AccountUpdateWithoutSubscriptionInput
  upsert: AccountUpsertWithoutSubscriptionInput
}

input AccountUpdateOneRequiredWithoutSubusersInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutSubusersInput
  create: AccountCreateWithoutSubusersInput
  update: AccountUpdateWithoutSubusersInput
  upsert: AccountUpsertWithoutSubusersInput
}

input AccountUpdateOneRequiredWithoutTransactionsInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutTransactionsInput
  create: AccountCreateWithoutTransactionsInput
  update: AccountUpdateWithoutTransactionsInput
  upsert: AccountUpsertWithoutTransactionsInput
}

input AccountUpdateOneWithoutEmailsInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutEmailsInput
  create: AccountCreateWithoutEmailsInput
  delete: Boolean
  disconnect: Boolean
  update: AccountUpdateWithoutEmailsInput
  upsert: AccountUpsertWithoutEmailsInput
}

input AccountUpdateOneWithoutPrimaryAddressInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutPrimaryAddressInput
  create: AccountCreateWithoutPrimaryAddressInput
  delete: Boolean
  disconnect: Boolean
  update: AccountUpdateWithoutPrimaryAddressInput
  upsert: AccountUpsertWithoutPrimaryAddressInput
}

input AccountUpdateWithWhereUniqueWithoutFilesInput {
  data: AccountUpdateWithoutFilesInput!
  where: AccountWhereUniqueInput!
}

input AccountUpdateWithoutAccessesInput {
  Salutation: NullableStringFieldUpdateOperationsInput
  Status: StatusOnAccountUpdateManyWithoutAccountInput
  accountType: EnumAccountTypeFieldUpdateOperationsInput
  accounts: ManagersOnAccountUpdateManyWithoutAccountInput
  addresses: AddressUpdateManyWithoutAccountInput
  apiToken: TokenUpdateManyWithoutAccountInput
  application: ApplicationUpdateManyWithoutAccountInput
  applied: DateTimeFieldUpdateOperationsInput
  contactOfAdress: ContactAtAddressUpdateManyWithoutAccountInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  dob: DateTimeFieldUpdateOperationsInput
  emails: EmailUpdateManyWithoutAccountInput
  files: FilesUpdateManyWithoutAccountInput
  firstname: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  lastLogin: DateTimeFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  managers: ManagersOnAccountUpdateManyWithoutManagersInput
  midname: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAccountInput
  primaryAddress: AddressUpdateOneWithoutPrimaryAccountInput
  promoted: DateTimeFieldUpdateOperationsInput
  resetPasswordExpires: NullableDateTimeFieldUpdateOperationsInput
  resetPasswordToken: NullableStringFieldUpdateOperationsInput
  retired: DateTimeFieldUpdateOperationsInput
  rtw: RTWUpdateManyWithoutAccountInput
  sex: NullableStringFieldUpdateOperationsInput
  sia: SIABadgeUpdateManyWithoutAccountInput
  subsciption: BoolFieldUpdateOperationsInput
  subscription: SubscriptionOnAccountUpdateManyWithoutAccountInput
  subusers: SubuserOnAccountUpdateManyWithoutSubuserInput
  title: NullableEnumTitleFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutAccountInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input AccountUpdateWithoutAccountsInput {
  Salutation: NullableStringFieldUpdateOperationsInput
  Status: StatusOnAccountUpdateManyWithoutAccountInput
  accesses: SubuserOnAccountUpdateManyWithoutAccountInput
  accountType: EnumAccountTypeFieldUpdateOperationsInput
  addresses: AddressUpdateManyWithoutAccountInput
  apiToken: TokenUpdateManyWithoutAccountInput
  application: ApplicationUpdateManyWithoutAccountInput
  applied: DateTimeFieldUpdateOperationsInput
  contactOfAdress: ContactAtAddressUpdateManyWithoutAccountInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  dob: DateTimeFieldUpdateOperationsInput
  emails: EmailUpdateManyWithoutAccountInput
  files: FilesUpdateManyWithoutAccountInput
  firstname: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  lastLogin: DateTimeFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  managers: ManagersOnAccountUpdateManyWithoutManagersInput
  midname: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAccountInput
  primaryAddress: AddressUpdateOneWithoutPrimaryAccountInput
  promoted: DateTimeFieldUpdateOperationsInput
  resetPasswordExpires: NullableDateTimeFieldUpdateOperationsInput
  resetPasswordToken: NullableStringFieldUpdateOperationsInput
  retired: DateTimeFieldUpdateOperationsInput
  rtw: RTWUpdateManyWithoutAccountInput
  sex: NullableStringFieldUpdateOperationsInput
  sia: SIABadgeUpdateManyWithoutAccountInput
  subsciption: BoolFieldUpdateOperationsInput
  subscription: SubscriptionOnAccountUpdateManyWithoutAccountInput
  subusers: SubuserOnAccountUpdateManyWithoutSubuserInput
  title: NullableEnumTitleFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutAccountInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input AccountUpdateWithoutAddressesInput {
  Salutation: NullableStringFieldUpdateOperationsInput
  Status: StatusOnAccountUpdateManyWithoutAccountInput
  accesses: SubuserOnAccountUpdateManyWithoutAccountInput
  accountType: EnumAccountTypeFieldUpdateOperationsInput
  accounts: ManagersOnAccountUpdateManyWithoutAccountInput
  apiToken: TokenUpdateManyWithoutAccountInput
  application: ApplicationUpdateManyWithoutAccountInput
  applied: DateTimeFieldUpdateOperationsInput
  contactOfAdress: ContactAtAddressUpdateManyWithoutAccountInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  dob: DateTimeFieldUpdateOperationsInput
  emails: EmailUpdateManyWithoutAccountInput
  files: FilesUpdateManyWithoutAccountInput
  firstname: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  lastLogin: DateTimeFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  managers: ManagersOnAccountUpdateManyWithoutManagersInput
  midname: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAccountInput
  primaryAddress: AddressUpdateOneWithoutPrimaryAccountInput
  promoted: DateTimeFieldUpdateOperationsInput
  resetPasswordExpires: NullableDateTimeFieldUpdateOperationsInput
  resetPasswordToken: NullableStringFieldUpdateOperationsInput
  retired: DateTimeFieldUpdateOperationsInput
  rtw: RTWUpdateManyWithoutAccountInput
  sex: NullableStringFieldUpdateOperationsInput
  sia: SIABadgeUpdateManyWithoutAccountInput
  subsciption: BoolFieldUpdateOperationsInput
  subscription: SubscriptionOnAccountUpdateManyWithoutAccountInput
  subusers: SubuserOnAccountUpdateManyWithoutSubuserInput
  title: NullableEnumTitleFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutAccountInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input AccountUpdateWithoutApiTokenInput {
  Salutation: NullableStringFieldUpdateOperationsInput
  Status: StatusOnAccountUpdateManyWithoutAccountInput
  accesses: SubuserOnAccountUpdateManyWithoutAccountInput
  accountType: EnumAccountTypeFieldUpdateOperationsInput
  accounts: ManagersOnAccountUpdateManyWithoutAccountInput
  addresses: AddressUpdateManyWithoutAccountInput
  application: ApplicationUpdateManyWithoutAccountInput
  applied: DateTimeFieldUpdateOperationsInput
  contactOfAdress: ContactAtAddressUpdateManyWithoutAccountInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  dob: DateTimeFieldUpdateOperationsInput
  emails: EmailUpdateManyWithoutAccountInput
  files: FilesUpdateManyWithoutAccountInput
  firstname: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  lastLogin: DateTimeFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  managers: ManagersOnAccountUpdateManyWithoutManagersInput
  midname: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAccountInput
  primaryAddress: AddressUpdateOneWithoutPrimaryAccountInput
  promoted: DateTimeFieldUpdateOperationsInput
  resetPasswordExpires: NullableDateTimeFieldUpdateOperationsInput
  resetPasswordToken: NullableStringFieldUpdateOperationsInput
  retired: DateTimeFieldUpdateOperationsInput
  rtw: RTWUpdateManyWithoutAccountInput
  sex: NullableStringFieldUpdateOperationsInput
  sia: SIABadgeUpdateManyWithoutAccountInput
  subsciption: BoolFieldUpdateOperationsInput
  subscription: SubscriptionOnAccountUpdateManyWithoutAccountInput
  subusers: SubuserOnAccountUpdateManyWithoutSubuserInput
  title: NullableEnumTitleFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutAccountInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input AccountUpdateWithoutApplicationInput {
  Salutation: NullableStringFieldUpdateOperationsInput
  Status: StatusOnAccountUpdateManyWithoutAccountInput
  accesses: SubuserOnAccountUpdateManyWithoutAccountInput
  accountType: EnumAccountTypeFieldUpdateOperationsInput
  accounts: ManagersOnAccountUpdateManyWithoutAccountInput
  addresses: AddressUpdateManyWithoutAccountInput
  apiToken: TokenUpdateManyWithoutAccountInput
  applied: DateTimeFieldUpdateOperationsInput
  contactOfAdress: ContactAtAddressUpdateManyWithoutAccountInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  dob: DateTimeFieldUpdateOperationsInput
  emails: EmailUpdateManyWithoutAccountInput
  files: FilesUpdateManyWithoutAccountInput
  firstname: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  lastLogin: DateTimeFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  managers: ManagersOnAccountUpdateManyWithoutManagersInput
  midname: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAccountInput
  primaryAddress: AddressUpdateOneWithoutPrimaryAccountInput
  promoted: DateTimeFieldUpdateOperationsInput
  resetPasswordExpires: NullableDateTimeFieldUpdateOperationsInput
  resetPasswordToken: NullableStringFieldUpdateOperationsInput
  retired: DateTimeFieldUpdateOperationsInput
  rtw: RTWUpdateManyWithoutAccountInput
  sex: NullableStringFieldUpdateOperationsInput
  sia: SIABadgeUpdateManyWithoutAccountInput
  subsciption: BoolFieldUpdateOperationsInput
  subscription: SubscriptionOnAccountUpdateManyWithoutAccountInput
  subusers: SubuserOnAccountUpdateManyWithoutSubuserInput
  title: NullableEnumTitleFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutAccountInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input AccountUpdateWithoutContactOfAdressInput {
  Salutation: NullableStringFieldUpdateOperationsInput
  Status: StatusOnAccountUpdateManyWithoutAccountInput
  accesses: SubuserOnAccountUpdateManyWithoutAccountInput
  accountType: EnumAccountTypeFieldUpdateOperationsInput
  accounts: ManagersOnAccountUpdateManyWithoutAccountInput
  addresses: AddressUpdateManyWithoutAccountInput
  apiToken: TokenUpdateManyWithoutAccountInput
  application: ApplicationUpdateManyWithoutAccountInput
  applied: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  dob: DateTimeFieldUpdateOperationsInput
  emails: EmailUpdateManyWithoutAccountInput
  files: FilesUpdateManyWithoutAccountInput
  firstname: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  lastLogin: DateTimeFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  managers: ManagersOnAccountUpdateManyWithoutManagersInput
  midname: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAccountInput
  primaryAddress: AddressUpdateOneWithoutPrimaryAccountInput
  promoted: DateTimeFieldUpdateOperationsInput
  resetPasswordExpires: NullableDateTimeFieldUpdateOperationsInput
  resetPasswordToken: NullableStringFieldUpdateOperationsInput
  retired: DateTimeFieldUpdateOperationsInput
  rtw: RTWUpdateManyWithoutAccountInput
  sex: NullableStringFieldUpdateOperationsInput
  sia: SIABadgeUpdateManyWithoutAccountInput
  subsciption: BoolFieldUpdateOperationsInput
  subscription: SubscriptionOnAccountUpdateManyWithoutAccountInput
  subusers: SubuserOnAccountUpdateManyWithoutSubuserInput
  title: NullableEnumTitleFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutAccountInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input AccountUpdateWithoutEmailsInput {
  Salutation: NullableStringFieldUpdateOperationsInput
  Status: StatusOnAccountUpdateManyWithoutAccountInput
  accesses: SubuserOnAccountUpdateManyWithoutAccountInput
  accountType: EnumAccountTypeFieldUpdateOperationsInput
  accounts: ManagersOnAccountUpdateManyWithoutAccountInput
  addresses: AddressUpdateManyWithoutAccountInput
  apiToken: TokenUpdateManyWithoutAccountInput
  application: ApplicationUpdateManyWithoutAccountInput
  applied: DateTimeFieldUpdateOperationsInput
  contactOfAdress: ContactAtAddressUpdateManyWithoutAccountInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  dob: DateTimeFieldUpdateOperationsInput
  files: FilesUpdateManyWithoutAccountInput
  firstname: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  lastLogin: DateTimeFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  managers: ManagersOnAccountUpdateManyWithoutManagersInput
  midname: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAccountInput
  primaryAddress: AddressUpdateOneWithoutPrimaryAccountInput
  promoted: DateTimeFieldUpdateOperationsInput
  resetPasswordExpires: NullableDateTimeFieldUpdateOperationsInput
  resetPasswordToken: NullableStringFieldUpdateOperationsInput
  retired: DateTimeFieldUpdateOperationsInput
  rtw: RTWUpdateManyWithoutAccountInput
  sex: NullableStringFieldUpdateOperationsInput
  sia: SIABadgeUpdateManyWithoutAccountInput
  subsciption: BoolFieldUpdateOperationsInput
  subscription: SubscriptionOnAccountUpdateManyWithoutAccountInput
  subusers: SubuserOnAccountUpdateManyWithoutSubuserInput
  title: NullableEnumTitleFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutAccountInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input AccountUpdateWithoutFilesInput {
  Salutation: NullableStringFieldUpdateOperationsInput
  Status: StatusOnAccountUpdateManyWithoutAccountInput
  accesses: SubuserOnAccountUpdateManyWithoutAccountInput
  accountType: EnumAccountTypeFieldUpdateOperationsInput
  accounts: ManagersOnAccountUpdateManyWithoutAccountInput
  addresses: AddressUpdateManyWithoutAccountInput
  apiToken: TokenUpdateManyWithoutAccountInput
  application: ApplicationUpdateManyWithoutAccountInput
  applied: DateTimeFieldUpdateOperationsInput
  contactOfAdress: ContactAtAddressUpdateManyWithoutAccountInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  dob: DateTimeFieldUpdateOperationsInput
  emails: EmailUpdateManyWithoutAccountInput
  firstname: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  lastLogin: DateTimeFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  managers: ManagersOnAccountUpdateManyWithoutManagersInput
  midname: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAccountInput
  primaryAddress: AddressUpdateOneWithoutPrimaryAccountInput
  promoted: DateTimeFieldUpdateOperationsInput
  resetPasswordExpires: NullableDateTimeFieldUpdateOperationsInput
  resetPasswordToken: NullableStringFieldUpdateOperationsInput
  retired: DateTimeFieldUpdateOperationsInput
  rtw: RTWUpdateManyWithoutAccountInput
  sex: NullableStringFieldUpdateOperationsInput
  sia: SIABadgeUpdateManyWithoutAccountInput
  subsciption: BoolFieldUpdateOperationsInput
  subscription: SubscriptionOnAccountUpdateManyWithoutAccountInput
  subusers: SubuserOnAccountUpdateManyWithoutSubuserInput
  title: NullableEnumTitleFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutAccountInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input AccountUpdateWithoutManagersInput {
  Salutation: NullableStringFieldUpdateOperationsInput
  Status: StatusOnAccountUpdateManyWithoutAccountInput
  accesses: SubuserOnAccountUpdateManyWithoutAccountInput
  accountType: EnumAccountTypeFieldUpdateOperationsInput
  accounts: ManagersOnAccountUpdateManyWithoutAccountInput
  addresses: AddressUpdateManyWithoutAccountInput
  apiToken: TokenUpdateManyWithoutAccountInput
  application: ApplicationUpdateManyWithoutAccountInput
  applied: DateTimeFieldUpdateOperationsInput
  contactOfAdress: ContactAtAddressUpdateManyWithoutAccountInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  dob: DateTimeFieldUpdateOperationsInput
  emails: EmailUpdateManyWithoutAccountInput
  files: FilesUpdateManyWithoutAccountInput
  firstname: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  lastLogin: DateTimeFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  midname: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAccountInput
  primaryAddress: AddressUpdateOneWithoutPrimaryAccountInput
  promoted: DateTimeFieldUpdateOperationsInput
  resetPasswordExpires: NullableDateTimeFieldUpdateOperationsInput
  resetPasswordToken: NullableStringFieldUpdateOperationsInput
  retired: DateTimeFieldUpdateOperationsInput
  rtw: RTWUpdateManyWithoutAccountInput
  sex: NullableStringFieldUpdateOperationsInput
  sia: SIABadgeUpdateManyWithoutAccountInput
  subsciption: BoolFieldUpdateOperationsInput
  subscription: SubscriptionOnAccountUpdateManyWithoutAccountInput
  subusers: SubuserOnAccountUpdateManyWithoutSubuserInput
  title: NullableEnumTitleFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutAccountInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input AccountUpdateWithoutPhonesInput {
  Salutation: NullableStringFieldUpdateOperationsInput
  Status: StatusOnAccountUpdateManyWithoutAccountInput
  accesses: SubuserOnAccountUpdateManyWithoutAccountInput
  accountType: EnumAccountTypeFieldUpdateOperationsInput
  accounts: ManagersOnAccountUpdateManyWithoutAccountInput
  addresses: AddressUpdateManyWithoutAccountInput
  apiToken: TokenUpdateManyWithoutAccountInput
  application: ApplicationUpdateManyWithoutAccountInput
  applied: DateTimeFieldUpdateOperationsInput
  contactOfAdress: ContactAtAddressUpdateManyWithoutAccountInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  dob: DateTimeFieldUpdateOperationsInput
  emails: EmailUpdateManyWithoutAccountInput
  files: FilesUpdateManyWithoutAccountInput
  firstname: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  lastLogin: DateTimeFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  managers: ManagersOnAccountUpdateManyWithoutManagersInput
  midname: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  primaryAddress: AddressUpdateOneWithoutPrimaryAccountInput
  promoted: DateTimeFieldUpdateOperationsInput
  resetPasswordExpires: NullableDateTimeFieldUpdateOperationsInput
  resetPasswordToken: NullableStringFieldUpdateOperationsInput
  retired: DateTimeFieldUpdateOperationsInput
  rtw: RTWUpdateManyWithoutAccountInput
  sex: NullableStringFieldUpdateOperationsInput
  sia: SIABadgeUpdateManyWithoutAccountInput
  subsciption: BoolFieldUpdateOperationsInput
  subscription: SubscriptionOnAccountUpdateManyWithoutAccountInput
  subusers: SubuserOnAccountUpdateManyWithoutSubuserInput
  title: NullableEnumTitleFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutAccountInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input AccountUpdateWithoutPrimaryAddressInput {
  Salutation: NullableStringFieldUpdateOperationsInput
  Status: StatusOnAccountUpdateManyWithoutAccountInput
  accesses: SubuserOnAccountUpdateManyWithoutAccountInput
  accountType: EnumAccountTypeFieldUpdateOperationsInput
  accounts: ManagersOnAccountUpdateManyWithoutAccountInput
  addresses: AddressUpdateManyWithoutAccountInput
  apiToken: TokenUpdateManyWithoutAccountInput
  application: ApplicationUpdateManyWithoutAccountInput
  applied: DateTimeFieldUpdateOperationsInput
  contactOfAdress: ContactAtAddressUpdateManyWithoutAccountInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  dob: DateTimeFieldUpdateOperationsInput
  emails: EmailUpdateManyWithoutAccountInput
  files: FilesUpdateManyWithoutAccountInput
  firstname: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  lastLogin: DateTimeFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  managers: ManagersOnAccountUpdateManyWithoutManagersInput
  midname: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAccountInput
  promoted: DateTimeFieldUpdateOperationsInput
  resetPasswordExpires: NullableDateTimeFieldUpdateOperationsInput
  resetPasswordToken: NullableStringFieldUpdateOperationsInput
  retired: DateTimeFieldUpdateOperationsInput
  rtw: RTWUpdateManyWithoutAccountInput
  sex: NullableStringFieldUpdateOperationsInput
  sia: SIABadgeUpdateManyWithoutAccountInput
  subsciption: BoolFieldUpdateOperationsInput
  subscription: SubscriptionOnAccountUpdateManyWithoutAccountInput
  subusers: SubuserOnAccountUpdateManyWithoutSubuserInput
  title: NullableEnumTitleFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutAccountInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input AccountUpdateWithoutRtwInput {
  Salutation: NullableStringFieldUpdateOperationsInput
  Status: StatusOnAccountUpdateManyWithoutAccountInput
  accesses: SubuserOnAccountUpdateManyWithoutAccountInput
  accountType: EnumAccountTypeFieldUpdateOperationsInput
  accounts: ManagersOnAccountUpdateManyWithoutAccountInput
  addresses: AddressUpdateManyWithoutAccountInput
  apiToken: TokenUpdateManyWithoutAccountInput
  application: ApplicationUpdateManyWithoutAccountInput
  applied: DateTimeFieldUpdateOperationsInput
  contactOfAdress: ContactAtAddressUpdateManyWithoutAccountInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  dob: DateTimeFieldUpdateOperationsInput
  emails: EmailUpdateManyWithoutAccountInput
  files: FilesUpdateManyWithoutAccountInput
  firstname: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  lastLogin: DateTimeFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  managers: ManagersOnAccountUpdateManyWithoutManagersInput
  midname: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAccountInput
  primaryAddress: AddressUpdateOneWithoutPrimaryAccountInput
  promoted: DateTimeFieldUpdateOperationsInput
  resetPasswordExpires: NullableDateTimeFieldUpdateOperationsInput
  resetPasswordToken: NullableStringFieldUpdateOperationsInput
  retired: DateTimeFieldUpdateOperationsInput
  sex: NullableStringFieldUpdateOperationsInput
  sia: SIABadgeUpdateManyWithoutAccountInput
  subsciption: BoolFieldUpdateOperationsInput
  subscription: SubscriptionOnAccountUpdateManyWithoutAccountInput
  subusers: SubuserOnAccountUpdateManyWithoutSubuserInput
  title: NullableEnumTitleFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutAccountInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input AccountUpdateWithoutSiaInput {
  Salutation: NullableStringFieldUpdateOperationsInput
  Status: StatusOnAccountUpdateManyWithoutAccountInput
  accesses: SubuserOnAccountUpdateManyWithoutAccountInput
  accountType: EnumAccountTypeFieldUpdateOperationsInput
  accounts: ManagersOnAccountUpdateManyWithoutAccountInput
  addresses: AddressUpdateManyWithoutAccountInput
  apiToken: TokenUpdateManyWithoutAccountInput
  application: ApplicationUpdateManyWithoutAccountInput
  applied: DateTimeFieldUpdateOperationsInput
  contactOfAdress: ContactAtAddressUpdateManyWithoutAccountInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  dob: DateTimeFieldUpdateOperationsInput
  emails: EmailUpdateManyWithoutAccountInput
  files: FilesUpdateManyWithoutAccountInput
  firstname: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  lastLogin: DateTimeFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  managers: ManagersOnAccountUpdateManyWithoutManagersInput
  midname: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAccountInput
  primaryAddress: AddressUpdateOneWithoutPrimaryAccountInput
  promoted: DateTimeFieldUpdateOperationsInput
  resetPasswordExpires: NullableDateTimeFieldUpdateOperationsInput
  resetPasswordToken: NullableStringFieldUpdateOperationsInput
  retired: DateTimeFieldUpdateOperationsInput
  rtw: RTWUpdateManyWithoutAccountInput
  sex: NullableStringFieldUpdateOperationsInput
  subsciption: BoolFieldUpdateOperationsInput
  subscription: SubscriptionOnAccountUpdateManyWithoutAccountInput
  subusers: SubuserOnAccountUpdateManyWithoutSubuserInput
  title: NullableEnumTitleFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutAccountInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input AccountUpdateWithoutStatusInput {
  Salutation: NullableStringFieldUpdateOperationsInput
  accesses: SubuserOnAccountUpdateManyWithoutAccountInput
  accountType: EnumAccountTypeFieldUpdateOperationsInput
  accounts: ManagersOnAccountUpdateManyWithoutAccountInput
  addresses: AddressUpdateManyWithoutAccountInput
  apiToken: TokenUpdateManyWithoutAccountInput
  application: ApplicationUpdateManyWithoutAccountInput
  applied: DateTimeFieldUpdateOperationsInput
  contactOfAdress: ContactAtAddressUpdateManyWithoutAccountInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  dob: DateTimeFieldUpdateOperationsInput
  emails: EmailUpdateManyWithoutAccountInput
  files: FilesUpdateManyWithoutAccountInput
  firstname: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  lastLogin: DateTimeFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  managers: ManagersOnAccountUpdateManyWithoutManagersInput
  midname: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAccountInput
  primaryAddress: AddressUpdateOneWithoutPrimaryAccountInput
  promoted: DateTimeFieldUpdateOperationsInput
  resetPasswordExpires: NullableDateTimeFieldUpdateOperationsInput
  resetPasswordToken: NullableStringFieldUpdateOperationsInput
  retired: DateTimeFieldUpdateOperationsInput
  rtw: RTWUpdateManyWithoutAccountInput
  sex: NullableStringFieldUpdateOperationsInput
  sia: SIABadgeUpdateManyWithoutAccountInput
  subsciption: BoolFieldUpdateOperationsInput
  subscription: SubscriptionOnAccountUpdateManyWithoutAccountInput
  subusers: SubuserOnAccountUpdateManyWithoutSubuserInput
  title: NullableEnumTitleFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutAccountInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input AccountUpdateWithoutSubscriptionInput {
  Salutation: NullableStringFieldUpdateOperationsInput
  Status: StatusOnAccountUpdateManyWithoutAccountInput
  accesses: SubuserOnAccountUpdateManyWithoutAccountInput
  accountType: EnumAccountTypeFieldUpdateOperationsInput
  accounts: ManagersOnAccountUpdateManyWithoutAccountInput
  addresses: AddressUpdateManyWithoutAccountInput
  apiToken: TokenUpdateManyWithoutAccountInput
  application: ApplicationUpdateManyWithoutAccountInput
  applied: DateTimeFieldUpdateOperationsInput
  contactOfAdress: ContactAtAddressUpdateManyWithoutAccountInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  dob: DateTimeFieldUpdateOperationsInput
  emails: EmailUpdateManyWithoutAccountInput
  files: FilesUpdateManyWithoutAccountInput
  firstname: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  lastLogin: DateTimeFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  managers: ManagersOnAccountUpdateManyWithoutManagersInput
  midname: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAccountInput
  primaryAddress: AddressUpdateOneWithoutPrimaryAccountInput
  promoted: DateTimeFieldUpdateOperationsInput
  resetPasswordExpires: NullableDateTimeFieldUpdateOperationsInput
  resetPasswordToken: NullableStringFieldUpdateOperationsInput
  retired: DateTimeFieldUpdateOperationsInput
  rtw: RTWUpdateManyWithoutAccountInput
  sex: NullableStringFieldUpdateOperationsInput
  sia: SIABadgeUpdateManyWithoutAccountInput
  subsciption: BoolFieldUpdateOperationsInput
  subusers: SubuserOnAccountUpdateManyWithoutSubuserInput
  title: NullableEnumTitleFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutAccountInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input AccountUpdateWithoutSubusersInput {
  Salutation: NullableStringFieldUpdateOperationsInput
  Status: StatusOnAccountUpdateManyWithoutAccountInput
  accesses: SubuserOnAccountUpdateManyWithoutAccountInput
  accountType: EnumAccountTypeFieldUpdateOperationsInput
  accounts: ManagersOnAccountUpdateManyWithoutAccountInput
  addresses: AddressUpdateManyWithoutAccountInput
  apiToken: TokenUpdateManyWithoutAccountInput
  application: ApplicationUpdateManyWithoutAccountInput
  applied: DateTimeFieldUpdateOperationsInput
  contactOfAdress: ContactAtAddressUpdateManyWithoutAccountInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  dob: DateTimeFieldUpdateOperationsInput
  emails: EmailUpdateManyWithoutAccountInput
  files: FilesUpdateManyWithoutAccountInput
  firstname: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  lastLogin: DateTimeFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  managers: ManagersOnAccountUpdateManyWithoutManagersInput
  midname: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAccountInput
  primaryAddress: AddressUpdateOneWithoutPrimaryAccountInput
  promoted: DateTimeFieldUpdateOperationsInput
  resetPasswordExpires: NullableDateTimeFieldUpdateOperationsInput
  resetPasswordToken: NullableStringFieldUpdateOperationsInput
  retired: DateTimeFieldUpdateOperationsInput
  rtw: RTWUpdateManyWithoutAccountInput
  sex: NullableStringFieldUpdateOperationsInput
  sia: SIABadgeUpdateManyWithoutAccountInput
  subsciption: BoolFieldUpdateOperationsInput
  subscription: SubscriptionOnAccountUpdateManyWithoutAccountInput
  title: NullableEnumTitleFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutAccountInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input AccountUpdateWithoutTransactionsInput {
  Salutation: NullableStringFieldUpdateOperationsInput
  Status: StatusOnAccountUpdateManyWithoutAccountInput
  accesses: SubuserOnAccountUpdateManyWithoutAccountInput
  accountType: EnumAccountTypeFieldUpdateOperationsInput
  accounts: ManagersOnAccountUpdateManyWithoutAccountInput
  addresses: AddressUpdateManyWithoutAccountInput
  apiToken: TokenUpdateManyWithoutAccountInput
  application: ApplicationUpdateManyWithoutAccountInput
  applied: DateTimeFieldUpdateOperationsInput
  contactOfAdress: ContactAtAddressUpdateManyWithoutAccountInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  dob: DateTimeFieldUpdateOperationsInput
  emails: EmailUpdateManyWithoutAccountInput
  files: FilesUpdateManyWithoutAccountInput
  firstname: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  lastLogin: DateTimeFieldUpdateOperationsInput
  lastname: StringFieldUpdateOperationsInput
  managers: ManagersOnAccountUpdateManyWithoutManagersInput
  midname: NullableStringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAccountInput
  primaryAddress: AddressUpdateOneWithoutPrimaryAccountInput
  promoted: DateTimeFieldUpdateOperationsInput
  resetPasswordExpires: NullableDateTimeFieldUpdateOperationsInput
  resetPasswordToken: NullableStringFieldUpdateOperationsInput
  retired: DateTimeFieldUpdateOperationsInput
  rtw: RTWUpdateManyWithoutAccountInput
  sex: NullableStringFieldUpdateOperationsInput
  sia: SIABadgeUpdateManyWithoutAccountInput
  subsciption: BoolFieldUpdateOperationsInput
  subscription: SubscriptionOnAccountUpdateManyWithoutAccountInput
  subusers: SubuserOnAccountUpdateManyWithoutSubuserInput
  title: NullableEnumTitleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input AccountUpsertWithWhereUniqueWithoutFilesInput {
  create: AccountCreateWithoutFilesInput!
  update: AccountUpdateWithoutFilesInput!
  where: AccountWhereUniqueInput!
}

input AccountUpsertWithoutAccessesInput {
  create: AccountCreateWithoutAccessesInput!
  update: AccountUpdateWithoutAccessesInput!
}

input AccountUpsertWithoutAccountsInput {
  create: AccountCreateWithoutAccountsInput!
  update: AccountUpdateWithoutAccountsInput!
}

input AccountUpsertWithoutAddressesInput {
  create: AccountCreateWithoutAddressesInput!
  update: AccountUpdateWithoutAddressesInput!
}

input AccountUpsertWithoutApiTokenInput {
  create: AccountCreateWithoutApiTokenInput!
  update: AccountUpdateWithoutApiTokenInput!
}

input AccountUpsertWithoutApplicationInput {
  create: AccountCreateWithoutApplicationInput!
  update: AccountUpdateWithoutApplicationInput!
}

input AccountUpsertWithoutContactOfAdressInput {
  create: AccountCreateWithoutContactOfAdressInput!
  update: AccountUpdateWithoutContactOfAdressInput!
}

input AccountUpsertWithoutEmailsInput {
  create: AccountCreateWithoutEmailsInput!
  update: AccountUpdateWithoutEmailsInput!
}

input AccountUpsertWithoutManagersInput {
  create: AccountCreateWithoutManagersInput!
  update: AccountUpdateWithoutManagersInput!
}

input AccountUpsertWithoutPhonesInput {
  create: AccountCreateWithoutPhonesInput!
  update: AccountUpdateWithoutPhonesInput!
}

input AccountUpsertWithoutPrimaryAddressInput {
  create: AccountCreateWithoutPrimaryAddressInput!
  update: AccountUpdateWithoutPrimaryAddressInput!
}

input AccountUpsertWithoutRtwInput {
  create: AccountCreateWithoutRtwInput!
  update: AccountUpdateWithoutRtwInput!
}

input AccountUpsertWithoutSiaInput {
  create: AccountCreateWithoutSiaInput!
  update: AccountUpdateWithoutSiaInput!
}

input AccountUpsertWithoutStatusInput {
  create: AccountCreateWithoutStatusInput!
  update: AccountUpdateWithoutStatusInput!
}

input AccountUpsertWithoutSubscriptionInput {
  create: AccountCreateWithoutSubscriptionInput!
  update: AccountUpdateWithoutSubscriptionInput!
}

input AccountUpsertWithoutSubusersInput {
  create: AccountCreateWithoutSubusersInput!
  update: AccountUpdateWithoutSubusersInput!
}

input AccountUpsertWithoutTransactionsInput {
  create: AccountCreateWithoutTransactionsInput!
  update: AccountUpdateWithoutTransactionsInput!
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  Salutation: StringNullableFilter
  Status: StatusOnAccountListRelationFilter
  accesses: SubuserOnAccountListRelationFilter
  accountType: EnumAccountTypeFilter
  accounts: ManagersOnAccountListRelationFilter
  addresses: AddressListRelationFilter
  apiToken: TokenListRelationFilter
  application: ApplicationListRelationFilter
  applied: DateTimeFilter
  contactOfAdress: ContactAtAddressListRelationFilter
  createdAt: DateTimeFilter
  deleted: DateTimeNullableFilter
  dob: DateTimeFilter
  emails: EmailListRelationFilter
  files: FilesListRelationFilter
  firstname: StringNullableFilter
  id: StringFilter
  label: StringFilter
  lastLogin: DateTimeFilter
  lastname: StringFilter
  managers: ManagersOnAccountListRelationFilter
  midname: StringNullableFilter
  password: StringNullableFilter
  phones: PhoneListRelationFilter
  primaryAddress: AddressRelationFilter
  promoted: DateTimeFilter
  resetPasswordExpires: DateTimeNullableFilter
  resetPasswordToken: StringNullableFilter
  retired: DateTimeFilter
  rtw: RTWListRelationFilter
  sex: StringNullableFilter
  sia: SIABadgeListRelationFilter
  subsciption: BoolFilter
  subscription: SubscriptionOnAccountListRelationFilter
  subusers: SubuserOnAccountListRelationFilter
  title: EnumTitleNullableFilter
  transactions: TransactionListRelationFilter
  updatedAt: DateTimeFilter
  username: StringNullableFilter
}

input AccountWhereUniqueInput {
  id: String
  resetPasswordToken: String
  username: String
}

type Address {
  _count: AddressCount
  account: Account!
  accountId: String!
  businessName: String
  city: String
  contacts(
    cursor: ContactAtAddressWhereUniqueInput
    distinct: [ContactAtAddressScalarFieldEnum!]
    orderBy: [ContactAtAddressOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: ContactAtAddressWhereInput
  ): [ContactAtAddress!]!
  coords: String
  country: String
  createdAt: DateTime!
  deleted: DateTime
  details: JSON
  features: String!
  featuresOfBuisness(
    cursor: FeatureOfAddressWhereUniqueInput
    distinct: [FeatureOfAddressScalarFieldEnum!]
    orderBy: [FeatureOfAddressOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: FeatureOfAddressWhereInput
  ): [FeatureOfAddress!]!
  hoursOfOperation: JSON
  id: String!
  name: String
  parking: Boolean
  phones(
    cursor: PhoneWhereUniqueInput
    distinct: [PhoneScalarFieldEnum!]
    orderBy: [PhoneOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: PhoneWhereInput
  ): [Phone!]!
  primaryAccount: Account
  primaryaccountId: String
  public: Boolean!
  rooms(
    cursor: RoomWhereUniqueInput
    distinct: [RoomScalarFieldEnum!]
    orderBy: [RoomOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: RoomWhereInput
  ): [Room!]!
  state: String
  street: String!
  type: AddressType!
  updatedAt: DateTime!
  venueStyle(
    cursor: VenueStyleWhereUniqueInput
    distinct: [VenueStyleScalarFieldEnum!]
    orderBy: [VenueStyleOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: VenueStyleWhereInput
  ): [VenueStyle!]!
  website: String
  zipcode: String
}

type AddressCount {
  contacts: Int!
  featuresOfBuisness: Int!
  phones: Int!
  rooms: Int!
  venueStyle: Int!
}

type AddressCountAggregate {
  _all: Int!
  accountId: Int!
  businessName: Int!
  city: Int!
  coords: Int!
  country: Int!
  createdAt: Int!
  deleted: Int!
  details: Int!
  features: Int!
  hoursOfOperation: Int!
  id: Int!
  name: Int!
  parking: Int!
  primaryaccountId: Int!
  public: Int!
  state: Int!
  street: Int!
  type: Int!
  updatedAt: Int!
  website: Int!
  zipcode: Int!
}

input AddressCountOrderByAggregateInput {
  accountId: SortOrder
  businessName: SortOrder
  city: SortOrder
  coords: SortOrder
  country: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  details: SortOrder
  features: SortOrder
  hoursOfOperation: SortOrder
  id: SortOrder
  name: SortOrder
  parking: SortOrder
  primaryaccountId: SortOrder
  public: SortOrder
  state: SortOrder
  street: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  website: SortOrder
  zipcode: SortOrder
}

input AddressCreateInput {
  account: AccountCreateNestedOneWithoutAddressesInput!
  businessName: String
  city: String
  contacts: ContactAtAddressCreateNestedManyWithoutAddressInput
  coords: String
  country: String
  createdAt: DateTime
  deleted: DateTime
  details: JSON
  features: String!
  featuresOfBuisness: FeatureOfAddressCreateNestedManyWithoutAddressInput
  hoursOfOperation: JSON
  id: String
  name: String
  parking: Boolean
  phones: PhoneCreateNestedManyWithoutAddressInput
  primaryAccount: AccountCreateNestedOneWithoutPrimaryAddressInput
  public: Boolean
  rooms: RoomCreateNestedManyWithoutAddressInput
  state: String
  street: String!
  type: AddressType!
  updatedAt: DateTime
  venueStyle: VenueStyleCreateNestedManyWithoutAddressInput
  website: String
  zipcode: String
}

input AddressCreateManyAccountInput {
  businessName: String
  city: String
  coords: String
  country: String
  createdAt: DateTime
  deleted: DateTime
  details: JSON
  features: String!
  hoursOfOperation: JSON
  id: String
  name: String
  parking: Boolean
  primaryaccountId: String
  public: Boolean
  state: String
  street: String!
  type: AddressType!
  updatedAt: DateTime
  website: String
  zipcode: String
}

input AddressCreateManyAccountInputEnvelope {
  data: [AddressCreateManyAccountInput!]!
  skipDuplicates: Boolean
}

input AddressCreateManyInput {
  accountId: String!
  businessName: String
  city: String
  coords: String
  country: String
  createdAt: DateTime
  deleted: DateTime
  details: JSON
  features: String!
  hoursOfOperation: JSON
  id: String
  name: String
  parking: Boolean
  primaryaccountId: String
  public: Boolean
  state: String
  street: String!
  type: AddressType!
  updatedAt: DateTime
  website: String
  zipcode: String
}

input AddressCreateNestedManyWithoutAccountInput {
  connect: [AddressWhereUniqueInput!]
  connectOrCreate: [AddressCreateOrConnectWithoutAccountInput!]
  create: [AddressCreateWithoutAccountInput!]
  createMany: AddressCreateManyAccountInputEnvelope
}

input AddressCreateNestedManyWithoutVenueStyleInput {
  connect: [AddressWhereUniqueInput!]
  connectOrCreate: [AddressCreateOrConnectWithoutVenueStyleInput!]
  create: [AddressCreateWithoutVenueStyleInput!]
}

input AddressCreateNestedOneWithoutContactsInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutContactsInput
  create: AddressCreateWithoutContactsInput
}

input AddressCreateNestedOneWithoutFeaturesOfBuisnessInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutFeaturesOfBuisnessInput
  create: AddressCreateWithoutFeaturesOfBuisnessInput
}

input AddressCreateNestedOneWithoutPhonesInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutPhonesInput
  create: AddressCreateWithoutPhonesInput
}

input AddressCreateNestedOneWithoutPrimaryAccountInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutPrimaryAccountInput
  create: AddressCreateWithoutPrimaryAccountInput
}

input AddressCreateNestedOneWithoutRoomsInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutRoomsInput
  create: AddressCreateWithoutRoomsInput
}

input AddressCreateOrConnectWithoutAccountInput {
  create: AddressCreateWithoutAccountInput!
  where: AddressWhereUniqueInput!
}

input AddressCreateOrConnectWithoutContactsInput {
  create: AddressCreateWithoutContactsInput!
  where: AddressWhereUniqueInput!
}

input AddressCreateOrConnectWithoutFeaturesOfBuisnessInput {
  create: AddressCreateWithoutFeaturesOfBuisnessInput!
  where: AddressWhereUniqueInput!
}

input AddressCreateOrConnectWithoutPhonesInput {
  create: AddressCreateWithoutPhonesInput!
  where: AddressWhereUniqueInput!
}

input AddressCreateOrConnectWithoutPrimaryAccountInput {
  create: AddressCreateWithoutPrimaryAccountInput!
  where: AddressWhereUniqueInput!
}

input AddressCreateOrConnectWithoutRoomsInput {
  create: AddressCreateWithoutRoomsInput!
  where: AddressWhereUniqueInput!
}

input AddressCreateOrConnectWithoutVenueStyleInput {
  create: AddressCreateWithoutVenueStyleInput!
  where: AddressWhereUniqueInput!
}

input AddressCreateWithoutAccountInput {
  businessName: String
  city: String
  contacts: ContactAtAddressCreateNestedManyWithoutAddressInput
  coords: String
  country: String
  createdAt: DateTime
  deleted: DateTime
  details: JSON
  features: String!
  featuresOfBuisness: FeatureOfAddressCreateNestedManyWithoutAddressInput
  hoursOfOperation: JSON
  id: String
  name: String
  parking: Boolean
  phones: PhoneCreateNestedManyWithoutAddressInput
  primaryAccount: AccountCreateNestedOneWithoutPrimaryAddressInput
  public: Boolean
  rooms: RoomCreateNestedManyWithoutAddressInput
  state: String
  street: String!
  type: AddressType!
  updatedAt: DateTime
  venueStyle: VenueStyleCreateNestedManyWithoutAddressInput
  website: String
  zipcode: String
}

input AddressCreateWithoutContactsInput {
  account: AccountCreateNestedOneWithoutAddressesInput!
  businessName: String
  city: String
  coords: String
  country: String
  createdAt: DateTime
  deleted: DateTime
  details: JSON
  features: String!
  featuresOfBuisness: FeatureOfAddressCreateNestedManyWithoutAddressInput
  hoursOfOperation: JSON
  id: String
  name: String
  parking: Boolean
  phones: PhoneCreateNestedManyWithoutAddressInput
  primaryAccount: AccountCreateNestedOneWithoutPrimaryAddressInput
  public: Boolean
  rooms: RoomCreateNestedManyWithoutAddressInput
  state: String
  street: String!
  type: AddressType!
  updatedAt: DateTime
  venueStyle: VenueStyleCreateNestedManyWithoutAddressInput
  website: String
  zipcode: String
}

input AddressCreateWithoutFeaturesOfBuisnessInput {
  account: AccountCreateNestedOneWithoutAddressesInput!
  businessName: String
  city: String
  contacts: ContactAtAddressCreateNestedManyWithoutAddressInput
  coords: String
  country: String
  createdAt: DateTime
  deleted: DateTime
  details: JSON
  features: String!
  hoursOfOperation: JSON
  id: String
  name: String
  parking: Boolean
  phones: PhoneCreateNestedManyWithoutAddressInput
  primaryAccount: AccountCreateNestedOneWithoutPrimaryAddressInput
  public: Boolean
  rooms: RoomCreateNestedManyWithoutAddressInput
  state: String
  street: String!
  type: AddressType!
  updatedAt: DateTime
  venueStyle: VenueStyleCreateNestedManyWithoutAddressInput
  website: String
  zipcode: String
}

input AddressCreateWithoutPhonesInput {
  account: AccountCreateNestedOneWithoutAddressesInput!
  businessName: String
  city: String
  contacts: ContactAtAddressCreateNestedManyWithoutAddressInput
  coords: String
  country: String
  createdAt: DateTime
  deleted: DateTime
  details: JSON
  features: String!
  featuresOfBuisness: FeatureOfAddressCreateNestedManyWithoutAddressInput
  hoursOfOperation: JSON
  id: String
  name: String
  parking: Boolean
  primaryAccount: AccountCreateNestedOneWithoutPrimaryAddressInput
  public: Boolean
  rooms: RoomCreateNestedManyWithoutAddressInput
  state: String
  street: String!
  type: AddressType!
  updatedAt: DateTime
  venueStyle: VenueStyleCreateNestedManyWithoutAddressInput
  website: String
  zipcode: String
}

input AddressCreateWithoutPrimaryAccountInput {
  account: AccountCreateNestedOneWithoutAddressesInput!
  businessName: String
  city: String
  contacts: ContactAtAddressCreateNestedManyWithoutAddressInput
  coords: String
  country: String
  createdAt: DateTime
  deleted: DateTime
  details: JSON
  features: String!
  featuresOfBuisness: FeatureOfAddressCreateNestedManyWithoutAddressInput
  hoursOfOperation: JSON
  id: String
  name: String
  parking: Boolean
  phones: PhoneCreateNestedManyWithoutAddressInput
  public: Boolean
  rooms: RoomCreateNestedManyWithoutAddressInput
  state: String
  street: String!
  type: AddressType!
  updatedAt: DateTime
  venueStyle: VenueStyleCreateNestedManyWithoutAddressInput
  website: String
  zipcode: String
}

input AddressCreateWithoutRoomsInput {
  account: AccountCreateNestedOneWithoutAddressesInput!
  businessName: String
  city: String
  contacts: ContactAtAddressCreateNestedManyWithoutAddressInput
  coords: String
  country: String
  createdAt: DateTime
  deleted: DateTime
  details: JSON
  features: String!
  featuresOfBuisness: FeatureOfAddressCreateNestedManyWithoutAddressInput
  hoursOfOperation: JSON
  id: String
  name: String
  parking: Boolean
  phones: PhoneCreateNestedManyWithoutAddressInput
  primaryAccount: AccountCreateNestedOneWithoutPrimaryAddressInput
  public: Boolean
  state: String
  street: String!
  type: AddressType!
  updatedAt: DateTime
  venueStyle: VenueStyleCreateNestedManyWithoutAddressInput
  website: String
  zipcode: String
}

input AddressCreateWithoutVenueStyleInput {
  account: AccountCreateNestedOneWithoutAddressesInput!
  businessName: String
  city: String
  contacts: ContactAtAddressCreateNestedManyWithoutAddressInput
  coords: String
  country: String
  createdAt: DateTime
  deleted: DateTime
  details: JSON
  features: String!
  featuresOfBuisness: FeatureOfAddressCreateNestedManyWithoutAddressInput
  hoursOfOperation: JSON
  id: String
  name: String
  parking: Boolean
  phones: PhoneCreateNestedManyWithoutAddressInput
  primaryAccount: AccountCreateNestedOneWithoutPrimaryAddressInput
  public: Boolean
  rooms: RoomCreateNestedManyWithoutAddressInput
  state: String
  street: String!
  type: AddressType!
  updatedAt: DateTime
  website: String
  zipcode: String
}

type AddressGroupBy {
  _count: AddressCountAggregate
  _max: AddressMaxAggregate
  _min: AddressMinAggregate
  accountId: String!
  businessName: String
  city: String
  coords: String
  country: String
  createdAt: DateTime!
  deleted: DateTime
  details: JSON
  features: String!
  hoursOfOperation: JSON
  id: String!
  name: String
  parking: Boolean
  primaryaccountId: String
  public: Boolean!
  state: String
  street: String!
  type: AddressType!
  updatedAt: DateTime!
  website: String
  zipcode: String
}

input AddressListRelationFilter {
  every: AddressWhereInput
  none: AddressWhereInput
  some: AddressWhereInput
}

type AddressMaxAggregate {
  accountId: String
  businessName: String
  city: String
  coords: String
  country: String
  createdAt: DateTime
  deleted: DateTime
  features: String
  id: String
  name: String
  parking: Boolean
  primaryaccountId: String
  public: Boolean
  state: String
  street: String
  type: AddressType
  updatedAt: DateTime
  website: String
  zipcode: String
}

input AddressMaxOrderByAggregateInput {
  accountId: SortOrder
  businessName: SortOrder
  city: SortOrder
  coords: SortOrder
  country: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  features: SortOrder
  id: SortOrder
  name: SortOrder
  parking: SortOrder
  primaryaccountId: SortOrder
  public: SortOrder
  state: SortOrder
  street: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  website: SortOrder
  zipcode: SortOrder
}

type AddressMinAggregate {
  accountId: String
  businessName: String
  city: String
  coords: String
  country: String
  createdAt: DateTime
  deleted: DateTime
  features: String
  id: String
  name: String
  parking: Boolean
  primaryaccountId: String
  public: Boolean
  state: String
  street: String
  type: AddressType
  updatedAt: DateTime
  website: String
  zipcode: String
}

input AddressMinOrderByAggregateInput {
  accountId: SortOrder
  businessName: SortOrder
  city: SortOrder
  coords: SortOrder
  country: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  features: SortOrder
  id: SortOrder
  name: SortOrder
  parking: SortOrder
  primaryaccountId: SortOrder
  public: SortOrder
  state: SortOrder
  street: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  website: SortOrder
  zipcode: SortOrder
}

input AddressOrderByRelationAggregateInput {
  _count: SortOrder
}

enum AddressOrderByRelevanceFieldEnum {
  accountId
  businessName
  city
  coords
  country
  features
  id
  name
  primaryaccountId
  state
  street
  website
  zipcode
}

input AddressOrderByRelevanceInput {
  fields: [AddressOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input AddressOrderByWithAggregationInput {
  _count: AddressCountOrderByAggregateInput
  _max: AddressMaxOrderByAggregateInput
  _min: AddressMinOrderByAggregateInput
  accountId: SortOrder
  businessName: SortOrder
  city: SortOrder
  coords: SortOrder
  country: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  details: SortOrder
  features: SortOrder
  hoursOfOperation: SortOrder
  id: SortOrder
  name: SortOrder
  parking: SortOrder
  primaryaccountId: SortOrder
  public: SortOrder
  state: SortOrder
  street: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  website: SortOrder
  zipcode: SortOrder
}

input AddressOrderByWithRelationAndSearchRelevanceInput {
  _relevance: AddressOrderByRelevanceInput
  account: AccountOrderByWithRelationAndSearchRelevanceInput
  accountId: SortOrder
  businessName: SortOrder
  city: SortOrder
  contacts: ContactAtAddressOrderByRelationAggregateInput
  coords: SortOrder
  country: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  details: SortOrder
  features: SortOrder
  featuresOfBuisness: FeatureOfAddressOrderByRelationAggregateInput
  hoursOfOperation: SortOrder
  id: SortOrder
  name: SortOrder
  parking: SortOrder
  phones: PhoneOrderByRelationAggregateInput
  primaryAccount: AccountOrderByWithRelationAndSearchRelevanceInput
  primaryaccountId: SortOrder
  public: SortOrder
  rooms: RoomOrderByRelationAggregateInput
  state: SortOrder
  street: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  venueStyle: VenueStyleOrderByRelationAggregateInput
  website: SortOrder
  zipcode: SortOrder
}

input AddressRelationFilter {
  is: AddressWhereInput
  isNot: AddressWhereInput
}

enum AddressScalarFieldEnum {
  accountId
  businessName
  city
  coords
  country
  createdAt
  deleted
  details
  features
  hoursOfOperation
  id
  name
  parking
  primaryaccountId
  public
  state
  street
  type
  updatedAt
  website
  zipcode
}

input AddressScalarWhereInput {
  AND: [AddressScalarWhereInput!]
  NOT: [AddressScalarWhereInput!]
  OR: [AddressScalarWhereInput!]
  accountId: StringFilter
  businessName: StringNullableFilter
  city: StringNullableFilter
  coords: StringNullableFilter
  country: StringNullableFilter
  createdAt: DateTimeFilter
  deleted: DateTimeNullableFilter
  details: JsonNullableFilter
  features: StringFilter
  hoursOfOperation: JsonNullableFilter
  id: StringFilter
  name: StringNullableFilter
  parking: BoolNullableFilter
  primaryaccountId: StringNullableFilter
  public: BoolFilter
  state: StringNullableFilter
  street: StringFilter
  type: EnumAddressTypeFilter
  updatedAt: DateTimeFilter
  website: StringNullableFilter
  zipcode: StringNullableFilter
}

input AddressScalarWhereWithAggregatesInput {
  AND: [AddressScalarWhereWithAggregatesInput!]
  NOT: [AddressScalarWhereWithAggregatesInput!]
  OR: [AddressScalarWhereWithAggregatesInput!]
  accountId: StringWithAggregatesFilter
  businessName: StringNullableWithAggregatesFilter
  city: StringNullableWithAggregatesFilter
  coords: StringNullableWithAggregatesFilter
  country: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deleted: DateTimeNullableWithAggregatesFilter
  details: JsonNullableWithAggregatesFilter
  features: StringWithAggregatesFilter
  hoursOfOperation: JsonNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  parking: BoolNullableWithAggregatesFilter
  primaryaccountId: StringNullableWithAggregatesFilter
  public: BoolWithAggregatesFilter
  state: StringNullableWithAggregatesFilter
  street: StringWithAggregatesFilter
  type: EnumAddressTypeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  website: StringNullableWithAggregatesFilter
  zipcode: StringNullableWithAggregatesFilter
}

enum AddressType {
  BUSINESS
  PERSONAL
}

input AddressUpdateInput {
  account: AccountUpdateOneRequiredWithoutAddressesInput
  businessName: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  contacts: ContactAtAddressUpdateManyWithoutAddressInput
  coords: NullableStringFieldUpdateOperationsInput
  country: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  details: JSON
  features: StringFieldUpdateOperationsInput
  featuresOfBuisness: FeatureOfAddressUpdateManyWithoutAddressInput
  hoursOfOperation: JSON
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  parking: NullableBoolFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAddressInput
  primaryAccount: AccountUpdateOneWithoutPrimaryAddressInput
  public: BoolFieldUpdateOperationsInput
  rooms: RoomUpdateManyWithoutAddressInput
  state: NullableStringFieldUpdateOperationsInput
  street: StringFieldUpdateOperationsInput
  type: EnumAddressTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venueStyle: VenueStyleUpdateManyWithoutAddressInput
  website: NullableStringFieldUpdateOperationsInput
  zipcode: NullableStringFieldUpdateOperationsInput
}

input AddressUpdateManyMutationInput {
  businessName: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  coords: NullableStringFieldUpdateOperationsInput
  country: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  details: JSON
  features: StringFieldUpdateOperationsInput
  hoursOfOperation: JSON
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  parking: NullableBoolFieldUpdateOperationsInput
  public: BoolFieldUpdateOperationsInput
  state: NullableStringFieldUpdateOperationsInput
  street: StringFieldUpdateOperationsInput
  type: EnumAddressTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
  zipcode: NullableStringFieldUpdateOperationsInput
}

input AddressUpdateManyWithWhereWithoutAccountInput {
  data: AddressUpdateManyMutationInput!
  where: AddressScalarWhereInput!
}

input AddressUpdateManyWithWhereWithoutVenueStyleInput {
  data: AddressUpdateManyMutationInput!
  where: AddressScalarWhereInput!
}

input AddressUpdateManyWithoutAccountInput {
  connect: [AddressWhereUniqueInput!]
  connectOrCreate: [AddressCreateOrConnectWithoutAccountInput!]
  create: [AddressCreateWithoutAccountInput!]
  createMany: AddressCreateManyAccountInputEnvelope
  delete: [AddressWhereUniqueInput!]
  deleteMany: [AddressScalarWhereInput!]
  disconnect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  update: [AddressUpdateWithWhereUniqueWithoutAccountInput!]
  updateMany: [AddressUpdateManyWithWhereWithoutAccountInput!]
  upsert: [AddressUpsertWithWhereUniqueWithoutAccountInput!]
}

input AddressUpdateManyWithoutVenueStyleInput {
  connect: [AddressWhereUniqueInput!]
  connectOrCreate: [AddressCreateOrConnectWithoutVenueStyleInput!]
  create: [AddressCreateWithoutVenueStyleInput!]
  delete: [AddressWhereUniqueInput!]
  deleteMany: [AddressScalarWhereInput!]
  disconnect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  update: [AddressUpdateWithWhereUniqueWithoutVenueStyleInput!]
  updateMany: [AddressUpdateManyWithWhereWithoutVenueStyleInput!]
  upsert: [AddressUpsertWithWhereUniqueWithoutVenueStyleInput!]
}

input AddressUpdateOneRequiredWithoutContactsInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutContactsInput
  create: AddressCreateWithoutContactsInput
  update: AddressUpdateWithoutContactsInput
  upsert: AddressUpsertWithoutContactsInput
}

input AddressUpdateOneRequiredWithoutFeaturesOfBuisnessInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutFeaturesOfBuisnessInput
  create: AddressCreateWithoutFeaturesOfBuisnessInput
  update: AddressUpdateWithoutFeaturesOfBuisnessInput
  upsert: AddressUpsertWithoutFeaturesOfBuisnessInput
}

input AddressUpdateOneRequiredWithoutPhonesInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutPhonesInput
  create: AddressCreateWithoutPhonesInput
  update: AddressUpdateWithoutPhonesInput
  upsert: AddressUpsertWithoutPhonesInput
}

input AddressUpdateOneRequiredWithoutRoomsInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutRoomsInput
  create: AddressCreateWithoutRoomsInput
  update: AddressUpdateWithoutRoomsInput
  upsert: AddressUpsertWithoutRoomsInput
}

input AddressUpdateOneWithoutPrimaryAccountInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutPrimaryAccountInput
  create: AddressCreateWithoutPrimaryAccountInput
  delete: Boolean
  disconnect: Boolean
  update: AddressUpdateWithoutPrimaryAccountInput
  upsert: AddressUpsertWithoutPrimaryAccountInput
}

input AddressUpdateWithWhereUniqueWithoutAccountInput {
  data: AddressUpdateWithoutAccountInput!
  where: AddressWhereUniqueInput!
}

input AddressUpdateWithWhereUniqueWithoutVenueStyleInput {
  data: AddressUpdateWithoutVenueStyleInput!
  where: AddressWhereUniqueInput!
}

input AddressUpdateWithoutAccountInput {
  businessName: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  contacts: ContactAtAddressUpdateManyWithoutAddressInput
  coords: NullableStringFieldUpdateOperationsInput
  country: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  details: JSON
  features: StringFieldUpdateOperationsInput
  featuresOfBuisness: FeatureOfAddressUpdateManyWithoutAddressInput
  hoursOfOperation: JSON
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  parking: NullableBoolFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAddressInput
  primaryAccount: AccountUpdateOneWithoutPrimaryAddressInput
  public: BoolFieldUpdateOperationsInput
  rooms: RoomUpdateManyWithoutAddressInput
  state: NullableStringFieldUpdateOperationsInput
  street: StringFieldUpdateOperationsInput
  type: EnumAddressTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venueStyle: VenueStyleUpdateManyWithoutAddressInput
  website: NullableStringFieldUpdateOperationsInput
  zipcode: NullableStringFieldUpdateOperationsInput
}

input AddressUpdateWithoutContactsInput {
  account: AccountUpdateOneRequiredWithoutAddressesInput
  businessName: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  coords: NullableStringFieldUpdateOperationsInput
  country: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  details: JSON
  features: StringFieldUpdateOperationsInput
  featuresOfBuisness: FeatureOfAddressUpdateManyWithoutAddressInput
  hoursOfOperation: JSON
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  parking: NullableBoolFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAddressInput
  primaryAccount: AccountUpdateOneWithoutPrimaryAddressInput
  public: BoolFieldUpdateOperationsInput
  rooms: RoomUpdateManyWithoutAddressInput
  state: NullableStringFieldUpdateOperationsInput
  street: StringFieldUpdateOperationsInput
  type: EnumAddressTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venueStyle: VenueStyleUpdateManyWithoutAddressInput
  website: NullableStringFieldUpdateOperationsInput
  zipcode: NullableStringFieldUpdateOperationsInput
}

input AddressUpdateWithoutFeaturesOfBuisnessInput {
  account: AccountUpdateOneRequiredWithoutAddressesInput
  businessName: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  contacts: ContactAtAddressUpdateManyWithoutAddressInput
  coords: NullableStringFieldUpdateOperationsInput
  country: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  details: JSON
  features: StringFieldUpdateOperationsInput
  hoursOfOperation: JSON
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  parking: NullableBoolFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAddressInput
  primaryAccount: AccountUpdateOneWithoutPrimaryAddressInput
  public: BoolFieldUpdateOperationsInput
  rooms: RoomUpdateManyWithoutAddressInput
  state: NullableStringFieldUpdateOperationsInput
  street: StringFieldUpdateOperationsInput
  type: EnumAddressTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venueStyle: VenueStyleUpdateManyWithoutAddressInput
  website: NullableStringFieldUpdateOperationsInput
  zipcode: NullableStringFieldUpdateOperationsInput
}

input AddressUpdateWithoutPhonesInput {
  account: AccountUpdateOneRequiredWithoutAddressesInput
  businessName: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  contacts: ContactAtAddressUpdateManyWithoutAddressInput
  coords: NullableStringFieldUpdateOperationsInput
  country: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  details: JSON
  features: StringFieldUpdateOperationsInput
  featuresOfBuisness: FeatureOfAddressUpdateManyWithoutAddressInput
  hoursOfOperation: JSON
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  parking: NullableBoolFieldUpdateOperationsInput
  primaryAccount: AccountUpdateOneWithoutPrimaryAddressInput
  public: BoolFieldUpdateOperationsInput
  rooms: RoomUpdateManyWithoutAddressInput
  state: NullableStringFieldUpdateOperationsInput
  street: StringFieldUpdateOperationsInput
  type: EnumAddressTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venueStyle: VenueStyleUpdateManyWithoutAddressInput
  website: NullableStringFieldUpdateOperationsInput
  zipcode: NullableStringFieldUpdateOperationsInput
}

input AddressUpdateWithoutPrimaryAccountInput {
  account: AccountUpdateOneRequiredWithoutAddressesInput
  businessName: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  contacts: ContactAtAddressUpdateManyWithoutAddressInput
  coords: NullableStringFieldUpdateOperationsInput
  country: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  details: JSON
  features: StringFieldUpdateOperationsInput
  featuresOfBuisness: FeatureOfAddressUpdateManyWithoutAddressInput
  hoursOfOperation: JSON
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  parking: NullableBoolFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAddressInput
  public: BoolFieldUpdateOperationsInput
  rooms: RoomUpdateManyWithoutAddressInput
  state: NullableStringFieldUpdateOperationsInput
  street: StringFieldUpdateOperationsInput
  type: EnumAddressTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venueStyle: VenueStyleUpdateManyWithoutAddressInput
  website: NullableStringFieldUpdateOperationsInput
  zipcode: NullableStringFieldUpdateOperationsInput
}

input AddressUpdateWithoutRoomsInput {
  account: AccountUpdateOneRequiredWithoutAddressesInput
  businessName: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  contacts: ContactAtAddressUpdateManyWithoutAddressInput
  coords: NullableStringFieldUpdateOperationsInput
  country: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  details: JSON
  features: StringFieldUpdateOperationsInput
  featuresOfBuisness: FeatureOfAddressUpdateManyWithoutAddressInput
  hoursOfOperation: JSON
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  parking: NullableBoolFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAddressInput
  primaryAccount: AccountUpdateOneWithoutPrimaryAddressInput
  public: BoolFieldUpdateOperationsInput
  state: NullableStringFieldUpdateOperationsInput
  street: StringFieldUpdateOperationsInput
  type: EnumAddressTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  venueStyle: VenueStyleUpdateManyWithoutAddressInput
  website: NullableStringFieldUpdateOperationsInput
  zipcode: NullableStringFieldUpdateOperationsInput
}

input AddressUpdateWithoutVenueStyleInput {
  account: AccountUpdateOneRequiredWithoutAddressesInput
  businessName: NullableStringFieldUpdateOperationsInput
  city: NullableStringFieldUpdateOperationsInput
  contacts: ContactAtAddressUpdateManyWithoutAddressInput
  coords: NullableStringFieldUpdateOperationsInput
  country: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  details: JSON
  features: StringFieldUpdateOperationsInput
  featuresOfBuisness: FeatureOfAddressUpdateManyWithoutAddressInput
  hoursOfOperation: JSON
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  parking: NullableBoolFieldUpdateOperationsInput
  phones: PhoneUpdateManyWithoutAddressInput
  primaryAccount: AccountUpdateOneWithoutPrimaryAddressInput
  public: BoolFieldUpdateOperationsInput
  rooms: RoomUpdateManyWithoutAddressInput
  state: NullableStringFieldUpdateOperationsInput
  street: StringFieldUpdateOperationsInput
  type: EnumAddressTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: NullableStringFieldUpdateOperationsInput
  zipcode: NullableStringFieldUpdateOperationsInput
}

input AddressUpsertWithWhereUniqueWithoutAccountInput {
  create: AddressCreateWithoutAccountInput!
  update: AddressUpdateWithoutAccountInput!
  where: AddressWhereUniqueInput!
}

input AddressUpsertWithWhereUniqueWithoutVenueStyleInput {
  create: AddressCreateWithoutVenueStyleInput!
  update: AddressUpdateWithoutVenueStyleInput!
  where: AddressWhereUniqueInput!
}

input AddressUpsertWithoutContactsInput {
  create: AddressCreateWithoutContactsInput!
  update: AddressUpdateWithoutContactsInput!
}

input AddressUpsertWithoutFeaturesOfBuisnessInput {
  create: AddressCreateWithoutFeaturesOfBuisnessInput!
  update: AddressUpdateWithoutFeaturesOfBuisnessInput!
}

input AddressUpsertWithoutPhonesInput {
  create: AddressCreateWithoutPhonesInput!
  update: AddressUpdateWithoutPhonesInput!
}

input AddressUpsertWithoutPrimaryAccountInput {
  create: AddressCreateWithoutPrimaryAccountInput!
  update: AddressUpdateWithoutPrimaryAccountInput!
}

input AddressUpsertWithoutRoomsInput {
  create: AddressCreateWithoutRoomsInput!
  update: AddressUpdateWithoutRoomsInput!
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  account: AccountRelationFilter
  accountId: StringFilter
  businessName: StringNullableFilter
  city: StringNullableFilter
  contacts: ContactAtAddressListRelationFilter
  coords: StringNullableFilter
  country: StringNullableFilter
  createdAt: DateTimeFilter
  deleted: DateTimeNullableFilter
  details: JsonNullableFilter
  features: StringFilter
  featuresOfBuisness: FeatureOfAddressListRelationFilter
  hoursOfOperation: JsonNullableFilter
  id: StringFilter
  name: StringNullableFilter
  parking: BoolNullableFilter
  phones: PhoneListRelationFilter
  primaryAccount: AccountRelationFilter
  primaryaccountId: StringNullableFilter
  public: BoolFilter
  rooms: RoomListRelationFilter
  state: StringNullableFilter
  street: StringFilter
  type: EnumAddressTypeFilter
  updatedAt: DateTimeFilter
  venueStyle: VenueStyleListRelationFilter
  website: StringNullableFilter
  zipcode: StringNullableFilter
}

input AddressWhereUniqueInput {
  id: String
  primaryaccountId: String
}

type AffectedRowsOutput {
  count: Int!
}

type AggregateAccount {
  _count: AccountCountAggregate
  _max: AccountMaxAggregate
  _min: AccountMinAggregate
}

type AggregateAddress {
  _count: AddressCountAggregate
  _max: AddressMaxAggregate
  _min: AddressMinAggregate
}

type AggregateApplication {
  _count: ApplicationCountAggregate
  _max: ApplicationMaxAggregate
  _min: ApplicationMinAggregate
}

type AggregateArrangement {
  _count: ArrangementCountAggregate
  _max: ArrangementMaxAggregate
  _min: ArrangementMinAggregate
}

type AggregateArrangementOfRoom {
  _avg: ArrangementOfRoomAvgAggregate
  _count: ArrangementOfRoomCountAggregate
  _max: ArrangementOfRoomMaxAggregate
  _min: ArrangementOfRoomMinAggregate
  _sum: ArrangementOfRoomSumAggregate
}

type AggregateContactAtAddress {
  _count: ContactAtAddressCountAggregate
  _max: ContactAtAddressMaxAggregate
  _min: ContactAtAddressMinAggregate
}

type AggregateDomain {
  _count: DomainCountAggregate
  _max: DomainMaxAggregate
  _min: DomainMinAggregate
}

type AggregateEmail {
  _avg: EmailAvgAggregate
  _count: EmailCountAggregate
  _max: EmailMaxAggregate
  _min: EmailMinAggregate
  _sum: EmailSumAggregate
}

type AggregateFeature {
  _count: FeatureCountAggregate
  _max: FeatureMaxAggregate
  _min: FeatureMinAggregate
}

type AggregateFeatureOfAddress {
  _count: FeatureOfAddressCountAggregate
  _max: FeatureOfAddressMaxAggregate
  _min: FeatureOfAddressMinAggregate
}

type AggregateFeatureOfRoom {
  _count: FeatureOfRoomCountAggregate
  _max: FeatureOfRoomMaxAggregate
  _min: FeatureOfRoomMinAggregate
}

type AggregateFiles {
  _count: FilesCountAggregate
  _max: FilesMaxAggregate
  _min: FilesMinAggregate
}

type AggregateManagersOnAccount {
  _count: ManagersOnAccountCountAggregate
  _max: ManagersOnAccountMaxAggregate
  _min: ManagersOnAccountMinAggregate
}

type AggregatePhone {
  _count: PhoneCountAggregate
  _max: PhoneMaxAggregate
  _min: PhoneMinAggregate
}

type AggregateRTW {
  _count: RTWCountAggregate
  _max: RTWMaxAggregate
  _min: RTWMinAggregate
}

type AggregateRoom {
  _count: RoomCountAggregate
  _max: RoomMaxAggregate
  _min: RoomMinAggregate
}

type AggregateSIABadge {
  _avg: SIABadgeAvgAggregate
  _count: SIABadgeCountAggregate
  _max: SIABadgeMaxAggregate
  _min: SIABadgeMinAggregate
  _sum: SIABadgeSumAggregate
}

type AggregateStatus {
  _count: StatusCountAggregate
  _max: StatusMaxAggregate
  _min: StatusMinAggregate
}

type AggregateStatusOnAccount {
  _count: StatusOnAccountCountAggregate
  _max: StatusOnAccountMaxAggregate
  _min: StatusOnAccountMinAggregate
}

type AggregateSubscription {
  _count: SubscriptionCountAggregate
  _max: SubscriptionMaxAggregate
  _min: SubscriptionMinAggregate
}

type AggregateSubscriptionOnAccount {
  _count: SubscriptionOnAccountCountAggregate
  _max: SubscriptionOnAccountMaxAggregate
  _min: SubscriptionOnAccountMinAggregate
}

type AggregateSubuserOnAccount {
  _count: SubuserOnAccountCountAggregate
  _max: SubuserOnAccountMaxAggregate
  _min: SubuserOnAccountMinAggregate
}

type AggregateToken {
  _count: TokenCountAggregate
  _max: TokenMaxAggregate
  _min: TokenMinAggregate
}

type AggregateTransaction {
  _count: TransactionCountAggregate
  _max: TransactionMaxAggregate
  _min: TransactionMinAggregate
}

type AggregateVenueStyle {
  _count: VenueStyleCountAggregate
  _max: VenueStyleMaxAggregate
  _min: VenueStyleMinAggregate
}

type Application {
  account: Account!
  accountId: String!
  createdAt: DateTime!
  deleted: DateTime
  id: String!
  name: String!
  updatedAt: DateTime!
}

type ApplicationCountAggregate {
  _all: Int!
  accountId: Int!
  createdAt: Int!
  deleted: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
}

input ApplicationCountOrderByAggregateInput {
  accountId: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input ApplicationCreateInput {
  account: AccountCreateNestedOneWithoutApplicationInput!
  createdAt: DateTime
  deleted: DateTime
  id: String
  name: String!
  updatedAt: DateTime
}

input ApplicationCreateManyAccountInput {
  createdAt: DateTime
  deleted: DateTime
  id: String
  name: String!
  updatedAt: DateTime
}

input ApplicationCreateManyAccountInputEnvelope {
  data: [ApplicationCreateManyAccountInput!]!
  skipDuplicates: Boolean
}

input ApplicationCreateManyInput {
  accountId: String!
  createdAt: DateTime
  deleted: DateTime
  id: String
  name: String!
  updatedAt: DateTime
}

input ApplicationCreateNestedManyWithoutAccountInput {
  connect: [ApplicationWhereUniqueInput!]
  connectOrCreate: [ApplicationCreateOrConnectWithoutAccountInput!]
  create: [ApplicationCreateWithoutAccountInput!]
  createMany: ApplicationCreateManyAccountInputEnvelope
}

input ApplicationCreateOrConnectWithoutAccountInput {
  create: ApplicationCreateWithoutAccountInput!
  where: ApplicationWhereUniqueInput!
}

input ApplicationCreateWithoutAccountInput {
  createdAt: DateTime
  deleted: DateTime
  id: String
  name: String!
  updatedAt: DateTime
}

type ApplicationGroupBy {
  _count: ApplicationCountAggregate
  _max: ApplicationMaxAggregate
  _min: ApplicationMinAggregate
  accountId: String!
  createdAt: DateTime!
  deleted: DateTime
  id: String!
  name: String!
  updatedAt: DateTime!
}

input ApplicationListRelationFilter {
  every: ApplicationWhereInput
  none: ApplicationWhereInput
  some: ApplicationWhereInput
}

type ApplicationMaxAggregate {
  accountId: String
  createdAt: DateTime
  deleted: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input ApplicationMaxOrderByAggregateInput {
  accountId: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type ApplicationMinAggregate {
  accountId: String
  createdAt: DateTime
  deleted: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input ApplicationMinOrderByAggregateInput {
  accountId: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input ApplicationOrderByRelationAggregateInput {
  _count: SortOrder
}

enum ApplicationOrderByRelevanceFieldEnum {
  accountId
  id
  name
}

input ApplicationOrderByRelevanceInput {
  fields: [ApplicationOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input ApplicationOrderByWithAggregationInput {
  _count: ApplicationCountOrderByAggregateInput
  _max: ApplicationMaxOrderByAggregateInput
  _min: ApplicationMinOrderByAggregateInput
  accountId: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input ApplicationOrderByWithRelationAndSearchRelevanceInput {
  _relevance: ApplicationOrderByRelevanceInput
  account: AccountOrderByWithRelationAndSearchRelevanceInput
  accountId: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

enum ApplicationScalarFieldEnum {
  accountId
  createdAt
  deleted
  id
  name
  updatedAt
}

input ApplicationScalarWhereInput {
  AND: [ApplicationScalarWhereInput!]
  NOT: [ApplicationScalarWhereInput!]
  OR: [ApplicationScalarWhereInput!]
  accountId: StringFilter
  createdAt: DateTimeFilter
  deleted: DateTimeNullableFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input ApplicationScalarWhereWithAggregatesInput {
  AND: [ApplicationScalarWhereWithAggregatesInput!]
  NOT: [ApplicationScalarWhereWithAggregatesInput!]
  OR: [ApplicationScalarWhereWithAggregatesInput!]
  accountId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deleted: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input ApplicationUpdateInput {
  account: AccountUpdateOneRequiredWithoutApplicationInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ApplicationUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ApplicationUpdateManyWithWhereWithoutAccountInput {
  data: ApplicationUpdateManyMutationInput!
  where: ApplicationScalarWhereInput!
}

input ApplicationUpdateManyWithoutAccountInput {
  connect: [ApplicationWhereUniqueInput!]
  connectOrCreate: [ApplicationCreateOrConnectWithoutAccountInput!]
  create: [ApplicationCreateWithoutAccountInput!]
  createMany: ApplicationCreateManyAccountInputEnvelope
  delete: [ApplicationWhereUniqueInput!]
  deleteMany: [ApplicationScalarWhereInput!]
  disconnect: [ApplicationWhereUniqueInput!]
  set: [ApplicationWhereUniqueInput!]
  update: [ApplicationUpdateWithWhereUniqueWithoutAccountInput!]
  updateMany: [ApplicationUpdateManyWithWhereWithoutAccountInput!]
  upsert: [ApplicationUpsertWithWhereUniqueWithoutAccountInput!]
}

input ApplicationUpdateWithWhereUniqueWithoutAccountInput {
  data: ApplicationUpdateWithoutAccountInput!
  where: ApplicationWhereUniqueInput!
}

input ApplicationUpdateWithoutAccountInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ApplicationUpsertWithWhereUniqueWithoutAccountInput {
  create: ApplicationCreateWithoutAccountInput!
  update: ApplicationUpdateWithoutAccountInput!
  where: ApplicationWhereUniqueInput!
}

input ApplicationWhereInput {
  AND: [ApplicationWhereInput!]
  NOT: [ApplicationWhereInput!]
  OR: [ApplicationWhereInput!]
  account: AccountRelationFilter
  accountId: StringFilter
  createdAt: DateTimeFilter
  deleted: DateTimeNullableFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input ApplicationWhereUniqueInput {
  id: String
}

type Arrangement {
  _count: ArrangementCount
  createdAt: DateTime!
  details: String
  icon: String
  id: String!
  name: String!
  room(
    cursor: ArrangementOfRoomWhereUniqueInput
    distinct: [ArrangementOfRoomScalarFieldEnum!]
    orderBy: [ArrangementOfRoomOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: ArrangementOfRoomWhereInput
  ): [ArrangementOfRoom!]!
  updatedAt: DateTime!
}

type ArrangementCount {
  room: Int!
}

type ArrangementCountAggregate {
  _all: Int!
  createdAt: Int!
  details: Int!
  icon: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
}

input ArrangementCountOrderByAggregateInput {
  createdAt: SortOrder
  details: SortOrder
  icon: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input ArrangementCreateInput {
  createdAt: DateTime
  details: String
  icon: String
  id: String
  name: String!
  room: ArrangementOfRoomCreateNestedManyWithoutArrangementInput
  updatedAt: DateTime
}

input ArrangementCreateManyInput {
  createdAt: DateTime
  details: String
  icon: String
  id: String
  name: String!
  updatedAt: DateTime
}

input ArrangementCreateNestedOneWithoutRoomInput {
  connect: ArrangementWhereUniqueInput
  connectOrCreate: ArrangementCreateOrConnectWithoutRoomInput
  create: ArrangementCreateWithoutRoomInput
}

input ArrangementCreateOrConnectWithoutRoomInput {
  create: ArrangementCreateWithoutRoomInput!
  where: ArrangementWhereUniqueInput!
}

input ArrangementCreateWithoutRoomInput {
  createdAt: DateTime
  details: String
  icon: String
  id: String
  name: String!
  updatedAt: DateTime
}

type ArrangementGroupBy {
  _count: ArrangementCountAggregate
  _max: ArrangementMaxAggregate
  _min: ArrangementMinAggregate
  createdAt: DateTime!
  details: String
  icon: String
  id: String!
  name: String!
  updatedAt: DateTime!
}

type ArrangementMaxAggregate {
  createdAt: DateTime
  details: String
  icon: String
  id: String
  name: String
  updatedAt: DateTime
}

input ArrangementMaxOrderByAggregateInput {
  createdAt: SortOrder
  details: SortOrder
  icon: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type ArrangementMinAggregate {
  createdAt: DateTime
  details: String
  icon: String
  id: String
  name: String
  updatedAt: DateTime
}

input ArrangementMinOrderByAggregateInput {
  createdAt: SortOrder
  details: SortOrder
  icon: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type ArrangementOfRoom {
  arrangement: Arrangement!
  arrangementId: String!
  capacity: Int!
  createdAt: DateTime!
  details: String
  room: Room!
  roomId: String!
  updatedAt: DateTime!
}

type ArrangementOfRoomAvgAggregate {
  capacity: Float
}

input ArrangementOfRoomAvgOrderByAggregateInput {
  capacity: SortOrder
}

type ArrangementOfRoomCountAggregate {
  _all: Int!
  arrangementId: Int!
  capacity: Int!
  createdAt: Int!
  details: Int!
  roomId: Int!
  updatedAt: Int!
}

input ArrangementOfRoomCountOrderByAggregateInput {
  arrangementId: SortOrder
  capacity: SortOrder
  createdAt: SortOrder
  details: SortOrder
  roomId: SortOrder
  updatedAt: SortOrder
}

input ArrangementOfRoomCreateInput {
  arrangement: ArrangementCreateNestedOneWithoutRoomInput!
  capacity: Int!
  createdAt: DateTime
  details: String
  room: RoomCreateNestedOneWithoutArrangementsInput!
  updatedAt: DateTime
}

input ArrangementOfRoomCreateManyArrangementInput {
  capacity: Int!
  createdAt: DateTime
  details: String
  roomId: String!
  updatedAt: DateTime
}

input ArrangementOfRoomCreateManyArrangementInputEnvelope {
  data: [ArrangementOfRoomCreateManyArrangementInput!]!
  skipDuplicates: Boolean
}

input ArrangementOfRoomCreateManyInput {
  arrangementId: String!
  capacity: Int!
  createdAt: DateTime
  details: String
  roomId: String!
  updatedAt: DateTime
}

input ArrangementOfRoomCreateManyRoomInput {
  arrangementId: String!
  capacity: Int!
  createdAt: DateTime
  details: String
  updatedAt: DateTime
}

input ArrangementOfRoomCreateManyRoomInputEnvelope {
  data: [ArrangementOfRoomCreateManyRoomInput!]!
  skipDuplicates: Boolean
}

input ArrangementOfRoomCreateNestedManyWithoutArrangementInput {
  connect: [ArrangementOfRoomWhereUniqueInput!]
  connectOrCreate: [ArrangementOfRoomCreateOrConnectWithoutArrangementInput!]
  create: [ArrangementOfRoomCreateWithoutArrangementInput!]
  createMany: ArrangementOfRoomCreateManyArrangementInputEnvelope
}

input ArrangementOfRoomCreateNestedManyWithoutRoomInput {
  connect: [ArrangementOfRoomWhereUniqueInput!]
  connectOrCreate: [ArrangementOfRoomCreateOrConnectWithoutRoomInput!]
  create: [ArrangementOfRoomCreateWithoutRoomInput!]
  createMany: ArrangementOfRoomCreateManyRoomInputEnvelope
}

input ArrangementOfRoomCreateOrConnectWithoutArrangementInput {
  create: ArrangementOfRoomCreateWithoutArrangementInput!
  where: ArrangementOfRoomWhereUniqueInput!
}

input ArrangementOfRoomCreateOrConnectWithoutRoomInput {
  create: ArrangementOfRoomCreateWithoutRoomInput!
  where: ArrangementOfRoomWhereUniqueInput!
}

input ArrangementOfRoomCreateWithoutArrangementInput {
  capacity: Int!
  createdAt: DateTime
  details: String
  room: RoomCreateNestedOneWithoutArrangementsInput!
  updatedAt: DateTime
}

input ArrangementOfRoomCreateWithoutRoomInput {
  arrangement: ArrangementCreateNestedOneWithoutRoomInput!
  capacity: Int!
  createdAt: DateTime
  details: String
  updatedAt: DateTime
}

type ArrangementOfRoomGroupBy {
  _avg: ArrangementOfRoomAvgAggregate
  _count: ArrangementOfRoomCountAggregate
  _max: ArrangementOfRoomMaxAggregate
  _min: ArrangementOfRoomMinAggregate
  _sum: ArrangementOfRoomSumAggregate
  arrangementId: String!
  capacity: Int!
  createdAt: DateTime!
  details: String
  roomId: String!
  updatedAt: DateTime!
}

input ArrangementOfRoomListRelationFilter {
  every: ArrangementOfRoomWhereInput
  none: ArrangementOfRoomWhereInput
  some: ArrangementOfRoomWhereInput
}

type ArrangementOfRoomMaxAggregate {
  arrangementId: String
  capacity: Int
  createdAt: DateTime
  details: String
  roomId: String
  updatedAt: DateTime
}

input ArrangementOfRoomMaxOrderByAggregateInput {
  arrangementId: SortOrder
  capacity: SortOrder
  createdAt: SortOrder
  details: SortOrder
  roomId: SortOrder
  updatedAt: SortOrder
}

type ArrangementOfRoomMinAggregate {
  arrangementId: String
  capacity: Int
  createdAt: DateTime
  details: String
  roomId: String
  updatedAt: DateTime
}

input ArrangementOfRoomMinOrderByAggregateInput {
  arrangementId: SortOrder
  capacity: SortOrder
  createdAt: SortOrder
  details: SortOrder
  roomId: SortOrder
  updatedAt: SortOrder
}

input ArrangementOfRoomOrderByRelationAggregateInput {
  _count: SortOrder
}

enum ArrangementOfRoomOrderByRelevanceFieldEnum {
  arrangementId
  details
  roomId
}

input ArrangementOfRoomOrderByRelevanceInput {
  fields: [ArrangementOfRoomOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input ArrangementOfRoomOrderByWithAggregationInput {
  _avg: ArrangementOfRoomAvgOrderByAggregateInput
  _count: ArrangementOfRoomCountOrderByAggregateInput
  _max: ArrangementOfRoomMaxOrderByAggregateInput
  _min: ArrangementOfRoomMinOrderByAggregateInput
  _sum: ArrangementOfRoomSumOrderByAggregateInput
  arrangementId: SortOrder
  capacity: SortOrder
  createdAt: SortOrder
  details: SortOrder
  roomId: SortOrder
  updatedAt: SortOrder
}

input ArrangementOfRoomOrderByWithRelationAndSearchRelevanceInput {
  _relevance: ArrangementOfRoomOrderByRelevanceInput
  arrangement: ArrangementOrderByWithRelationAndSearchRelevanceInput
  arrangementId: SortOrder
  capacity: SortOrder
  createdAt: SortOrder
  details: SortOrder
  room: RoomOrderByWithRelationAndSearchRelevanceInput
  roomId: SortOrder
  updatedAt: SortOrder
}

input ArrangementOfRoomRoomIdArrangementIdCompoundUniqueInput {
  arrangementId: String!
  roomId: String!
}

enum ArrangementOfRoomScalarFieldEnum {
  arrangementId
  capacity
  createdAt
  details
  roomId
  updatedAt
}

input ArrangementOfRoomScalarWhereInput {
  AND: [ArrangementOfRoomScalarWhereInput!]
  NOT: [ArrangementOfRoomScalarWhereInput!]
  OR: [ArrangementOfRoomScalarWhereInput!]
  arrangementId: StringFilter
  capacity: IntFilter
  createdAt: DateTimeFilter
  details: StringNullableFilter
  roomId: StringFilter
  updatedAt: DateTimeFilter
}

input ArrangementOfRoomScalarWhereWithAggregatesInput {
  AND: [ArrangementOfRoomScalarWhereWithAggregatesInput!]
  NOT: [ArrangementOfRoomScalarWhereWithAggregatesInput!]
  OR: [ArrangementOfRoomScalarWhereWithAggregatesInput!]
  arrangementId: StringWithAggregatesFilter
  capacity: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  details: StringNullableWithAggregatesFilter
  roomId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type ArrangementOfRoomSumAggregate {
  capacity: Int
}

input ArrangementOfRoomSumOrderByAggregateInput {
  capacity: SortOrder
}

input ArrangementOfRoomUpdateInput {
  arrangement: ArrangementUpdateOneRequiredWithoutRoomInput
  capacity: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  details: NullableStringFieldUpdateOperationsInput
  room: RoomUpdateOneRequiredWithoutArrangementsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ArrangementOfRoomUpdateManyMutationInput {
  capacity: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  details: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ArrangementOfRoomUpdateManyWithWhereWithoutArrangementInput {
  data: ArrangementOfRoomUpdateManyMutationInput!
  where: ArrangementOfRoomScalarWhereInput!
}

input ArrangementOfRoomUpdateManyWithWhereWithoutRoomInput {
  data: ArrangementOfRoomUpdateManyMutationInput!
  where: ArrangementOfRoomScalarWhereInput!
}

input ArrangementOfRoomUpdateManyWithoutArrangementInput {
  connect: [ArrangementOfRoomWhereUniqueInput!]
  connectOrCreate: [ArrangementOfRoomCreateOrConnectWithoutArrangementInput!]
  create: [ArrangementOfRoomCreateWithoutArrangementInput!]
  createMany: ArrangementOfRoomCreateManyArrangementInputEnvelope
  delete: [ArrangementOfRoomWhereUniqueInput!]
  deleteMany: [ArrangementOfRoomScalarWhereInput!]
  disconnect: [ArrangementOfRoomWhereUniqueInput!]
  set: [ArrangementOfRoomWhereUniqueInput!]
  update: [ArrangementOfRoomUpdateWithWhereUniqueWithoutArrangementInput!]
  updateMany: [ArrangementOfRoomUpdateManyWithWhereWithoutArrangementInput!]
  upsert: [ArrangementOfRoomUpsertWithWhereUniqueWithoutArrangementInput!]
}

input ArrangementOfRoomUpdateManyWithoutRoomInput {
  connect: [ArrangementOfRoomWhereUniqueInput!]
  connectOrCreate: [ArrangementOfRoomCreateOrConnectWithoutRoomInput!]
  create: [ArrangementOfRoomCreateWithoutRoomInput!]
  createMany: ArrangementOfRoomCreateManyRoomInputEnvelope
  delete: [ArrangementOfRoomWhereUniqueInput!]
  deleteMany: [ArrangementOfRoomScalarWhereInput!]
  disconnect: [ArrangementOfRoomWhereUniqueInput!]
  set: [ArrangementOfRoomWhereUniqueInput!]
  update: [ArrangementOfRoomUpdateWithWhereUniqueWithoutRoomInput!]
  updateMany: [ArrangementOfRoomUpdateManyWithWhereWithoutRoomInput!]
  upsert: [ArrangementOfRoomUpsertWithWhereUniqueWithoutRoomInput!]
}

input ArrangementOfRoomUpdateWithWhereUniqueWithoutArrangementInput {
  data: ArrangementOfRoomUpdateWithoutArrangementInput!
  where: ArrangementOfRoomWhereUniqueInput!
}

input ArrangementOfRoomUpdateWithWhereUniqueWithoutRoomInput {
  data: ArrangementOfRoomUpdateWithoutRoomInput!
  where: ArrangementOfRoomWhereUniqueInput!
}

input ArrangementOfRoomUpdateWithoutArrangementInput {
  capacity: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  details: NullableStringFieldUpdateOperationsInput
  room: RoomUpdateOneRequiredWithoutArrangementsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ArrangementOfRoomUpdateWithoutRoomInput {
  arrangement: ArrangementUpdateOneRequiredWithoutRoomInput
  capacity: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  details: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ArrangementOfRoomUpsertWithWhereUniqueWithoutArrangementInput {
  create: ArrangementOfRoomCreateWithoutArrangementInput!
  update: ArrangementOfRoomUpdateWithoutArrangementInput!
  where: ArrangementOfRoomWhereUniqueInput!
}

input ArrangementOfRoomUpsertWithWhereUniqueWithoutRoomInput {
  create: ArrangementOfRoomCreateWithoutRoomInput!
  update: ArrangementOfRoomUpdateWithoutRoomInput!
  where: ArrangementOfRoomWhereUniqueInput!
}

input ArrangementOfRoomWhereInput {
  AND: [ArrangementOfRoomWhereInput!]
  NOT: [ArrangementOfRoomWhereInput!]
  OR: [ArrangementOfRoomWhereInput!]
  arrangement: ArrangementRelationFilter
  arrangementId: StringFilter
  capacity: IntFilter
  createdAt: DateTimeFilter
  details: StringNullableFilter
  room: RoomRelationFilter
  roomId: StringFilter
  updatedAt: DateTimeFilter
}

input ArrangementOfRoomWhereUniqueInput {
  roomId_arrangementId: ArrangementOfRoomRoomIdArrangementIdCompoundUniqueInput
}

enum ArrangementOrderByRelevanceFieldEnum {
  details
  icon
  id
  name
}

input ArrangementOrderByRelevanceInput {
  fields: [ArrangementOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input ArrangementOrderByWithAggregationInput {
  _count: ArrangementCountOrderByAggregateInput
  _max: ArrangementMaxOrderByAggregateInput
  _min: ArrangementMinOrderByAggregateInput
  createdAt: SortOrder
  details: SortOrder
  icon: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input ArrangementOrderByWithRelationAndSearchRelevanceInput {
  _relevance: ArrangementOrderByRelevanceInput
  createdAt: SortOrder
  details: SortOrder
  icon: SortOrder
  id: SortOrder
  name: SortOrder
  room: ArrangementOfRoomOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input ArrangementRelationFilter {
  is: ArrangementWhereInput
  isNot: ArrangementWhereInput
}

enum ArrangementScalarFieldEnum {
  createdAt
  details
  icon
  id
  name
  updatedAt
}

input ArrangementScalarWhereWithAggregatesInput {
  AND: [ArrangementScalarWhereWithAggregatesInput!]
  NOT: [ArrangementScalarWhereWithAggregatesInput!]
  OR: [ArrangementScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  details: StringNullableWithAggregatesFilter
  icon: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input ArrangementUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  details: NullableStringFieldUpdateOperationsInput
  icon: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  room: ArrangementOfRoomUpdateManyWithoutArrangementInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ArrangementUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  details: NullableStringFieldUpdateOperationsInput
  icon: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ArrangementUpdateOneRequiredWithoutRoomInput {
  connect: ArrangementWhereUniqueInput
  connectOrCreate: ArrangementCreateOrConnectWithoutRoomInput
  create: ArrangementCreateWithoutRoomInput
  update: ArrangementUpdateWithoutRoomInput
  upsert: ArrangementUpsertWithoutRoomInput
}

input ArrangementUpdateWithoutRoomInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  details: NullableStringFieldUpdateOperationsInput
  icon: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ArrangementUpsertWithoutRoomInput {
  create: ArrangementCreateWithoutRoomInput!
  update: ArrangementUpdateWithoutRoomInput!
}

input ArrangementWhereInput {
  AND: [ArrangementWhereInput!]
  NOT: [ArrangementWhereInput!]
  OR: [ArrangementWhereInput!]
  createdAt: DateTimeFilter
  details: StringNullableFilter
  icon: StringNullableFilter
  id: StringFilter
  name: StringFilter
  room: ArrangementOfRoomListRelationFilter
  updatedAt: DateTimeFilter
}

input ArrangementWhereUniqueInput {
  id: String
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input BoolNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedBoolNullableFilter
  _min: NestedBoolNullableFilter
  equals: Boolean
  not: NestedBoolNullableWithAggregatesFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

type ContactAtAddress {
  account: Account!
  accountId: String!
  address: Address!
  addressId: String!
  createdAt: DateTime!
  deleted: DateTime
  email: Email
  emailId: String
  jobTitle: String
  phone: String
  updatedAt: DateTime!
}

input ContactAtAddressAccountIdAddressIdCompoundUniqueInput {
  accountId: String!
  addressId: String!
}

type ContactAtAddressCountAggregate {
  _all: Int!
  accountId: Int!
  addressId: Int!
  createdAt: Int!
  deleted: Int!
  emailId: Int!
  jobTitle: Int!
  phone: Int!
  updatedAt: Int!
}

input ContactAtAddressCountOrderByAggregateInput {
  accountId: SortOrder
  addressId: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  emailId: SortOrder
  jobTitle: SortOrder
  phone: SortOrder
  updatedAt: SortOrder
}

input ContactAtAddressCreateInput {
  account: AccountCreateNestedOneWithoutContactOfAdressInput!
  address: AddressCreateNestedOneWithoutContactsInput!
  createdAt: DateTime
  deleted: DateTime
  email: EmailCreateNestedOneWithoutAssociatedContactInput
  jobTitle: String
  phone: String
  updatedAt: DateTime
}

input ContactAtAddressCreateManyAccountInput {
  addressId: String!
  createdAt: DateTime
  deleted: DateTime
  emailId: String
  jobTitle: String
  phone: String
  updatedAt: DateTime
}

input ContactAtAddressCreateManyAccountInputEnvelope {
  data: [ContactAtAddressCreateManyAccountInput!]!
  skipDuplicates: Boolean
}

input ContactAtAddressCreateManyAddressInput {
  accountId: String!
  createdAt: DateTime
  deleted: DateTime
  emailId: String
  jobTitle: String
  phone: String
  updatedAt: DateTime
}

input ContactAtAddressCreateManyAddressInputEnvelope {
  data: [ContactAtAddressCreateManyAddressInput!]!
  skipDuplicates: Boolean
}

input ContactAtAddressCreateManyEmailInput {
  accountId: String!
  addressId: String!
  createdAt: DateTime
  deleted: DateTime
  jobTitle: String
  phone: String
  updatedAt: DateTime
}

input ContactAtAddressCreateManyEmailInputEnvelope {
  data: [ContactAtAddressCreateManyEmailInput!]!
  skipDuplicates: Boolean
}

input ContactAtAddressCreateManyInput {
  accountId: String!
  addressId: String!
  createdAt: DateTime
  deleted: DateTime
  emailId: String
  jobTitle: String
  phone: String
  updatedAt: DateTime
}

input ContactAtAddressCreateNestedManyWithoutAccountInput {
  connect: [ContactAtAddressWhereUniqueInput!]
  connectOrCreate: [ContactAtAddressCreateOrConnectWithoutAccountInput!]
  create: [ContactAtAddressCreateWithoutAccountInput!]
  createMany: ContactAtAddressCreateManyAccountInputEnvelope
}

input ContactAtAddressCreateNestedManyWithoutAddressInput {
  connect: [ContactAtAddressWhereUniqueInput!]
  connectOrCreate: [ContactAtAddressCreateOrConnectWithoutAddressInput!]
  create: [ContactAtAddressCreateWithoutAddressInput!]
  createMany: ContactAtAddressCreateManyAddressInputEnvelope
}

input ContactAtAddressCreateNestedManyWithoutEmailInput {
  connect: [ContactAtAddressWhereUniqueInput!]
  connectOrCreate: [ContactAtAddressCreateOrConnectWithoutEmailInput!]
  create: [ContactAtAddressCreateWithoutEmailInput!]
  createMany: ContactAtAddressCreateManyEmailInputEnvelope
}

input ContactAtAddressCreateOrConnectWithoutAccountInput {
  create: ContactAtAddressCreateWithoutAccountInput!
  where: ContactAtAddressWhereUniqueInput!
}

input ContactAtAddressCreateOrConnectWithoutAddressInput {
  create: ContactAtAddressCreateWithoutAddressInput!
  where: ContactAtAddressWhereUniqueInput!
}

input ContactAtAddressCreateOrConnectWithoutEmailInput {
  create: ContactAtAddressCreateWithoutEmailInput!
  where: ContactAtAddressWhereUniqueInput!
}

input ContactAtAddressCreateWithoutAccountInput {
  address: AddressCreateNestedOneWithoutContactsInput!
  createdAt: DateTime
  deleted: DateTime
  email: EmailCreateNestedOneWithoutAssociatedContactInput
  jobTitle: String
  phone: String
  updatedAt: DateTime
}

input ContactAtAddressCreateWithoutAddressInput {
  account: AccountCreateNestedOneWithoutContactOfAdressInput!
  createdAt: DateTime
  deleted: DateTime
  email: EmailCreateNestedOneWithoutAssociatedContactInput
  jobTitle: String
  phone: String
  updatedAt: DateTime
}

input ContactAtAddressCreateWithoutEmailInput {
  account: AccountCreateNestedOneWithoutContactOfAdressInput!
  address: AddressCreateNestedOneWithoutContactsInput!
  createdAt: DateTime
  deleted: DateTime
  jobTitle: String
  phone: String
  updatedAt: DateTime
}

type ContactAtAddressGroupBy {
  _count: ContactAtAddressCountAggregate
  _max: ContactAtAddressMaxAggregate
  _min: ContactAtAddressMinAggregate
  accountId: String!
  addressId: String!
  createdAt: DateTime!
  deleted: DateTime
  emailId: String
  jobTitle: String
  phone: String
  updatedAt: DateTime!
}

input ContactAtAddressListRelationFilter {
  every: ContactAtAddressWhereInput
  none: ContactAtAddressWhereInput
  some: ContactAtAddressWhereInput
}

type ContactAtAddressMaxAggregate {
  accountId: String
  addressId: String
  createdAt: DateTime
  deleted: DateTime
  emailId: String
  jobTitle: String
  phone: String
  updatedAt: DateTime
}

input ContactAtAddressMaxOrderByAggregateInput {
  accountId: SortOrder
  addressId: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  emailId: SortOrder
  jobTitle: SortOrder
  phone: SortOrder
  updatedAt: SortOrder
}

type ContactAtAddressMinAggregate {
  accountId: String
  addressId: String
  createdAt: DateTime
  deleted: DateTime
  emailId: String
  jobTitle: String
  phone: String
  updatedAt: DateTime
}

input ContactAtAddressMinOrderByAggregateInput {
  accountId: SortOrder
  addressId: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  emailId: SortOrder
  jobTitle: SortOrder
  phone: SortOrder
  updatedAt: SortOrder
}

input ContactAtAddressOrderByRelationAggregateInput {
  _count: SortOrder
}

enum ContactAtAddressOrderByRelevanceFieldEnum {
  accountId
  addressId
  emailId
  jobTitle
  phone
}

input ContactAtAddressOrderByRelevanceInput {
  fields: [ContactAtAddressOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input ContactAtAddressOrderByWithAggregationInput {
  _count: ContactAtAddressCountOrderByAggregateInput
  _max: ContactAtAddressMaxOrderByAggregateInput
  _min: ContactAtAddressMinOrderByAggregateInput
  accountId: SortOrder
  addressId: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  emailId: SortOrder
  jobTitle: SortOrder
  phone: SortOrder
  updatedAt: SortOrder
}

input ContactAtAddressOrderByWithRelationAndSearchRelevanceInput {
  _relevance: ContactAtAddressOrderByRelevanceInput
  account: AccountOrderByWithRelationAndSearchRelevanceInput
  accountId: SortOrder
  address: AddressOrderByWithRelationAndSearchRelevanceInput
  addressId: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  email: EmailOrderByWithRelationAndSearchRelevanceInput
  emailId: SortOrder
  jobTitle: SortOrder
  phone: SortOrder
  updatedAt: SortOrder
}

enum ContactAtAddressScalarFieldEnum {
  accountId
  addressId
  createdAt
  deleted
  emailId
  jobTitle
  phone
  updatedAt
}

input ContactAtAddressScalarWhereInput {
  AND: [ContactAtAddressScalarWhereInput!]
  NOT: [ContactAtAddressScalarWhereInput!]
  OR: [ContactAtAddressScalarWhereInput!]
  accountId: StringFilter
  addressId: StringFilter
  createdAt: DateTimeFilter
  deleted: DateTimeNullableFilter
  emailId: StringNullableFilter
  jobTitle: StringNullableFilter
  phone: StringNullableFilter
  updatedAt: DateTimeFilter
}

input ContactAtAddressScalarWhereWithAggregatesInput {
  AND: [ContactAtAddressScalarWhereWithAggregatesInput!]
  NOT: [ContactAtAddressScalarWhereWithAggregatesInput!]
  OR: [ContactAtAddressScalarWhereWithAggregatesInput!]
  accountId: StringWithAggregatesFilter
  addressId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deleted: DateTimeNullableWithAggregatesFilter
  emailId: StringNullableWithAggregatesFilter
  jobTitle: StringNullableWithAggregatesFilter
  phone: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input ContactAtAddressUpdateInput {
  account: AccountUpdateOneRequiredWithoutContactOfAdressInput
  address: AddressUpdateOneRequiredWithoutContactsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  email: EmailUpdateOneWithoutAssociatedContactInput
  jobTitle: NullableStringFieldUpdateOperationsInput
  phone: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ContactAtAddressUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  jobTitle: NullableStringFieldUpdateOperationsInput
  phone: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ContactAtAddressUpdateManyWithWhereWithoutAccountInput {
  data: ContactAtAddressUpdateManyMutationInput!
  where: ContactAtAddressScalarWhereInput!
}

input ContactAtAddressUpdateManyWithWhereWithoutAddressInput {
  data: ContactAtAddressUpdateManyMutationInput!
  where: ContactAtAddressScalarWhereInput!
}

input ContactAtAddressUpdateManyWithWhereWithoutEmailInput {
  data: ContactAtAddressUpdateManyMutationInput!
  where: ContactAtAddressScalarWhereInput!
}

input ContactAtAddressUpdateManyWithoutAccountInput {
  connect: [ContactAtAddressWhereUniqueInput!]
  connectOrCreate: [ContactAtAddressCreateOrConnectWithoutAccountInput!]
  create: [ContactAtAddressCreateWithoutAccountInput!]
  createMany: ContactAtAddressCreateManyAccountInputEnvelope
  delete: [ContactAtAddressWhereUniqueInput!]
  deleteMany: [ContactAtAddressScalarWhereInput!]
  disconnect: [ContactAtAddressWhereUniqueInput!]
  set: [ContactAtAddressWhereUniqueInput!]
  update: [ContactAtAddressUpdateWithWhereUniqueWithoutAccountInput!]
  updateMany: [ContactAtAddressUpdateManyWithWhereWithoutAccountInput!]
  upsert: [ContactAtAddressUpsertWithWhereUniqueWithoutAccountInput!]
}

input ContactAtAddressUpdateManyWithoutAddressInput {
  connect: [ContactAtAddressWhereUniqueInput!]
  connectOrCreate: [ContactAtAddressCreateOrConnectWithoutAddressInput!]
  create: [ContactAtAddressCreateWithoutAddressInput!]
  createMany: ContactAtAddressCreateManyAddressInputEnvelope
  delete: [ContactAtAddressWhereUniqueInput!]
  deleteMany: [ContactAtAddressScalarWhereInput!]
  disconnect: [ContactAtAddressWhereUniqueInput!]
  set: [ContactAtAddressWhereUniqueInput!]
  update: [ContactAtAddressUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [ContactAtAddressUpdateManyWithWhereWithoutAddressInput!]
  upsert: [ContactAtAddressUpsertWithWhereUniqueWithoutAddressInput!]
}

input ContactAtAddressUpdateManyWithoutEmailInput {
  connect: [ContactAtAddressWhereUniqueInput!]
  connectOrCreate: [ContactAtAddressCreateOrConnectWithoutEmailInput!]
  create: [ContactAtAddressCreateWithoutEmailInput!]
  createMany: ContactAtAddressCreateManyEmailInputEnvelope
  delete: [ContactAtAddressWhereUniqueInput!]
  deleteMany: [ContactAtAddressScalarWhereInput!]
  disconnect: [ContactAtAddressWhereUniqueInput!]
  set: [ContactAtAddressWhereUniqueInput!]
  update: [ContactAtAddressUpdateWithWhereUniqueWithoutEmailInput!]
  updateMany: [ContactAtAddressUpdateManyWithWhereWithoutEmailInput!]
  upsert: [ContactAtAddressUpsertWithWhereUniqueWithoutEmailInput!]
}

input ContactAtAddressUpdateWithWhereUniqueWithoutAccountInput {
  data: ContactAtAddressUpdateWithoutAccountInput!
  where: ContactAtAddressWhereUniqueInput!
}

input ContactAtAddressUpdateWithWhereUniqueWithoutAddressInput {
  data: ContactAtAddressUpdateWithoutAddressInput!
  where: ContactAtAddressWhereUniqueInput!
}

input ContactAtAddressUpdateWithWhereUniqueWithoutEmailInput {
  data: ContactAtAddressUpdateWithoutEmailInput!
  where: ContactAtAddressWhereUniqueInput!
}

input ContactAtAddressUpdateWithoutAccountInput {
  address: AddressUpdateOneRequiredWithoutContactsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  email: EmailUpdateOneWithoutAssociatedContactInput
  jobTitle: NullableStringFieldUpdateOperationsInput
  phone: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ContactAtAddressUpdateWithoutAddressInput {
  account: AccountUpdateOneRequiredWithoutContactOfAdressInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  email: EmailUpdateOneWithoutAssociatedContactInput
  jobTitle: NullableStringFieldUpdateOperationsInput
  phone: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ContactAtAddressUpdateWithoutEmailInput {
  account: AccountUpdateOneRequiredWithoutContactOfAdressInput
  address: AddressUpdateOneRequiredWithoutContactsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  jobTitle: NullableStringFieldUpdateOperationsInput
  phone: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ContactAtAddressUpsertWithWhereUniqueWithoutAccountInput {
  create: ContactAtAddressCreateWithoutAccountInput!
  update: ContactAtAddressUpdateWithoutAccountInput!
  where: ContactAtAddressWhereUniqueInput!
}

input ContactAtAddressUpsertWithWhereUniqueWithoutAddressInput {
  create: ContactAtAddressCreateWithoutAddressInput!
  update: ContactAtAddressUpdateWithoutAddressInput!
  where: ContactAtAddressWhereUniqueInput!
}

input ContactAtAddressUpsertWithWhereUniqueWithoutEmailInput {
  create: ContactAtAddressCreateWithoutEmailInput!
  update: ContactAtAddressUpdateWithoutEmailInput!
  where: ContactAtAddressWhereUniqueInput!
}

input ContactAtAddressWhereInput {
  AND: [ContactAtAddressWhereInput!]
  NOT: [ContactAtAddressWhereInput!]
  OR: [ContactAtAddressWhereInput!]
  account: AccountRelationFilter
  accountId: StringFilter
  address: AddressRelationFilter
  addressId: StringFilter
  createdAt: DateTimeFilter
  deleted: DateTimeNullableFilter
  email: EmailRelationFilter
  emailId: StringNullableFilter
  jobTitle: StringNullableFilter
  phone: StringNullableFilter
  updatedAt: DateTimeFilter
}

input ContactAtAddressWhereUniqueInput {
  accountId_addressId: ContactAtAddressAccountIdAddressIdCompoundUniqueInput
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

type Domain {
  _count: DomainCount
  createdAt: DateTime!
  data: JSON!
  deleted: DateTime
  dnsType: dnsType!
  domain: String!
  id: String!
  linkedEmails(
    cursor: EmailWhereUniqueInput
    distinct: [EmailScalarFieldEnum!]
    orderBy: [EmailOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: EmailWhereInput
  ): [Email!]!
  updatedAt: DateTime!
  verified: Boolean!
}

type DomainCount {
  linkedEmails: Int!
}

type DomainCountAggregate {
  _all: Int!
  createdAt: Int!
  data: Int!
  deleted: Int!
  dnsType: Int!
  domain: Int!
  id: Int!
  updatedAt: Int!
  verified: Int!
}

input DomainCountOrderByAggregateInput {
  createdAt: SortOrder
  data: SortOrder
  deleted: SortOrder
  dnsType: SortOrder
  domain: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  verified: SortOrder
}

input DomainCreateInput {
  createdAt: DateTime
  data: JSON!
  deleted: DateTime
  dnsType: dnsType
  domain: String!
  id: String
  linkedEmails: EmailCreateNestedManyWithoutDomainInput
  updatedAt: DateTime
  verified: Boolean
}

input DomainCreateManyInput {
  createdAt: DateTime
  data: JSON!
  deleted: DateTime
  dnsType: dnsType
  domain: String!
  id: String
  updatedAt: DateTime
  verified: Boolean
}

input DomainCreateNestedOneWithoutLinkedEmailsInput {
  connect: DomainWhereUniqueInput
  connectOrCreate: DomainCreateOrConnectWithoutLinkedEmailsInput
  create: DomainCreateWithoutLinkedEmailsInput
}

input DomainCreateOrConnectWithoutLinkedEmailsInput {
  create: DomainCreateWithoutLinkedEmailsInput!
  where: DomainWhereUniqueInput!
}

input DomainCreateWithoutLinkedEmailsInput {
  createdAt: DateTime
  data: JSON!
  deleted: DateTime
  dnsType: dnsType
  domain: String!
  id: String
  updatedAt: DateTime
  verified: Boolean
}

type DomainGroupBy {
  _count: DomainCountAggregate
  _max: DomainMaxAggregate
  _min: DomainMinAggregate
  createdAt: DateTime!
  data: JSON!
  deleted: DateTime
  dnsType: dnsType!
  domain: String!
  id: String!
  updatedAt: DateTime!
  verified: Boolean!
}

type DomainMaxAggregate {
  createdAt: DateTime
  deleted: DateTime
  dnsType: dnsType
  domain: String
  id: String
  updatedAt: DateTime
  verified: Boolean
}

input DomainMaxOrderByAggregateInput {
  createdAt: SortOrder
  deleted: SortOrder
  dnsType: SortOrder
  domain: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  verified: SortOrder
}

type DomainMinAggregate {
  createdAt: DateTime
  deleted: DateTime
  dnsType: dnsType
  domain: String
  id: String
  updatedAt: DateTime
  verified: Boolean
}

input DomainMinOrderByAggregateInput {
  createdAt: SortOrder
  deleted: SortOrder
  dnsType: SortOrder
  domain: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  verified: SortOrder
}

enum DomainOrderByRelevanceFieldEnum {
  domain
  id
}

input DomainOrderByRelevanceInput {
  fields: [DomainOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input DomainOrderByWithAggregationInput {
  _count: DomainCountOrderByAggregateInput
  _max: DomainMaxOrderByAggregateInput
  _min: DomainMinOrderByAggregateInput
  createdAt: SortOrder
  data: SortOrder
  deleted: SortOrder
  dnsType: SortOrder
  domain: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  verified: SortOrder
}

input DomainOrderByWithRelationAndSearchRelevanceInput {
  _relevance: DomainOrderByRelevanceInput
  createdAt: SortOrder
  data: SortOrder
  deleted: SortOrder
  dnsType: SortOrder
  domain: SortOrder
  id: SortOrder
  linkedEmails: EmailOrderByRelationAggregateInput
  updatedAt: SortOrder
  verified: SortOrder
}

input DomainRelationFilter {
  is: DomainWhereInput
  isNot: DomainWhereInput
}

enum DomainScalarFieldEnum {
  createdAt
  data
  deleted
  dnsType
  domain
  id
  updatedAt
  verified
}

input DomainScalarWhereWithAggregatesInput {
  AND: [DomainScalarWhereWithAggregatesInput!]
  NOT: [DomainScalarWhereWithAggregatesInput!]
  OR: [DomainScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  data: JsonWithAggregatesFilter
  deleted: DateTimeNullableWithAggregatesFilter
  dnsType: EnumdnsTypeWithAggregatesFilter
  domain: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  verified: BoolWithAggregatesFilter
}

input DomainUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  data: JSON
  deleted: NullableDateTimeFieldUpdateOperationsInput
  dnsType: EnumdnsTypeFieldUpdateOperationsInput
  domain: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  linkedEmails: EmailUpdateManyWithoutDomainInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  verified: BoolFieldUpdateOperationsInput
}

input DomainUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  data: JSON
  deleted: NullableDateTimeFieldUpdateOperationsInput
  dnsType: EnumdnsTypeFieldUpdateOperationsInput
  domain: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  verified: BoolFieldUpdateOperationsInput
}

input DomainUpdateOneWithoutLinkedEmailsInput {
  connect: DomainWhereUniqueInput
  connectOrCreate: DomainCreateOrConnectWithoutLinkedEmailsInput
  create: DomainCreateWithoutLinkedEmailsInput
  delete: Boolean
  disconnect: Boolean
  update: DomainUpdateWithoutLinkedEmailsInput
  upsert: DomainUpsertWithoutLinkedEmailsInput
}

input DomainUpdateWithoutLinkedEmailsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  data: JSON
  deleted: NullableDateTimeFieldUpdateOperationsInput
  dnsType: EnumdnsTypeFieldUpdateOperationsInput
  domain: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  verified: BoolFieldUpdateOperationsInput
}

input DomainUpsertWithoutLinkedEmailsInput {
  create: DomainCreateWithoutLinkedEmailsInput!
  update: DomainUpdateWithoutLinkedEmailsInput!
}

input DomainWhereInput {
  AND: [DomainWhereInput!]
  NOT: [DomainWhereInput!]
  OR: [DomainWhereInput!]
  createdAt: DateTimeFilter
  data: JsonFilter
  deleted: DateTimeNullableFilter
  dnsType: EnumdnsTypeFilter
  domain: StringFilter
  id: StringFilter
  linkedEmails: EmailListRelationFilter
  updatedAt: DateTimeFilter
  verified: BoolFilter
}

input DomainWhereUniqueInput {
  domain: String
  id: String
}

type Email {
  _count: EmailCount
  account: Account
  accountId: String
  associatedContact(
    cursor: ContactAtAddressWhereUniqueInput
    distinct: [ContactAtAddressScalarFieldEnum!]
    orderBy: [ContactAtAddressOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: ContactAtAddressWhereInput
  ): [ContactAtAddress!]!
  copy: Boolean!
  createdAt: DateTime!
  deleted: DateTime
  domain: Domain
  domainId: String
  email: String!
  id: String!
  imap_accessToken: String
  imap_authPass: String
  imap_authServer: Boolean
  imap_authUser: String
  imap_host: String
  imap_port: String
  imap_resyncDelay: Int!
  imap_secure: Boolean
  imap_tslMinVersion: String
  imap_tslRejectUnauthorized: Boolean
  notifyFrom: DateTime
  oauth2_accessToken: String
  oauth2_authUser: String
  oauth2_authorize: Boolean!
  oauth2_expires: DateTime
  oauth2_provider: String!
  oauth2_refreshToken: String
  path: String
  primary: Boolean!
  public: Boolean!
  smtp_accessToken: String
  smtp_authPass: String
  smtp_authServer: Boolean
  smtp_authUser: String
  smtp_host: String
  smtp_port: String
  smtp_secure: Boolean
  smtp_tslMinVersion: String
  smtp_tslRejectUnauthorized: Boolean
  updatedAt: DateTime!
  verified: Boolean!
}

type EmailAvgAggregate {
  imap_resyncDelay: Float
}

input EmailAvgOrderByAggregateInput {
  imap_resyncDelay: SortOrder
}

type EmailCount {
  associatedContact: Int!
}

type EmailCountAggregate {
  _all: Int!
  accountId: Int!
  copy: Int!
  createdAt: Int!
  deleted: Int!
  domainId: Int!
  email: Int!
  id: Int!
  imap_accessToken: Int!
  imap_authPass: Int!
  imap_authServer: Int!
  imap_authUser: Int!
  imap_host: Int!
  imap_port: Int!
  imap_resyncDelay: Int!
  imap_secure: Int!
  imap_tslMinVersion: Int!
  imap_tslRejectUnauthorized: Int!
  notifyFrom: Int!
  oauth2_accessToken: Int!
  oauth2_authUser: Int!
  oauth2_authorize: Int!
  oauth2_expires: Int!
  oauth2_provider: Int!
  oauth2_refreshToken: Int!
  path: Int!
  primary: Int!
  public: Int!
  smtp_accessToken: Int!
  smtp_authPass: Int!
  smtp_authServer: Int!
  smtp_authUser: Int!
  smtp_host: Int!
  smtp_port: Int!
  smtp_secure: Int!
  smtp_tslMinVersion: Int!
  smtp_tslRejectUnauthorized: Int!
  updatedAt: Int!
  verified: Int!
}

input EmailCountOrderByAggregateInput {
  accountId: SortOrder
  copy: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  domainId: SortOrder
  email: SortOrder
  id: SortOrder
  imap_accessToken: SortOrder
  imap_authPass: SortOrder
  imap_authServer: SortOrder
  imap_authUser: SortOrder
  imap_host: SortOrder
  imap_port: SortOrder
  imap_resyncDelay: SortOrder
  imap_secure: SortOrder
  imap_tslMinVersion: SortOrder
  imap_tslRejectUnauthorized: SortOrder
  notifyFrom: SortOrder
  oauth2_accessToken: SortOrder
  oauth2_authUser: SortOrder
  oauth2_authorize: SortOrder
  oauth2_expires: SortOrder
  oauth2_provider: SortOrder
  oauth2_refreshToken: SortOrder
  path: SortOrder
  primary: SortOrder
  public: SortOrder
  smtp_accessToken: SortOrder
  smtp_authPass: SortOrder
  smtp_authServer: SortOrder
  smtp_authUser: SortOrder
  smtp_host: SortOrder
  smtp_port: SortOrder
  smtp_secure: SortOrder
  smtp_tslMinVersion: SortOrder
  smtp_tslRejectUnauthorized: SortOrder
  updatedAt: SortOrder
  verified: SortOrder
}

input EmailCreateInput {
  account: AccountCreateNestedOneWithoutEmailsInput
  associatedContact: ContactAtAddressCreateNestedManyWithoutEmailInput
  copy: Boolean
  createdAt: DateTime
  deleted: DateTime
  domain: DomainCreateNestedOneWithoutLinkedEmailsInput
  email: String!
  id: String
  imap_accessToken: String
  imap_authPass: String
  imap_authServer: Boolean
  imap_authUser: String
  imap_host: String
  imap_port: String
  imap_resyncDelay: Int
  imap_secure: Boolean
  imap_tslMinVersion: String
  imap_tslRejectUnauthorized: Boolean
  notifyFrom: DateTime
  oauth2_accessToken: String
  oauth2_authUser: String
  oauth2_authorize: Boolean
  oauth2_expires: DateTime
  oauth2_provider: String
  oauth2_refreshToken: String
  path: String
  primary: Boolean
  public: Boolean
  smtp_accessToken: String
  smtp_authPass: String
  smtp_authServer: Boolean
  smtp_authUser: String
  smtp_host: String
  smtp_port: String
  smtp_secure: Boolean
  smtp_tslMinVersion: String
  smtp_tslRejectUnauthorized: Boolean
  updatedAt: DateTime
  verified: Boolean
}

input EmailCreateManyAccountInput {
  copy: Boolean
  createdAt: DateTime
  deleted: DateTime
  domainId: String
  email: String!
  id: String
  imap_accessToken: String
  imap_authPass: String
  imap_authServer: Boolean
  imap_authUser: String
  imap_host: String
  imap_port: String
  imap_resyncDelay: Int
  imap_secure: Boolean
  imap_tslMinVersion: String
  imap_tslRejectUnauthorized: Boolean
  notifyFrom: DateTime
  oauth2_accessToken: String
  oauth2_authUser: String
  oauth2_authorize: Boolean
  oauth2_expires: DateTime
  oauth2_provider: String
  oauth2_refreshToken: String
  path: String
  primary: Boolean
  public: Boolean
  smtp_accessToken: String
  smtp_authPass: String
  smtp_authServer: Boolean
  smtp_authUser: String
  smtp_host: String
  smtp_port: String
  smtp_secure: Boolean
  smtp_tslMinVersion: String
  smtp_tslRejectUnauthorized: Boolean
  updatedAt: DateTime
  verified: Boolean
}

input EmailCreateManyAccountInputEnvelope {
  data: [EmailCreateManyAccountInput!]!
  skipDuplicates: Boolean
}

input EmailCreateManyDomainInput {
  accountId: String
  copy: Boolean
  createdAt: DateTime
  deleted: DateTime
  email: String!
  id: String
  imap_accessToken: String
  imap_authPass: String
  imap_authServer: Boolean
  imap_authUser: String
  imap_host: String
  imap_port: String
  imap_resyncDelay: Int
  imap_secure: Boolean
  imap_tslMinVersion: String
  imap_tslRejectUnauthorized: Boolean
  notifyFrom: DateTime
  oauth2_accessToken: String
  oauth2_authUser: String
  oauth2_authorize: Boolean
  oauth2_expires: DateTime
  oauth2_provider: String
  oauth2_refreshToken: String
  path: String
  primary: Boolean
  public: Boolean
  smtp_accessToken: String
  smtp_authPass: String
  smtp_authServer: Boolean
  smtp_authUser: String
  smtp_host: String
  smtp_port: String
  smtp_secure: Boolean
  smtp_tslMinVersion: String
  smtp_tslRejectUnauthorized: Boolean
  updatedAt: DateTime
  verified: Boolean
}

input EmailCreateManyDomainInputEnvelope {
  data: [EmailCreateManyDomainInput!]!
  skipDuplicates: Boolean
}

input EmailCreateManyInput {
  accountId: String
  copy: Boolean
  createdAt: DateTime
  deleted: DateTime
  domainId: String
  email: String!
  id: String
  imap_accessToken: String
  imap_authPass: String
  imap_authServer: Boolean
  imap_authUser: String
  imap_host: String
  imap_port: String
  imap_resyncDelay: Int
  imap_secure: Boolean
  imap_tslMinVersion: String
  imap_tslRejectUnauthorized: Boolean
  notifyFrom: DateTime
  oauth2_accessToken: String
  oauth2_authUser: String
  oauth2_authorize: Boolean
  oauth2_expires: DateTime
  oauth2_provider: String
  oauth2_refreshToken: String
  path: String
  primary: Boolean
  public: Boolean
  smtp_accessToken: String
  smtp_authPass: String
  smtp_authServer: Boolean
  smtp_authUser: String
  smtp_host: String
  smtp_port: String
  smtp_secure: Boolean
  smtp_tslMinVersion: String
  smtp_tslRejectUnauthorized: Boolean
  updatedAt: DateTime
  verified: Boolean
}

input EmailCreateNestedManyWithoutAccountInput {
  connect: [EmailWhereUniqueInput!]
  connectOrCreate: [EmailCreateOrConnectWithoutAccountInput!]
  create: [EmailCreateWithoutAccountInput!]
  createMany: EmailCreateManyAccountInputEnvelope
}

input EmailCreateNestedManyWithoutDomainInput {
  connect: [EmailWhereUniqueInput!]
  connectOrCreate: [EmailCreateOrConnectWithoutDomainInput!]
  create: [EmailCreateWithoutDomainInput!]
  createMany: EmailCreateManyDomainInputEnvelope
}

input EmailCreateNestedOneWithoutAssociatedContactInput {
  connect: EmailWhereUniqueInput
  connectOrCreate: EmailCreateOrConnectWithoutAssociatedContactInput
  create: EmailCreateWithoutAssociatedContactInput
}

input EmailCreateOrConnectWithoutAccountInput {
  create: EmailCreateWithoutAccountInput!
  where: EmailWhereUniqueInput!
}

input EmailCreateOrConnectWithoutAssociatedContactInput {
  create: EmailCreateWithoutAssociatedContactInput!
  where: EmailWhereUniqueInput!
}

input EmailCreateOrConnectWithoutDomainInput {
  create: EmailCreateWithoutDomainInput!
  where: EmailWhereUniqueInput!
}

input EmailCreateWithoutAccountInput {
  associatedContact: ContactAtAddressCreateNestedManyWithoutEmailInput
  copy: Boolean
  createdAt: DateTime
  deleted: DateTime
  domain: DomainCreateNestedOneWithoutLinkedEmailsInput
  email: String!
  id: String
  imap_accessToken: String
  imap_authPass: String
  imap_authServer: Boolean
  imap_authUser: String
  imap_host: String
  imap_port: String
  imap_resyncDelay: Int
  imap_secure: Boolean
  imap_tslMinVersion: String
  imap_tslRejectUnauthorized: Boolean
  notifyFrom: DateTime
  oauth2_accessToken: String
  oauth2_authUser: String
  oauth2_authorize: Boolean
  oauth2_expires: DateTime
  oauth2_provider: String
  oauth2_refreshToken: String
  path: String
  primary: Boolean
  public: Boolean
  smtp_accessToken: String
  smtp_authPass: String
  smtp_authServer: Boolean
  smtp_authUser: String
  smtp_host: String
  smtp_port: String
  smtp_secure: Boolean
  smtp_tslMinVersion: String
  smtp_tslRejectUnauthorized: Boolean
  updatedAt: DateTime
  verified: Boolean
}

input EmailCreateWithoutAssociatedContactInput {
  account: AccountCreateNestedOneWithoutEmailsInput
  copy: Boolean
  createdAt: DateTime
  deleted: DateTime
  domain: DomainCreateNestedOneWithoutLinkedEmailsInput
  email: String!
  id: String
  imap_accessToken: String
  imap_authPass: String
  imap_authServer: Boolean
  imap_authUser: String
  imap_host: String
  imap_port: String
  imap_resyncDelay: Int
  imap_secure: Boolean
  imap_tslMinVersion: String
  imap_tslRejectUnauthorized: Boolean
  notifyFrom: DateTime
  oauth2_accessToken: String
  oauth2_authUser: String
  oauth2_authorize: Boolean
  oauth2_expires: DateTime
  oauth2_provider: String
  oauth2_refreshToken: String
  path: String
  primary: Boolean
  public: Boolean
  smtp_accessToken: String
  smtp_authPass: String
  smtp_authServer: Boolean
  smtp_authUser: String
  smtp_host: String
  smtp_port: String
  smtp_secure: Boolean
  smtp_tslMinVersion: String
  smtp_tslRejectUnauthorized: Boolean
  updatedAt: DateTime
  verified: Boolean
}

input EmailCreateWithoutDomainInput {
  account: AccountCreateNestedOneWithoutEmailsInput
  associatedContact: ContactAtAddressCreateNestedManyWithoutEmailInput
  copy: Boolean
  createdAt: DateTime
  deleted: DateTime
  email: String!
  id: String
  imap_accessToken: String
  imap_authPass: String
  imap_authServer: Boolean
  imap_authUser: String
  imap_host: String
  imap_port: String
  imap_resyncDelay: Int
  imap_secure: Boolean
  imap_tslMinVersion: String
  imap_tslRejectUnauthorized: Boolean
  notifyFrom: DateTime
  oauth2_accessToken: String
  oauth2_authUser: String
  oauth2_authorize: Boolean
  oauth2_expires: DateTime
  oauth2_provider: String
  oauth2_refreshToken: String
  path: String
  primary: Boolean
  public: Boolean
  smtp_accessToken: String
  smtp_authPass: String
  smtp_authServer: Boolean
  smtp_authUser: String
  smtp_host: String
  smtp_port: String
  smtp_secure: Boolean
  smtp_tslMinVersion: String
  smtp_tslRejectUnauthorized: Boolean
  updatedAt: DateTime
  verified: Boolean
}

type EmailGroupBy {
  _avg: EmailAvgAggregate
  _count: EmailCountAggregate
  _max: EmailMaxAggregate
  _min: EmailMinAggregate
  _sum: EmailSumAggregate
  accountId: String
  copy: Boolean!
  createdAt: DateTime!
  deleted: DateTime
  domainId: String
  email: String!
  id: String!
  imap_accessToken: String
  imap_authPass: String
  imap_authServer: Boolean
  imap_authUser: String
  imap_host: String
  imap_port: String
  imap_resyncDelay: Int!
  imap_secure: Boolean
  imap_tslMinVersion: String
  imap_tslRejectUnauthorized: Boolean
  notifyFrom: DateTime
  oauth2_accessToken: String
  oauth2_authUser: String
  oauth2_authorize: Boolean!
  oauth2_expires: DateTime
  oauth2_provider: String!
  oauth2_refreshToken: String
  path: String
  primary: Boolean!
  public: Boolean!
  smtp_accessToken: String
  smtp_authPass: String
  smtp_authServer: Boolean
  smtp_authUser: String
  smtp_host: String
  smtp_port: String
  smtp_secure: Boolean
  smtp_tslMinVersion: String
  smtp_tslRejectUnauthorized: Boolean
  updatedAt: DateTime!
  verified: Boolean!
}

input EmailListRelationFilter {
  every: EmailWhereInput
  none: EmailWhereInput
  some: EmailWhereInput
}

type EmailMaxAggregate {
  accountId: String
  copy: Boolean
  createdAt: DateTime
  deleted: DateTime
  domainId: String
  email: String
  id: String
  imap_accessToken: String
  imap_authPass: String
  imap_authServer: Boolean
  imap_authUser: String
  imap_host: String
  imap_port: String
  imap_resyncDelay: Int
  imap_secure: Boolean
  imap_tslMinVersion: String
  imap_tslRejectUnauthorized: Boolean
  notifyFrom: DateTime
  oauth2_accessToken: String
  oauth2_authUser: String
  oauth2_authorize: Boolean
  oauth2_expires: DateTime
  oauth2_provider: String
  oauth2_refreshToken: String
  path: String
  primary: Boolean
  public: Boolean
  smtp_accessToken: String
  smtp_authPass: String
  smtp_authServer: Boolean
  smtp_authUser: String
  smtp_host: String
  smtp_port: String
  smtp_secure: Boolean
  smtp_tslMinVersion: String
  smtp_tslRejectUnauthorized: Boolean
  updatedAt: DateTime
  verified: Boolean
}

input EmailMaxOrderByAggregateInput {
  accountId: SortOrder
  copy: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  domainId: SortOrder
  email: SortOrder
  id: SortOrder
  imap_accessToken: SortOrder
  imap_authPass: SortOrder
  imap_authServer: SortOrder
  imap_authUser: SortOrder
  imap_host: SortOrder
  imap_port: SortOrder
  imap_resyncDelay: SortOrder
  imap_secure: SortOrder
  imap_tslMinVersion: SortOrder
  imap_tslRejectUnauthorized: SortOrder
  notifyFrom: SortOrder
  oauth2_accessToken: SortOrder
  oauth2_authUser: SortOrder
  oauth2_authorize: SortOrder
  oauth2_expires: SortOrder
  oauth2_provider: SortOrder
  oauth2_refreshToken: SortOrder
  path: SortOrder
  primary: SortOrder
  public: SortOrder
  smtp_accessToken: SortOrder
  smtp_authPass: SortOrder
  smtp_authServer: SortOrder
  smtp_authUser: SortOrder
  smtp_host: SortOrder
  smtp_port: SortOrder
  smtp_secure: SortOrder
  smtp_tslMinVersion: SortOrder
  smtp_tslRejectUnauthorized: SortOrder
  updatedAt: SortOrder
  verified: SortOrder
}

type EmailMinAggregate {
  accountId: String
  copy: Boolean
  createdAt: DateTime
  deleted: DateTime
  domainId: String
  email: String
  id: String
  imap_accessToken: String
  imap_authPass: String
  imap_authServer: Boolean
  imap_authUser: String
  imap_host: String
  imap_port: String
  imap_resyncDelay: Int
  imap_secure: Boolean
  imap_tslMinVersion: String
  imap_tslRejectUnauthorized: Boolean
  notifyFrom: DateTime
  oauth2_accessToken: String
  oauth2_authUser: String
  oauth2_authorize: Boolean
  oauth2_expires: DateTime
  oauth2_provider: String
  oauth2_refreshToken: String
  path: String
  primary: Boolean
  public: Boolean
  smtp_accessToken: String
  smtp_authPass: String
  smtp_authServer: Boolean
  smtp_authUser: String
  smtp_host: String
  smtp_port: String
  smtp_secure: Boolean
  smtp_tslMinVersion: String
  smtp_tslRejectUnauthorized: Boolean
  updatedAt: DateTime
  verified: Boolean
}

input EmailMinOrderByAggregateInput {
  accountId: SortOrder
  copy: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  domainId: SortOrder
  email: SortOrder
  id: SortOrder
  imap_accessToken: SortOrder
  imap_authPass: SortOrder
  imap_authServer: SortOrder
  imap_authUser: SortOrder
  imap_host: SortOrder
  imap_port: SortOrder
  imap_resyncDelay: SortOrder
  imap_secure: SortOrder
  imap_tslMinVersion: SortOrder
  imap_tslRejectUnauthorized: SortOrder
  notifyFrom: SortOrder
  oauth2_accessToken: SortOrder
  oauth2_authUser: SortOrder
  oauth2_authorize: SortOrder
  oauth2_expires: SortOrder
  oauth2_provider: SortOrder
  oauth2_refreshToken: SortOrder
  path: SortOrder
  primary: SortOrder
  public: SortOrder
  smtp_accessToken: SortOrder
  smtp_authPass: SortOrder
  smtp_authServer: SortOrder
  smtp_authUser: SortOrder
  smtp_host: SortOrder
  smtp_port: SortOrder
  smtp_secure: SortOrder
  smtp_tslMinVersion: SortOrder
  smtp_tslRejectUnauthorized: SortOrder
  updatedAt: SortOrder
  verified: SortOrder
}

input EmailOrderByRelationAggregateInput {
  _count: SortOrder
}

enum EmailOrderByRelevanceFieldEnum {
  accountId
  domainId
  email
  id
  imap_accessToken
  imap_authPass
  imap_authUser
  imap_host
  imap_port
  imap_tslMinVersion
  oauth2_accessToken
  oauth2_authUser
  oauth2_provider
  oauth2_refreshToken
  path
  smtp_accessToken
  smtp_authPass
  smtp_authUser
  smtp_host
  smtp_port
  smtp_tslMinVersion
}

input EmailOrderByRelevanceInput {
  fields: [EmailOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input EmailOrderByWithAggregationInput {
  _avg: EmailAvgOrderByAggregateInput
  _count: EmailCountOrderByAggregateInput
  _max: EmailMaxOrderByAggregateInput
  _min: EmailMinOrderByAggregateInput
  _sum: EmailSumOrderByAggregateInput
  accountId: SortOrder
  copy: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  domainId: SortOrder
  email: SortOrder
  id: SortOrder
  imap_accessToken: SortOrder
  imap_authPass: SortOrder
  imap_authServer: SortOrder
  imap_authUser: SortOrder
  imap_host: SortOrder
  imap_port: SortOrder
  imap_resyncDelay: SortOrder
  imap_secure: SortOrder
  imap_tslMinVersion: SortOrder
  imap_tslRejectUnauthorized: SortOrder
  notifyFrom: SortOrder
  oauth2_accessToken: SortOrder
  oauth2_authUser: SortOrder
  oauth2_authorize: SortOrder
  oauth2_expires: SortOrder
  oauth2_provider: SortOrder
  oauth2_refreshToken: SortOrder
  path: SortOrder
  primary: SortOrder
  public: SortOrder
  smtp_accessToken: SortOrder
  smtp_authPass: SortOrder
  smtp_authServer: SortOrder
  smtp_authUser: SortOrder
  smtp_host: SortOrder
  smtp_port: SortOrder
  smtp_secure: SortOrder
  smtp_tslMinVersion: SortOrder
  smtp_tslRejectUnauthorized: SortOrder
  updatedAt: SortOrder
  verified: SortOrder
}

input EmailOrderByWithRelationAndSearchRelevanceInput {
  _relevance: EmailOrderByRelevanceInput
  account: AccountOrderByWithRelationAndSearchRelevanceInput
  accountId: SortOrder
  associatedContact: ContactAtAddressOrderByRelationAggregateInput
  copy: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  domain: DomainOrderByWithRelationAndSearchRelevanceInput
  domainId: SortOrder
  email: SortOrder
  id: SortOrder
  imap_accessToken: SortOrder
  imap_authPass: SortOrder
  imap_authServer: SortOrder
  imap_authUser: SortOrder
  imap_host: SortOrder
  imap_port: SortOrder
  imap_resyncDelay: SortOrder
  imap_secure: SortOrder
  imap_tslMinVersion: SortOrder
  imap_tslRejectUnauthorized: SortOrder
  notifyFrom: SortOrder
  oauth2_accessToken: SortOrder
  oauth2_authUser: SortOrder
  oauth2_authorize: SortOrder
  oauth2_expires: SortOrder
  oauth2_provider: SortOrder
  oauth2_refreshToken: SortOrder
  path: SortOrder
  primary: SortOrder
  public: SortOrder
  smtp_accessToken: SortOrder
  smtp_authPass: SortOrder
  smtp_authServer: SortOrder
  smtp_authUser: SortOrder
  smtp_host: SortOrder
  smtp_port: SortOrder
  smtp_secure: SortOrder
  smtp_tslMinVersion: SortOrder
  smtp_tslRejectUnauthorized: SortOrder
  updatedAt: SortOrder
  verified: SortOrder
}

input EmailRelationFilter {
  is: EmailWhereInput
  isNot: EmailWhereInput
}

enum EmailScalarFieldEnum {
  accountId
  copy
  createdAt
  deleted
  domainId
  email
  id
  imap_accessToken
  imap_authPass
  imap_authServer
  imap_authUser
  imap_host
  imap_port
  imap_resyncDelay
  imap_secure
  imap_tslMinVersion
  imap_tslRejectUnauthorized
  notifyFrom
  oauth2_accessToken
  oauth2_authUser
  oauth2_authorize
  oauth2_expires
  oauth2_provider
  oauth2_refreshToken
  path
  primary
  public
  smtp_accessToken
  smtp_authPass
  smtp_authServer
  smtp_authUser
  smtp_host
  smtp_port
  smtp_secure
  smtp_tslMinVersion
  smtp_tslRejectUnauthorized
  updatedAt
  verified
}

input EmailScalarWhereInput {
  AND: [EmailScalarWhereInput!]
  NOT: [EmailScalarWhereInput!]
  OR: [EmailScalarWhereInput!]
  accountId: StringNullableFilter
  copy: BoolFilter
  createdAt: DateTimeFilter
  deleted: DateTimeNullableFilter
  domainId: StringNullableFilter
  email: StringFilter
  id: StringFilter
  imap_accessToken: StringNullableFilter
  imap_authPass: StringNullableFilter
  imap_authServer: BoolNullableFilter
  imap_authUser: StringNullableFilter
  imap_host: StringNullableFilter
  imap_port: StringNullableFilter
  imap_resyncDelay: IntFilter
  imap_secure: BoolNullableFilter
  imap_tslMinVersion: StringNullableFilter
  imap_tslRejectUnauthorized: BoolNullableFilter
  notifyFrom: DateTimeNullableFilter
  oauth2_accessToken: StringNullableFilter
  oauth2_authUser: StringNullableFilter
  oauth2_authorize: BoolFilter
  oauth2_expires: DateTimeNullableFilter
  oauth2_provider: StringFilter
  oauth2_refreshToken: StringNullableFilter
  path: StringNullableFilter
  primary: BoolFilter
  public: BoolFilter
  smtp_accessToken: StringNullableFilter
  smtp_authPass: StringNullableFilter
  smtp_authServer: BoolNullableFilter
  smtp_authUser: StringNullableFilter
  smtp_host: StringNullableFilter
  smtp_port: StringNullableFilter
  smtp_secure: BoolNullableFilter
  smtp_tslMinVersion: StringNullableFilter
  smtp_tslRejectUnauthorized: BoolNullableFilter
  updatedAt: DateTimeFilter
  verified: BoolFilter
}

input EmailScalarWhereWithAggregatesInput {
  AND: [EmailScalarWhereWithAggregatesInput!]
  NOT: [EmailScalarWhereWithAggregatesInput!]
  OR: [EmailScalarWhereWithAggregatesInput!]
  accountId: StringNullableWithAggregatesFilter
  copy: BoolWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deleted: DateTimeNullableWithAggregatesFilter
  domainId: StringNullableWithAggregatesFilter
  email: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  imap_accessToken: StringNullableWithAggregatesFilter
  imap_authPass: StringNullableWithAggregatesFilter
  imap_authServer: BoolNullableWithAggregatesFilter
  imap_authUser: StringNullableWithAggregatesFilter
  imap_host: StringNullableWithAggregatesFilter
  imap_port: StringNullableWithAggregatesFilter
  imap_resyncDelay: IntWithAggregatesFilter
  imap_secure: BoolNullableWithAggregatesFilter
  imap_tslMinVersion: StringNullableWithAggregatesFilter
  imap_tslRejectUnauthorized: BoolNullableWithAggregatesFilter
  notifyFrom: DateTimeNullableWithAggregatesFilter
  oauth2_accessToken: StringNullableWithAggregatesFilter
  oauth2_authUser: StringNullableWithAggregatesFilter
  oauth2_authorize: BoolWithAggregatesFilter
  oauth2_expires: DateTimeNullableWithAggregatesFilter
  oauth2_provider: StringWithAggregatesFilter
  oauth2_refreshToken: StringNullableWithAggregatesFilter
  path: StringNullableWithAggregatesFilter
  primary: BoolWithAggregatesFilter
  public: BoolWithAggregatesFilter
  smtp_accessToken: StringNullableWithAggregatesFilter
  smtp_authPass: StringNullableWithAggregatesFilter
  smtp_authServer: BoolNullableWithAggregatesFilter
  smtp_authUser: StringNullableWithAggregatesFilter
  smtp_host: StringNullableWithAggregatesFilter
  smtp_port: StringNullableWithAggregatesFilter
  smtp_secure: BoolNullableWithAggregatesFilter
  smtp_tslMinVersion: StringNullableWithAggregatesFilter
  smtp_tslRejectUnauthorized: BoolNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  verified: BoolWithAggregatesFilter
}

type EmailSumAggregate {
  imap_resyncDelay: Int
}

input EmailSumOrderByAggregateInput {
  imap_resyncDelay: SortOrder
}

input EmailUpdateInput {
  account: AccountUpdateOneWithoutEmailsInput
  associatedContact: ContactAtAddressUpdateManyWithoutEmailInput
  copy: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  domain: DomainUpdateOneWithoutLinkedEmailsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imap_accessToken: NullableStringFieldUpdateOperationsInput
  imap_authPass: NullableStringFieldUpdateOperationsInput
  imap_authServer: NullableBoolFieldUpdateOperationsInput
  imap_authUser: NullableStringFieldUpdateOperationsInput
  imap_host: NullableStringFieldUpdateOperationsInput
  imap_port: NullableStringFieldUpdateOperationsInput
  imap_resyncDelay: IntFieldUpdateOperationsInput
  imap_secure: NullableBoolFieldUpdateOperationsInput
  imap_tslMinVersion: NullableStringFieldUpdateOperationsInput
  imap_tslRejectUnauthorized: NullableBoolFieldUpdateOperationsInput
  notifyFrom: NullableDateTimeFieldUpdateOperationsInput
  oauth2_accessToken: NullableStringFieldUpdateOperationsInput
  oauth2_authUser: NullableStringFieldUpdateOperationsInput
  oauth2_authorize: BoolFieldUpdateOperationsInput
  oauth2_expires: NullableDateTimeFieldUpdateOperationsInput
  oauth2_provider: StringFieldUpdateOperationsInput
  oauth2_refreshToken: NullableStringFieldUpdateOperationsInput
  path: NullableStringFieldUpdateOperationsInput
  primary: BoolFieldUpdateOperationsInput
  public: BoolFieldUpdateOperationsInput
  smtp_accessToken: NullableStringFieldUpdateOperationsInput
  smtp_authPass: NullableStringFieldUpdateOperationsInput
  smtp_authServer: NullableBoolFieldUpdateOperationsInput
  smtp_authUser: NullableStringFieldUpdateOperationsInput
  smtp_host: NullableStringFieldUpdateOperationsInput
  smtp_port: NullableStringFieldUpdateOperationsInput
  smtp_secure: NullableBoolFieldUpdateOperationsInput
  smtp_tslMinVersion: NullableStringFieldUpdateOperationsInput
  smtp_tslRejectUnauthorized: NullableBoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  verified: BoolFieldUpdateOperationsInput
}

input EmailUpdateManyMutationInput {
  copy: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imap_accessToken: NullableStringFieldUpdateOperationsInput
  imap_authPass: NullableStringFieldUpdateOperationsInput
  imap_authServer: NullableBoolFieldUpdateOperationsInput
  imap_authUser: NullableStringFieldUpdateOperationsInput
  imap_host: NullableStringFieldUpdateOperationsInput
  imap_port: NullableStringFieldUpdateOperationsInput
  imap_resyncDelay: IntFieldUpdateOperationsInput
  imap_secure: NullableBoolFieldUpdateOperationsInput
  imap_tslMinVersion: NullableStringFieldUpdateOperationsInput
  imap_tslRejectUnauthorized: NullableBoolFieldUpdateOperationsInput
  notifyFrom: NullableDateTimeFieldUpdateOperationsInput
  oauth2_accessToken: NullableStringFieldUpdateOperationsInput
  oauth2_authUser: NullableStringFieldUpdateOperationsInput
  oauth2_authorize: BoolFieldUpdateOperationsInput
  oauth2_expires: NullableDateTimeFieldUpdateOperationsInput
  oauth2_provider: StringFieldUpdateOperationsInput
  oauth2_refreshToken: NullableStringFieldUpdateOperationsInput
  path: NullableStringFieldUpdateOperationsInput
  primary: BoolFieldUpdateOperationsInput
  public: BoolFieldUpdateOperationsInput
  smtp_accessToken: NullableStringFieldUpdateOperationsInput
  smtp_authPass: NullableStringFieldUpdateOperationsInput
  smtp_authServer: NullableBoolFieldUpdateOperationsInput
  smtp_authUser: NullableStringFieldUpdateOperationsInput
  smtp_host: NullableStringFieldUpdateOperationsInput
  smtp_port: NullableStringFieldUpdateOperationsInput
  smtp_secure: NullableBoolFieldUpdateOperationsInput
  smtp_tslMinVersion: NullableStringFieldUpdateOperationsInput
  smtp_tslRejectUnauthorized: NullableBoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  verified: BoolFieldUpdateOperationsInput
}

input EmailUpdateManyWithWhereWithoutAccountInput {
  data: EmailUpdateManyMutationInput!
  where: EmailScalarWhereInput!
}

input EmailUpdateManyWithWhereWithoutDomainInput {
  data: EmailUpdateManyMutationInput!
  where: EmailScalarWhereInput!
}

input EmailUpdateManyWithoutAccountInput {
  connect: [EmailWhereUniqueInput!]
  connectOrCreate: [EmailCreateOrConnectWithoutAccountInput!]
  create: [EmailCreateWithoutAccountInput!]
  createMany: EmailCreateManyAccountInputEnvelope
  delete: [EmailWhereUniqueInput!]
  deleteMany: [EmailScalarWhereInput!]
  disconnect: [EmailWhereUniqueInput!]
  set: [EmailWhereUniqueInput!]
  update: [EmailUpdateWithWhereUniqueWithoutAccountInput!]
  updateMany: [EmailUpdateManyWithWhereWithoutAccountInput!]
  upsert: [EmailUpsertWithWhereUniqueWithoutAccountInput!]
}

input EmailUpdateManyWithoutDomainInput {
  connect: [EmailWhereUniqueInput!]
  connectOrCreate: [EmailCreateOrConnectWithoutDomainInput!]
  create: [EmailCreateWithoutDomainInput!]
  createMany: EmailCreateManyDomainInputEnvelope
  delete: [EmailWhereUniqueInput!]
  deleteMany: [EmailScalarWhereInput!]
  disconnect: [EmailWhereUniqueInput!]
  set: [EmailWhereUniqueInput!]
  update: [EmailUpdateWithWhereUniqueWithoutDomainInput!]
  updateMany: [EmailUpdateManyWithWhereWithoutDomainInput!]
  upsert: [EmailUpsertWithWhereUniqueWithoutDomainInput!]
}

input EmailUpdateOneWithoutAssociatedContactInput {
  connect: EmailWhereUniqueInput
  connectOrCreate: EmailCreateOrConnectWithoutAssociatedContactInput
  create: EmailCreateWithoutAssociatedContactInput
  delete: Boolean
  disconnect: Boolean
  update: EmailUpdateWithoutAssociatedContactInput
  upsert: EmailUpsertWithoutAssociatedContactInput
}

input EmailUpdateWithWhereUniqueWithoutAccountInput {
  data: EmailUpdateWithoutAccountInput!
  where: EmailWhereUniqueInput!
}

input EmailUpdateWithWhereUniqueWithoutDomainInput {
  data: EmailUpdateWithoutDomainInput!
  where: EmailWhereUniqueInput!
}

input EmailUpdateWithoutAccountInput {
  associatedContact: ContactAtAddressUpdateManyWithoutEmailInput
  copy: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  domain: DomainUpdateOneWithoutLinkedEmailsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imap_accessToken: NullableStringFieldUpdateOperationsInput
  imap_authPass: NullableStringFieldUpdateOperationsInput
  imap_authServer: NullableBoolFieldUpdateOperationsInput
  imap_authUser: NullableStringFieldUpdateOperationsInput
  imap_host: NullableStringFieldUpdateOperationsInput
  imap_port: NullableStringFieldUpdateOperationsInput
  imap_resyncDelay: IntFieldUpdateOperationsInput
  imap_secure: NullableBoolFieldUpdateOperationsInput
  imap_tslMinVersion: NullableStringFieldUpdateOperationsInput
  imap_tslRejectUnauthorized: NullableBoolFieldUpdateOperationsInput
  notifyFrom: NullableDateTimeFieldUpdateOperationsInput
  oauth2_accessToken: NullableStringFieldUpdateOperationsInput
  oauth2_authUser: NullableStringFieldUpdateOperationsInput
  oauth2_authorize: BoolFieldUpdateOperationsInput
  oauth2_expires: NullableDateTimeFieldUpdateOperationsInput
  oauth2_provider: StringFieldUpdateOperationsInput
  oauth2_refreshToken: NullableStringFieldUpdateOperationsInput
  path: NullableStringFieldUpdateOperationsInput
  primary: BoolFieldUpdateOperationsInput
  public: BoolFieldUpdateOperationsInput
  smtp_accessToken: NullableStringFieldUpdateOperationsInput
  smtp_authPass: NullableStringFieldUpdateOperationsInput
  smtp_authServer: NullableBoolFieldUpdateOperationsInput
  smtp_authUser: NullableStringFieldUpdateOperationsInput
  smtp_host: NullableStringFieldUpdateOperationsInput
  smtp_port: NullableStringFieldUpdateOperationsInput
  smtp_secure: NullableBoolFieldUpdateOperationsInput
  smtp_tslMinVersion: NullableStringFieldUpdateOperationsInput
  smtp_tslRejectUnauthorized: NullableBoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  verified: BoolFieldUpdateOperationsInput
}

input EmailUpdateWithoutAssociatedContactInput {
  account: AccountUpdateOneWithoutEmailsInput
  copy: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  domain: DomainUpdateOneWithoutLinkedEmailsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imap_accessToken: NullableStringFieldUpdateOperationsInput
  imap_authPass: NullableStringFieldUpdateOperationsInput
  imap_authServer: NullableBoolFieldUpdateOperationsInput
  imap_authUser: NullableStringFieldUpdateOperationsInput
  imap_host: NullableStringFieldUpdateOperationsInput
  imap_port: NullableStringFieldUpdateOperationsInput
  imap_resyncDelay: IntFieldUpdateOperationsInput
  imap_secure: NullableBoolFieldUpdateOperationsInput
  imap_tslMinVersion: NullableStringFieldUpdateOperationsInput
  imap_tslRejectUnauthorized: NullableBoolFieldUpdateOperationsInput
  notifyFrom: NullableDateTimeFieldUpdateOperationsInput
  oauth2_accessToken: NullableStringFieldUpdateOperationsInput
  oauth2_authUser: NullableStringFieldUpdateOperationsInput
  oauth2_authorize: BoolFieldUpdateOperationsInput
  oauth2_expires: NullableDateTimeFieldUpdateOperationsInput
  oauth2_provider: StringFieldUpdateOperationsInput
  oauth2_refreshToken: NullableStringFieldUpdateOperationsInput
  path: NullableStringFieldUpdateOperationsInput
  primary: BoolFieldUpdateOperationsInput
  public: BoolFieldUpdateOperationsInput
  smtp_accessToken: NullableStringFieldUpdateOperationsInput
  smtp_authPass: NullableStringFieldUpdateOperationsInput
  smtp_authServer: NullableBoolFieldUpdateOperationsInput
  smtp_authUser: NullableStringFieldUpdateOperationsInput
  smtp_host: NullableStringFieldUpdateOperationsInput
  smtp_port: NullableStringFieldUpdateOperationsInput
  smtp_secure: NullableBoolFieldUpdateOperationsInput
  smtp_tslMinVersion: NullableStringFieldUpdateOperationsInput
  smtp_tslRejectUnauthorized: NullableBoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  verified: BoolFieldUpdateOperationsInput
}

input EmailUpdateWithoutDomainInput {
  account: AccountUpdateOneWithoutEmailsInput
  associatedContact: ContactAtAddressUpdateManyWithoutEmailInput
  copy: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  imap_accessToken: NullableStringFieldUpdateOperationsInput
  imap_authPass: NullableStringFieldUpdateOperationsInput
  imap_authServer: NullableBoolFieldUpdateOperationsInput
  imap_authUser: NullableStringFieldUpdateOperationsInput
  imap_host: NullableStringFieldUpdateOperationsInput
  imap_port: NullableStringFieldUpdateOperationsInput
  imap_resyncDelay: IntFieldUpdateOperationsInput
  imap_secure: NullableBoolFieldUpdateOperationsInput
  imap_tslMinVersion: NullableStringFieldUpdateOperationsInput
  imap_tslRejectUnauthorized: NullableBoolFieldUpdateOperationsInput
  notifyFrom: NullableDateTimeFieldUpdateOperationsInput
  oauth2_accessToken: NullableStringFieldUpdateOperationsInput
  oauth2_authUser: NullableStringFieldUpdateOperationsInput
  oauth2_authorize: BoolFieldUpdateOperationsInput
  oauth2_expires: NullableDateTimeFieldUpdateOperationsInput
  oauth2_provider: StringFieldUpdateOperationsInput
  oauth2_refreshToken: NullableStringFieldUpdateOperationsInput
  path: NullableStringFieldUpdateOperationsInput
  primary: BoolFieldUpdateOperationsInput
  public: BoolFieldUpdateOperationsInput
  smtp_accessToken: NullableStringFieldUpdateOperationsInput
  smtp_authPass: NullableStringFieldUpdateOperationsInput
  smtp_authServer: NullableBoolFieldUpdateOperationsInput
  smtp_authUser: NullableStringFieldUpdateOperationsInput
  smtp_host: NullableStringFieldUpdateOperationsInput
  smtp_port: NullableStringFieldUpdateOperationsInput
  smtp_secure: NullableBoolFieldUpdateOperationsInput
  smtp_tslMinVersion: NullableStringFieldUpdateOperationsInput
  smtp_tslRejectUnauthorized: NullableBoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  verified: BoolFieldUpdateOperationsInput
}

input EmailUpsertWithWhereUniqueWithoutAccountInput {
  create: EmailCreateWithoutAccountInput!
  update: EmailUpdateWithoutAccountInput!
  where: EmailWhereUniqueInput!
}

input EmailUpsertWithWhereUniqueWithoutDomainInput {
  create: EmailCreateWithoutDomainInput!
  update: EmailUpdateWithoutDomainInput!
  where: EmailWhereUniqueInput!
}

input EmailUpsertWithoutAssociatedContactInput {
  create: EmailCreateWithoutAssociatedContactInput!
  update: EmailUpdateWithoutAssociatedContactInput!
}

input EmailWhereInput {
  AND: [EmailWhereInput!]
  NOT: [EmailWhereInput!]
  OR: [EmailWhereInput!]
  account: AccountRelationFilter
  accountId: StringNullableFilter
  associatedContact: ContactAtAddressListRelationFilter
  copy: BoolFilter
  createdAt: DateTimeFilter
  deleted: DateTimeNullableFilter
  domain: DomainRelationFilter
  domainId: StringNullableFilter
  email: StringFilter
  id: StringFilter
  imap_accessToken: StringNullableFilter
  imap_authPass: StringNullableFilter
  imap_authServer: BoolNullableFilter
  imap_authUser: StringNullableFilter
  imap_host: StringNullableFilter
  imap_port: StringNullableFilter
  imap_resyncDelay: IntFilter
  imap_secure: BoolNullableFilter
  imap_tslMinVersion: StringNullableFilter
  imap_tslRejectUnauthorized: BoolNullableFilter
  notifyFrom: DateTimeNullableFilter
  oauth2_accessToken: StringNullableFilter
  oauth2_authUser: StringNullableFilter
  oauth2_authorize: BoolFilter
  oauth2_expires: DateTimeNullableFilter
  oauth2_provider: StringFilter
  oauth2_refreshToken: StringNullableFilter
  path: StringNullableFilter
  primary: BoolFilter
  public: BoolFilter
  smtp_accessToken: StringNullableFilter
  smtp_authPass: StringNullableFilter
  smtp_authServer: BoolNullableFilter
  smtp_authUser: StringNullableFilter
  smtp_host: StringNullableFilter
  smtp_port: StringNullableFilter
  smtp_secure: BoolNullableFilter
  smtp_tslMinVersion: StringNullableFilter
  smtp_tslRejectUnauthorized: BoolNullableFilter
  updatedAt: DateTimeFilter
  verified: BoolFilter
}

input EmailWhereUniqueInput {
  email: String
  id: String
}

input EnumAccountTypeFieldUpdateOperationsInput {
  set: AccountType
}

input EnumAccountTypeFilter {
  equals: AccountType
  in: [AccountType!]
  not: NestedEnumAccountTypeFilter
  notIn: [AccountType!]
}

input EnumAccountTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumAccountTypeFilter
  _min: NestedEnumAccountTypeFilter
  equals: AccountType
  in: [AccountType!]
  not: NestedEnumAccountTypeWithAggregatesFilter
  notIn: [AccountType!]
}

input EnumAddressTypeFieldUpdateOperationsInput {
  set: AddressType
}

input EnumAddressTypeFilter {
  equals: AddressType
  in: [AddressType!]
  not: NestedEnumAddressTypeFilter
  notIn: [AddressType!]
}

input EnumAddressTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumAddressTypeFilter
  _min: NestedEnumAddressTypeFilter
  equals: AddressType
  in: [AddressType!]
  not: NestedEnumAddressTypeWithAggregatesFilter
  notIn: [AddressType!]
}

input EnumFeatureTypeFieldUpdateOperationsInput {
  set: FeatureType
}

input EnumFeatureTypeFilter {
  equals: FeatureType
  in: [FeatureType!]
  not: NestedEnumFeatureTypeFilter
  notIn: [FeatureType!]
}

input EnumFeatureTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumFeatureTypeFilter
  _min: NestedEnumFeatureTypeFilter
  equals: FeatureType
  in: [FeatureType!]
  not: NestedEnumFeatureTypeWithAggregatesFilter
  notIn: [FeatureType!]
}

input EnumLicenseFieldUpdateOperationsInput {
  set: License
}

input EnumLicenseFilter {
  equals: License
  in: [License!]
  not: NestedEnumLicenseFilter
  notIn: [License!]
}

input EnumLicenseTypeFieldUpdateOperationsInput {
  set: LicenseType
}

input EnumLicenseTypeFilter {
  equals: LicenseType
  in: [LicenseType!]
  not: NestedEnumLicenseTypeFilter
  notIn: [LicenseType!]
}

input EnumLicenseTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumLicenseTypeFilter
  _min: NestedEnumLicenseTypeFilter
  equals: LicenseType
  in: [LicenseType!]
  not: NestedEnumLicenseTypeWithAggregatesFilter
  notIn: [LicenseType!]
}

input EnumLicenseWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumLicenseFilter
  _min: NestedEnumLicenseFilter
  equals: License
  in: [License!]
  not: NestedEnumLicenseWithAggregatesFilter
  notIn: [License!]
}

input EnumTitleNullableFilter {
  equals: Title
  in: [Title!]
  not: NestedEnumTitleNullableFilter
  notIn: [Title!]
}

input EnumTitleNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumTitleNullableFilter
  _min: NestedEnumTitleNullableFilter
  equals: Title
  in: [Title!]
  not: NestedEnumTitleNullableWithAggregatesFilter
  notIn: [Title!]
}

input EnumTokenTypeFieldUpdateOperationsInput {
  set: TokenType
}

input EnumTokenTypeFilter {
  equals: TokenType
  in: [TokenType!]
  not: NestedEnumTokenTypeFilter
  notIn: [TokenType!]
}

input EnumTokenTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumTokenTypeFilter
  _min: NestedEnumTokenTypeFilter
  equals: TokenType
  in: [TokenType!]
  not: NestedEnumTokenTypeWithAggregatesFilter
  notIn: [TokenType!]
}

input EnumdnsTypeFieldUpdateOperationsInput {
  set: dnsType
}

input EnumdnsTypeFilter {
  equals: dnsType
  in: [dnsType!]
  not: NestedEnumdnsTypeFilter
  notIn: [dnsType!]
}

input EnumdnsTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumdnsTypeFilter
  _min: NestedEnumdnsTypeFilter
  equals: dnsType
  in: [dnsType!]
  not: NestedEnumdnsTypeWithAggregatesFilter
  notIn: [dnsType!]
}

type Feature {
  _count: FeatureCount
  createdAt: DateTime!
  deleted: DateTime
  featureOfAddress(
    cursor: FeatureOfAddressWhereUniqueInput
    distinct: [FeatureOfAddressScalarFieldEnum!]
    orderBy: [FeatureOfAddressOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: FeatureOfAddressWhereInput
  ): [FeatureOfAddress!]!
  featureOfRoom(
    cursor: FeatureOfRoomWhereUniqueInput
    distinct: [FeatureOfRoomScalarFieldEnum!]
    orderBy: [FeatureOfRoomOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: FeatureOfRoomWhereInput
  ): [FeatureOfRoom!]!
  id: String!
  name: String!
  type: FeatureType!
  updatedAt: DateTime!
}

type FeatureCount {
  featureOfAddress: Int!
  featureOfRoom: Int!
}

type FeatureCountAggregate {
  _all: Int!
  createdAt: Int!
  deleted: Int!
  id: Int!
  name: Int!
  type: Int!
  updatedAt: Int!
}

input FeatureCountOrderByAggregateInput {
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  name: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

input FeatureCreateInput {
  createdAt: DateTime
  deleted: DateTime
  featureOfAddress: FeatureOfAddressCreateNestedManyWithoutFeatureInput
  featureOfRoom: FeatureOfRoomCreateNestedManyWithoutFeatureInput
  id: String
  name: String!
  type: FeatureType!
  updatedAt: DateTime
}

input FeatureCreateManyInput {
  createdAt: DateTime
  deleted: DateTime
  id: String
  name: String!
  type: FeatureType!
  updatedAt: DateTime
}

input FeatureCreateNestedOneWithoutFeatureOfAddressInput {
  connect: FeatureWhereUniqueInput
  connectOrCreate: FeatureCreateOrConnectWithoutFeatureOfAddressInput
  create: FeatureCreateWithoutFeatureOfAddressInput
}

input FeatureCreateNestedOneWithoutFeatureOfRoomInput {
  connect: FeatureWhereUniqueInput
  connectOrCreate: FeatureCreateOrConnectWithoutFeatureOfRoomInput
  create: FeatureCreateWithoutFeatureOfRoomInput
}

input FeatureCreateOrConnectWithoutFeatureOfAddressInput {
  create: FeatureCreateWithoutFeatureOfAddressInput!
  where: FeatureWhereUniqueInput!
}

input FeatureCreateOrConnectWithoutFeatureOfRoomInput {
  create: FeatureCreateWithoutFeatureOfRoomInput!
  where: FeatureWhereUniqueInput!
}

input FeatureCreateWithoutFeatureOfAddressInput {
  createdAt: DateTime
  deleted: DateTime
  featureOfRoom: FeatureOfRoomCreateNestedManyWithoutFeatureInput
  id: String
  name: String!
  type: FeatureType!
  updatedAt: DateTime
}

input FeatureCreateWithoutFeatureOfRoomInput {
  createdAt: DateTime
  deleted: DateTime
  featureOfAddress: FeatureOfAddressCreateNestedManyWithoutFeatureInput
  id: String
  name: String!
  type: FeatureType!
  updatedAt: DateTime
}

type FeatureGroupBy {
  _count: FeatureCountAggregate
  _max: FeatureMaxAggregate
  _min: FeatureMinAggregate
  createdAt: DateTime!
  deleted: DateTime
  id: String!
  name: String!
  type: FeatureType!
  updatedAt: DateTime!
}

type FeatureMaxAggregate {
  createdAt: DateTime
  deleted: DateTime
  id: String
  name: String
  type: FeatureType
  updatedAt: DateTime
}

input FeatureMaxOrderByAggregateInput {
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  name: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

type FeatureMinAggregate {
  createdAt: DateTime
  deleted: DateTime
  id: String
  name: String
  type: FeatureType
  updatedAt: DateTime
}

input FeatureMinOrderByAggregateInput {
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  name: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

type FeatureOfAddress {
  address: Address!
  addressId: String!
  createdAt: DateTime!
  data: JSON
  deleted: DateTime
  feature: Feature!
  featureId: String!
  updatedAt: DateTime!
}

input FeatureOfAddressAddressIdFeatureIdCompoundUniqueInput {
  addressId: String!
  featureId: String!
}

type FeatureOfAddressCountAggregate {
  _all: Int!
  addressId: Int!
  createdAt: Int!
  data: Int!
  deleted: Int!
  featureId: Int!
  updatedAt: Int!
}

input FeatureOfAddressCountOrderByAggregateInput {
  addressId: SortOrder
  createdAt: SortOrder
  data: SortOrder
  deleted: SortOrder
  featureId: SortOrder
  updatedAt: SortOrder
}

input FeatureOfAddressCreateInput {
  address: AddressCreateNestedOneWithoutFeaturesOfBuisnessInput!
  createdAt: DateTime
  data: JSON
  deleted: DateTime
  feature: FeatureCreateNestedOneWithoutFeatureOfAddressInput!
  updatedAt: DateTime
}

input FeatureOfAddressCreateManyAddressInput {
  createdAt: DateTime
  data: JSON
  deleted: DateTime
  featureId: String!
  updatedAt: DateTime
}

input FeatureOfAddressCreateManyAddressInputEnvelope {
  data: [FeatureOfAddressCreateManyAddressInput!]!
  skipDuplicates: Boolean
}

input FeatureOfAddressCreateManyFeatureInput {
  addressId: String!
  createdAt: DateTime
  data: JSON
  deleted: DateTime
  updatedAt: DateTime
}

input FeatureOfAddressCreateManyFeatureInputEnvelope {
  data: [FeatureOfAddressCreateManyFeatureInput!]!
  skipDuplicates: Boolean
}

input FeatureOfAddressCreateManyInput {
  addressId: String!
  createdAt: DateTime
  data: JSON
  deleted: DateTime
  featureId: String!
  updatedAt: DateTime
}

input FeatureOfAddressCreateNestedManyWithoutAddressInput {
  connect: [FeatureOfAddressWhereUniqueInput!]
  connectOrCreate: [FeatureOfAddressCreateOrConnectWithoutAddressInput!]
  create: [FeatureOfAddressCreateWithoutAddressInput!]
  createMany: FeatureOfAddressCreateManyAddressInputEnvelope
}

input FeatureOfAddressCreateNestedManyWithoutFeatureInput {
  connect: [FeatureOfAddressWhereUniqueInput!]
  connectOrCreate: [FeatureOfAddressCreateOrConnectWithoutFeatureInput!]
  create: [FeatureOfAddressCreateWithoutFeatureInput!]
  createMany: FeatureOfAddressCreateManyFeatureInputEnvelope
}

input FeatureOfAddressCreateOrConnectWithoutAddressInput {
  create: FeatureOfAddressCreateWithoutAddressInput!
  where: FeatureOfAddressWhereUniqueInput!
}

input FeatureOfAddressCreateOrConnectWithoutFeatureInput {
  create: FeatureOfAddressCreateWithoutFeatureInput!
  where: FeatureOfAddressWhereUniqueInput!
}

input FeatureOfAddressCreateWithoutAddressInput {
  createdAt: DateTime
  data: JSON
  deleted: DateTime
  feature: FeatureCreateNestedOneWithoutFeatureOfAddressInput!
  updatedAt: DateTime
}

input FeatureOfAddressCreateWithoutFeatureInput {
  address: AddressCreateNestedOneWithoutFeaturesOfBuisnessInput!
  createdAt: DateTime
  data: JSON
  deleted: DateTime
  updatedAt: DateTime
}

type FeatureOfAddressGroupBy {
  _count: FeatureOfAddressCountAggregate
  _max: FeatureOfAddressMaxAggregate
  _min: FeatureOfAddressMinAggregate
  addressId: String!
  createdAt: DateTime!
  data: JSON
  deleted: DateTime
  featureId: String!
  updatedAt: DateTime!
}

input FeatureOfAddressListRelationFilter {
  every: FeatureOfAddressWhereInput
  none: FeatureOfAddressWhereInput
  some: FeatureOfAddressWhereInput
}

type FeatureOfAddressMaxAggregate {
  addressId: String
  createdAt: DateTime
  deleted: DateTime
  featureId: String
  updatedAt: DateTime
}

input FeatureOfAddressMaxOrderByAggregateInput {
  addressId: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  featureId: SortOrder
  updatedAt: SortOrder
}

type FeatureOfAddressMinAggregate {
  addressId: String
  createdAt: DateTime
  deleted: DateTime
  featureId: String
  updatedAt: DateTime
}

input FeatureOfAddressMinOrderByAggregateInput {
  addressId: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  featureId: SortOrder
  updatedAt: SortOrder
}

input FeatureOfAddressOrderByRelationAggregateInput {
  _count: SortOrder
}

enum FeatureOfAddressOrderByRelevanceFieldEnum {
  addressId
  featureId
}

input FeatureOfAddressOrderByRelevanceInput {
  fields: [FeatureOfAddressOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input FeatureOfAddressOrderByWithAggregationInput {
  _count: FeatureOfAddressCountOrderByAggregateInput
  _max: FeatureOfAddressMaxOrderByAggregateInput
  _min: FeatureOfAddressMinOrderByAggregateInput
  addressId: SortOrder
  createdAt: SortOrder
  data: SortOrder
  deleted: SortOrder
  featureId: SortOrder
  updatedAt: SortOrder
}

input FeatureOfAddressOrderByWithRelationAndSearchRelevanceInput {
  _relevance: FeatureOfAddressOrderByRelevanceInput
  address: AddressOrderByWithRelationAndSearchRelevanceInput
  addressId: SortOrder
  createdAt: SortOrder
  data: SortOrder
  deleted: SortOrder
  feature: FeatureOrderByWithRelationAndSearchRelevanceInput
  featureId: SortOrder
  updatedAt: SortOrder
}

enum FeatureOfAddressScalarFieldEnum {
  addressId
  createdAt
  data
  deleted
  featureId
  updatedAt
}

input FeatureOfAddressScalarWhereInput {
  AND: [FeatureOfAddressScalarWhereInput!]
  NOT: [FeatureOfAddressScalarWhereInput!]
  OR: [FeatureOfAddressScalarWhereInput!]
  addressId: StringFilter
  createdAt: DateTimeFilter
  data: JsonNullableFilter
  deleted: DateTimeNullableFilter
  featureId: StringFilter
  updatedAt: DateTimeFilter
}

input FeatureOfAddressScalarWhereWithAggregatesInput {
  AND: [FeatureOfAddressScalarWhereWithAggregatesInput!]
  NOT: [FeatureOfAddressScalarWhereWithAggregatesInput!]
  OR: [FeatureOfAddressScalarWhereWithAggregatesInput!]
  addressId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  data: JsonNullableWithAggregatesFilter
  deleted: DateTimeNullableWithAggregatesFilter
  featureId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input FeatureOfAddressUpdateInput {
  address: AddressUpdateOneRequiredWithoutFeaturesOfBuisnessInput
  createdAt: DateTimeFieldUpdateOperationsInput
  data: JSON
  deleted: NullableDateTimeFieldUpdateOperationsInput
  feature: FeatureUpdateOneRequiredWithoutFeatureOfAddressInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeatureOfAddressUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  data: JSON
  deleted: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeatureOfAddressUpdateManyWithWhereWithoutAddressInput {
  data: FeatureOfAddressUpdateManyMutationInput!
  where: FeatureOfAddressScalarWhereInput!
}

input FeatureOfAddressUpdateManyWithWhereWithoutFeatureInput {
  data: FeatureOfAddressUpdateManyMutationInput!
  where: FeatureOfAddressScalarWhereInput!
}

input FeatureOfAddressUpdateManyWithoutAddressInput {
  connect: [FeatureOfAddressWhereUniqueInput!]
  connectOrCreate: [FeatureOfAddressCreateOrConnectWithoutAddressInput!]
  create: [FeatureOfAddressCreateWithoutAddressInput!]
  createMany: FeatureOfAddressCreateManyAddressInputEnvelope
  delete: [FeatureOfAddressWhereUniqueInput!]
  deleteMany: [FeatureOfAddressScalarWhereInput!]
  disconnect: [FeatureOfAddressWhereUniqueInput!]
  set: [FeatureOfAddressWhereUniqueInput!]
  update: [FeatureOfAddressUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [FeatureOfAddressUpdateManyWithWhereWithoutAddressInput!]
  upsert: [FeatureOfAddressUpsertWithWhereUniqueWithoutAddressInput!]
}

input FeatureOfAddressUpdateManyWithoutFeatureInput {
  connect: [FeatureOfAddressWhereUniqueInput!]
  connectOrCreate: [FeatureOfAddressCreateOrConnectWithoutFeatureInput!]
  create: [FeatureOfAddressCreateWithoutFeatureInput!]
  createMany: FeatureOfAddressCreateManyFeatureInputEnvelope
  delete: [FeatureOfAddressWhereUniqueInput!]
  deleteMany: [FeatureOfAddressScalarWhereInput!]
  disconnect: [FeatureOfAddressWhereUniqueInput!]
  set: [FeatureOfAddressWhereUniqueInput!]
  update: [FeatureOfAddressUpdateWithWhereUniqueWithoutFeatureInput!]
  updateMany: [FeatureOfAddressUpdateManyWithWhereWithoutFeatureInput!]
  upsert: [FeatureOfAddressUpsertWithWhereUniqueWithoutFeatureInput!]
}

input FeatureOfAddressUpdateWithWhereUniqueWithoutAddressInput {
  data: FeatureOfAddressUpdateWithoutAddressInput!
  where: FeatureOfAddressWhereUniqueInput!
}

input FeatureOfAddressUpdateWithWhereUniqueWithoutFeatureInput {
  data: FeatureOfAddressUpdateWithoutFeatureInput!
  where: FeatureOfAddressWhereUniqueInput!
}

input FeatureOfAddressUpdateWithoutAddressInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  data: JSON
  deleted: NullableDateTimeFieldUpdateOperationsInput
  feature: FeatureUpdateOneRequiredWithoutFeatureOfAddressInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeatureOfAddressUpdateWithoutFeatureInput {
  address: AddressUpdateOneRequiredWithoutFeaturesOfBuisnessInput
  createdAt: DateTimeFieldUpdateOperationsInput
  data: JSON
  deleted: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeatureOfAddressUpsertWithWhereUniqueWithoutAddressInput {
  create: FeatureOfAddressCreateWithoutAddressInput!
  update: FeatureOfAddressUpdateWithoutAddressInput!
  where: FeatureOfAddressWhereUniqueInput!
}

input FeatureOfAddressUpsertWithWhereUniqueWithoutFeatureInput {
  create: FeatureOfAddressCreateWithoutFeatureInput!
  update: FeatureOfAddressUpdateWithoutFeatureInput!
  where: FeatureOfAddressWhereUniqueInput!
}

input FeatureOfAddressWhereInput {
  AND: [FeatureOfAddressWhereInput!]
  NOT: [FeatureOfAddressWhereInput!]
  OR: [FeatureOfAddressWhereInput!]
  address: AddressRelationFilter
  addressId: StringFilter
  createdAt: DateTimeFilter
  data: JsonNullableFilter
  deleted: DateTimeNullableFilter
  feature: FeatureRelationFilter
  featureId: StringFilter
  updatedAt: DateTimeFilter
}

input FeatureOfAddressWhereUniqueInput {
  addressId_featureId: FeatureOfAddressAddressIdFeatureIdCompoundUniqueInput
}

type FeatureOfRoom {
  createdAt: DateTime!
  data: JSON
  deleted: DateTime
  feature: Feature!
  featureId: String!
  room: Room!
  roomId: String!
  updatedAt: DateTime!
}

type FeatureOfRoomCountAggregate {
  _all: Int!
  createdAt: Int!
  data: Int!
  deleted: Int!
  featureId: Int!
  roomId: Int!
  updatedAt: Int!
}

input FeatureOfRoomCountOrderByAggregateInput {
  createdAt: SortOrder
  data: SortOrder
  deleted: SortOrder
  featureId: SortOrder
  roomId: SortOrder
  updatedAt: SortOrder
}

input FeatureOfRoomCreateInput {
  createdAt: DateTime
  data: JSON
  deleted: DateTime
  feature: FeatureCreateNestedOneWithoutFeatureOfRoomInput!
  room: RoomCreateNestedOneWithoutFeaturesOfRoomInput!
  updatedAt: DateTime
}

input FeatureOfRoomCreateManyFeatureInput {
  createdAt: DateTime
  data: JSON
  deleted: DateTime
  roomId: String!
  updatedAt: DateTime
}

input FeatureOfRoomCreateManyFeatureInputEnvelope {
  data: [FeatureOfRoomCreateManyFeatureInput!]!
  skipDuplicates: Boolean
}

input FeatureOfRoomCreateManyInput {
  createdAt: DateTime
  data: JSON
  deleted: DateTime
  featureId: String!
  roomId: String!
  updatedAt: DateTime
}

input FeatureOfRoomCreateManyRoomInput {
  createdAt: DateTime
  data: JSON
  deleted: DateTime
  featureId: String!
  updatedAt: DateTime
}

input FeatureOfRoomCreateManyRoomInputEnvelope {
  data: [FeatureOfRoomCreateManyRoomInput!]!
  skipDuplicates: Boolean
}

input FeatureOfRoomCreateNestedManyWithoutFeatureInput {
  connect: [FeatureOfRoomWhereUniqueInput!]
  connectOrCreate: [FeatureOfRoomCreateOrConnectWithoutFeatureInput!]
  create: [FeatureOfRoomCreateWithoutFeatureInput!]
  createMany: FeatureOfRoomCreateManyFeatureInputEnvelope
}

input FeatureOfRoomCreateNestedManyWithoutRoomInput {
  connect: [FeatureOfRoomWhereUniqueInput!]
  connectOrCreate: [FeatureOfRoomCreateOrConnectWithoutRoomInput!]
  create: [FeatureOfRoomCreateWithoutRoomInput!]
  createMany: FeatureOfRoomCreateManyRoomInputEnvelope
}

input FeatureOfRoomCreateOrConnectWithoutFeatureInput {
  create: FeatureOfRoomCreateWithoutFeatureInput!
  where: FeatureOfRoomWhereUniqueInput!
}

input FeatureOfRoomCreateOrConnectWithoutRoomInput {
  create: FeatureOfRoomCreateWithoutRoomInput!
  where: FeatureOfRoomWhereUniqueInput!
}

input FeatureOfRoomCreateWithoutFeatureInput {
  createdAt: DateTime
  data: JSON
  deleted: DateTime
  room: RoomCreateNestedOneWithoutFeaturesOfRoomInput!
  updatedAt: DateTime
}

input FeatureOfRoomCreateWithoutRoomInput {
  createdAt: DateTime
  data: JSON
  deleted: DateTime
  feature: FeatureCreateNestedOneWithoutFeatureOfRoomInput!
  updatedAt: DateTime
}

type FeatureOfRoomGroupBy {
  _count: FeatureOfRoomCountAggregate
  _max: FeatureOfRoomMaxAggregate
  _min: FeatureOfRoomMinAggregate
  createdAt: DateTime!
  data: JSON
  deleted: DateTime
  featureId: String!
  roomId: String!
  updatedAt: DateTime!
}

input FeatureOfRoomListRelationFilter {
  every: FeatureOfRoomWhereInput
  none: FeatureOfRoomWhereInput
  some: FeatureOfRoomWhereInput
}

type FeatureOfRoomMaxAggregate {
  createdAt: DateTime
  deleted: DateTime
  featureId: String
  roomId: String
  updatedAt: DateTime
}

input FeatureOfRoomMaxOrderByAggregateInput {
  createdAt: SortOrder
  deleted: SortOrder
  featureId: SortOrder
  roomId: SortOrder
  updatedAt: SortOrder
}

type FeatureOfRoomMinAggregate {
  createdAt: DateTime
  deleted: DateTime
  featureId: String
  roomId: String
  updatedAt: DateTime
}

input FeatureOfRoomMinOrderByAggregateInput {
  createdAt: SortOrder
  deleted: SortOrder
  featureId: SortOrder
  roomId: SortOrder
  updatedAt: SortOrder
}

input FeatureOfRoomOrderByRelationAggregateInput {
  _count: SortOrder
}

enum FeatureOfRoomOrderByRelevanceFieldEnum {
  featureId
  roomId
}

input FeatureOfRoomOrderByRelevanceInput {
  fields: [FeatureOfRoomOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input FeatureOfRoomOrderByWithAggregationInput {
  _count: FeatureOfRoomCountOrderByAggregateInput
  _max: FeatureOfRoomMaxOrderByAggregateInput
  _min: FeatureOfRoomMinOrderByAggregateInput
  createdAt: SortOrder
  data: SortOrder
  deleted: SortOrder
  featureId: SortOrder
  roomId: SortOrder
  updatedAt: SortOrder
}

input FeatureOfRoomOrderByWithRelationAndSearchRelevanceInput {
  _relevance: FeatureOfRoomOrderByRelevanceInput
  createdAt: SortOrder
  data: SortOrder
  deleted: SortOrder
  feature: FeatureOrderByWithRelationAndSearchRelevanceInput
  featureId: SortOrder
  room: RoomOrderByWithRelationAndSearchRelevanceInput
  roomId: SortOrder
  updatedAt: SortOrder
}

input FeatureOfRoomRoomIdFeatureIdCompoundUniqueInput {
  featureId: String!
  roomId: String!
}

enum FeatureOfRoomScalarFieldEnum {
  createdAt
  data
  deleted
  featureId
  roomId
  updatedAt
}

input FeatureOfRoomScalarWhereInput {
  AND: [FeatureOfRoomScalarWhereInput!]
  NOT: [FeatureOfRoomScalarWhereInput!]
  OR: [FeatureOfRoomScalarWhereInput!]
  createdAt: DateTimeFilter
  data: JsonNullableFilter
  deleted: DateTimeNullableFilter
  featureId: StringFilter
  roomId: StringFilter
  updatedAt: DateTimeFilter
}

input FeatureOfRoomScalarWhereWithAggregatesInput {
  AND: [FeatureOfRoomScalarWhereWithAggregatesInput!]
  NOT: [FeatureOfRoomScalarWhereWithAggregatesInput!]
  OR: [FeatureOfRoomScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  data: JsonNullableWithAggregatesFilter
  deleted: DateTimeNullableWithAggregatesFilter
  featureId: StringWithAggregatesFilter
  roomId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input FeatureOfRoomUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  data: JSON
  deleted: NullableDateTimeFieldUpdateOperationsInput
  feature: FeatureUpdateOneRequiredWithoutFeatureOfRoomInput
  room: RoomUpdateOneRequiredWithoutFeaturesOfRoomInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeatureOfRoomUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  data: JSON
  deleted: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeatureOfRoomUpdateManyWithWhereWithoutFeatureInput {
  data: FeatureOfRoomUpdateManyMutationInput!
  where: FeatureOfRoomScalarWhereInput!
}

input FeatureOfRoomUpdateManyWithWhereWithoutRoomInput {
  data: FeatureOfRoomUpdateManyMutationInput!
  where: FeatureOfRoomScalarWhereInput!
}

input FeatureOfRoomUpdateManyWithoutFeatureInput {
  connect: [FeatureOfRoomWhereUniqueInput!]
  connectOrCreate: [FeatureOfRoomCreateOrConnectWithoutFeatureInput!]
  create: [FeatureOfRoomCreateWithoutFeatureInput!]
  createMany: FeatureOfRoomCreateManyFeatureInputEnvelope
  delete: [FeatureOfRoomWhereUniqueInput!]
  deleteMany: [FeatureOfRoomScalarWhereInput!]
  disconnect: [FeatureOfRoomWhereUniqueInput!]
  set: [FeatureOfRoomWhereUniqueInput!]
  update: [FeatureOfRoomUpdateWithWhereUniqueWithoutFeatureInput!]
  updateMany: [FeatureOfRoomUpdateManyWithWhereWithoutFeatureInput!]
  upsert: [FeatureOfRoomUpsertWithWhereUniqueWithoutFeatureInput!]
}

input FeatureOfRoomUpdateManyWithoutRoomInput {
  connect: [FeatureOfRoomWhereUniqueInput!]
  connectOrCreate: [FeatureOfRoomCreateOrConnectWithoutRoomInput!]
  create: [FeatureOfRoomCreateWithoutRoomInput!]
  createMany: FeatureOfRoomCreateManyRoomInputEnvelope
  delete: [FeatureOfRoomWhereUniqueInput!]
  deleteMany: [FeatureOfRoomScalarWhereInput!]
  disconnect: [FeatureOfRoomWhereUniqueInput!]
  set: [FeatureOfRoomWhereUniqueInput!]
  update: [FeatureOfRoomUpdateWithWhereUniqueWithoutRoomInput!]
  updateMany: [FeatureOfRoomUpdateManyWithWhereWithoutRoomInput!]
  upsert: [FeatureOfRoomUpsertWithWhereUniqueWithoutRoomInput!]
}

input FeatureOfRoomUpdateWithWhereUniqueWithoutFeatureInput {
  data: FeatureOfRoomUpdateWithoutFeatureInput!
  where: FeatureOfRoomWhereUniqueInput!
}

input FeatureOfRoomUpdateWithWhereUniqueWithoutRoomInput {
  data: FeatureOfRoomUpdateWithoutRoomInput!
  where: FeatureOfRoomWhereUniqueInput!
}

input FeatureOfRoomUpdateWithoutFeatureInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  data: JSON
  deleted: NullableDateTimeFieldUpdateOperationsInput
  room: RoomUpdateOneRequiredWithoutFeaturesOfRoomInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeatureOfRoomUpdateWithoutRoomInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  data: JSON
  deleted: NullableDateTimeFieldUpdateOperationsInput
  feature: FeatureUpdateOneRequiredWithoutFeatureOfRoomInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeatureOfRoomUpsertWithWhereUniqueWithoutFeatureInput {
  create: FeatureOfRoomCreateWithoutFeatureInput!
  update: FeatureOfRoomUpdateWithoutFeatureInput!
  where: FeatureOfRoomWhereUniqueInput!
}

input FeatureOfRoomUpsertWithWhereUniqueWithoutRoomInput {
  create: FeatureOfRoomCreateWithoutRoomInput!
  update: FeatureOfRoomUpdateWithoutRoomInput!
  where: FeatureOfRoomWhereUniqueInput!
}

input FeatureOfRoomWhereInput {
  AND: [FeatureOfRoomWhereInput!]
  NOT: [FeatureOfRoomWhereInput!]
  OR: [FeatureOfRoomWhereInput!]
  createdAt: DateTimeFilter
  data: JsonNullableFilter
  deleted: DateTimeNullableFilter
  feature: FeatureRelationFilter
  featureId: StringFilter
  room: RoomRelationFilter
  roomId: StringFilter
  updatedAt: DateTimeFilter
}

input FeatureOfRoomWhereUniqueInput {
  roomId_featureId: FeatureOfRoomRoomIdFeatureIdCompoundUniqueInput
}

enum FeatureOrderByRelevanceFieldEnum {
  id
  name
}

input FeatureOrderByRelevanceInput {
  fields: [FeatureOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input FeatureOrderByWithAggregationInput {
  _count: FeatureCountOrderByAggregateInput
  _max: FeatureMaxOrderByAggregateInput
  _min: FeatureMinOrderByAggregateInput
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  name: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

input FeatureOrderByWithRelationAndSearchRelevanceInput {
  _relevance: FeatureOrderByRelevanceInput
  createdAt: SortOrder
  deleted: SortOrder
  featureOfAddress: FeatureOfAddressOrderByRelationAggregateInput
  featureOfRoom: FeatureOfRoomOrderByRelationAggregateInput
  id: SortOrder
  name: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

input FeatureRelationFilter {
  is: FeatureWhereInput
  isNot: FeatureWhereInput
}

enum FeatureScalarFieldEnum {
  createdAt
  deleted
  id
  name
  type
  updatedAt
}

input FeatureScalarWhereWithAggregatesInput {
  AND: [FeatureScalarWhereWithAggregatesInput!]
  NOT: [FeatureScalarWhereWithAggregatesInput!]
  OR: [FeatureScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  deleted: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  type: EnumFeatureTypeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

enum FeatureType {
  BOOLEAN
  NUMBER
  STRING
}

input FeatureUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  featureOfAddress: FeatureOfAddressUpdateManyWithoutFeatureInput
  featureOfRoom: FeatureOfRoomUpdateManyWithoutFeatureInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: EnumFeatureTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeatureUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: EnumFeatureTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeatureUpdateOneRequiredWithoutFeatureOfAddressInput {
  connect: FeatureWhereUniqueInput
  connectOrCreate: FeatureCreateOrConnectWithoutFeatureOfAddressInput
  create: FeatureCreateWithoutFeatureOfAddressInput
  update: FeatureUpdateWithoutFeatureOfAddressInput
  upsert: FeatureUpsertWithoutFeatureOfAddressInput
}

input FeatureUpdateOneRequiredWithoutFeatureOfRoomInput {
  connect: FeatureWhereUniqueInput
  connectOrCreate: FeatureCreateOrConnectWithoutFeatureOfRoomInput
  create: FeatureCreateWithoutFeatureOfRoomInput
  update: FeatureUpdateWithoutFeatureOfRoomInput
  upsert: FeatureUpsertWithoutFeatureOfRoomInput
}

input FeatureUpdateWithoutFeatureOfAddressInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  featureOfRoom: FeatureOfRoomUpdateManyWithoutFeatureInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: EnumFeatureTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeatureUpdateWithoutFeatureOfRoomInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  featureOfAddress: FeatureOfAddressUpdateManyWithoutFeatureInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  type: EnumFeatureTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FeatureUpsertWithoutFeatureOfAddressInput {
  create: FeatureCreateWithoutFeatureOfAddressInput!
  update: FeatureUpdateWithoutFeatureOfAddressInput!
}

input FeatureUpsertWithoutFeatureOfRoomInput {
  create: FeatureCreateWithoutFeatureOfRoomInput!
  update: FeatureUpdateWithoutFeatureOfRoomInput!
}

input FeatureWhereInput {
  AND: [FeatureWhereInput!]
  NOT: [FeatureWhereInput!]
  OR: [FeatureWhereInput!]
  createdAt: DateTimeFilter
  deleted: DateTimeNullableFilter
  featureOfAddress: FeatureOfAddressListRelationFilter
  featureOfRoom: FeatureOfRoomListRelationFilter
  id: StringFilter
  name: StringFilter
  type: EnumFeatureTypeFilter
  updatedAt: DateTimeFilter
}

input FeatureWhereUniqueInput {
  id: String
}

type Files {
  _count: FilesCount
  account(
    cursor: AccountWhereUniqueInput
    distinct: [AccountScalarFieldEnum!]
    orderBy: [AccountOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: AccountWhereInput
  ): [Account!]!
  createdAt: DateTime!
  deleted: DateTime
  id: String!
  name: String!
  rtw: RTW
  rtwId: String
  updatedAt: DateTime!
}

type FilesCount {
  account: Int!
}

type FilesCountAggregate {
  _all: Int!
  createdAt: Int!
  deleted: Int!
  id: Int!
  name: Int!
  rtwId: Int!
  updatedAt: Int!
}

input FilesCountOrderByAggregateInput {
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  name: SortOrder
  rtwId: SortOrder
  updatedAt: SortOrder
}

input FilesCreateInput {
  account: AccountCreateNestedManyWithoutFilesInput
  createdAt: DateTime
  deleted: DateTime
  id: String
  name: String!
  rtw: RTWCreateNestedOneWithoutFilesInput
  updatedAt: DateTime
}

input FilesCreateManyInput {
  createdAt: DateTime
  deleted: DateTime
  id: String
  name: String!
  rtwId: String
  updatedAt: DateTime
}

input FilesCreateManyRtwInput {
  createdAt: DateTime
  deleted: DateTime
  id: String
  name: String!
  updatedAt: DateTime
}

input FilesCreateManyRtwInputEnvelope {
  data: [FilesCreateManyRtwInput!]!
  skipDuplicates: Boolean
}

input FilesCreateNestedManyWithoutAccountInput {
  connect: [FilesWhereUniqueInput!]
  connectOrCreate: [FilesCreateOrConnectWithoutAccountInput!]
  create: [FilesCreateWithoutAccountInput!]
}

input FilesCreateNestedManyWithoutRtwInput {
  connect: [FilesWhereUniqueInput!]
  connectOrCreate: [FilesCreateOrConnectWithoutRtwInput!]
  create: [FilesCreateWithoutRtwInput!]
  createMany: FilesCreateManyRtwInputEnvelope
}

input FilesCreateOrConnectWithoutAccountInput {
  create: FilesCreateWithoutAccountInput!
  where: FilesWhereUniqueInput!
}

input FilesCreateOrConnectWithoutRtwInput {
  create: FilesCreateWithoutRtwInput!
  where: FilesWhereUniqueInput!
}

input FilesCreateWithoutAccountInput {
  createdAt: DateTime
  deleted: DateTime
  id: String
  name: String!
  rtw: RTWCreateNestedOneWithoutFilesInput
  updatedAt: DateTime
}

input FilesCreateWithoutRtwInput {
  account: AccountCreateNestedManyWithoutFilesInput
  createdAt: DateTime
  deleted: DateTime
  id: String
  name: String!
  updatedAt: DateTime
}

type FilesGroupBy {
  _count: FilesCountAggregate
  _max: FilesMaxAggregate
  _min: FilesMinAggregate
  createdAt: DateTime!
  deleted: DateTime
  id: String!
  name: String!
  rtwId: String
  updatedAt: DateTime!
}

input FilesListRelationFilter {
  every: FilesWhereInput
  none: FilesWhereInput
  some: FilesWhereInput
}

type FilesMaxAggregate {
  createdAt: DateTime
  deleted: DateTime
  id: String
  name: String
  rtwId: String
  updatedAt: DateTime
}

input FilesMaxOrderByAggregateInput {
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  name: SortOrder
  rtwId: SortOrder
  updatedAt: SortOrder
}

type FilesMinAggregate {
  createdAt: DateTime
  deleted: DateTime
  id: String
  name: String
  rtwId: String
  updatedAt: DateTime
}

input FilesMinOrderByAggregateInput {
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  name: SortOrder
  rtwId: SortOrder
  updatedAt: SortOrder
}

input FilesOrderByRelationAggregateInput {
  _count: SortOrder
}

enum FilesOrderByRelevanceFieldEnum {
  id
  name
  rtwId
}

input FilesOrderByRelevanceInput {
  fields: [FilesOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input FilesOrderByWithAggregationInput {
  _count: FilesCountOrderByAggregateInput
  _max: FilesMaxOrderByAggregateInput
  _min: FilesMinOrderByAggregateInput
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  name: SortOrder
  rtwId: SortOrder
  updatedAt: SortOrder
}

input FilesOrderByWithRelationAndSearchRelevanceInput {
  _relevance: FilesOrderByRelevanceInput
  account: AccountOrderByRelationAggregateInput
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  name: SortOrder
  rtw: RTWOrderByWithRelationAndSearchRelevanceInput
  rtwId: SortOrder
  updatedAt: SortOrder
}

enum FilesScalarFieldEnum {
  createdAt
  deleted
  id
  name
  rtwId
  updatedAt
}

input FilesScalarWhereInput {
  AND: [FilesScalarWhereInput!]
  NOT: [FilesScalarWhereInput!]
  OR: [FilesScalarWhereInput!]
  createdAt: DateTimeFilter
  deleted: DateTimeNullableFilter
  id: StringFilter
  name: StringFilter
  rtwId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input FilesScalarWhereWithAggregatesInput {
  AND: [FilesScalarWhereWithAggregatesInput!]
  NOT: [FilesScalarWhereWithAggregatesInput!]
  OR: [FilesScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  deleted: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  rtwId: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input FilesUpdateInput {
  account: AccountUpdateManyWithoutFilesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rtw: RTWUpdateOneWithoutFilesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FilesUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FilesUpdateManyWithWhereWithoutAccountInput {
  data: FilesUpdateManyMutationInput!
  where: FilesScalarWhereInput!
}

input FilesUpdateManyWithWhereWithoutRtwInput {
  data: FilesUpdateManyMutationInput!
  where: FilesScalarWhereInput!
}

input FilesUpdateManyWithoutAccountInput {
  connect: [FilesWhereUniqueInput!]
  connectOrCreate: [FilesCreateOrConnectWithoutAccountInput!]
  create: [FilesCreateWithoutAccountInput!]
  delete: [FilesWhereUniqueInput!]
  deleteMany: [FilesScalarWhereInput!]
  disconnect: [FilesWhereUniqueInput!]
  set: [FilesWhereUniqueInput!]
  update: [FilesUpdateWithWhereUniqueWithoutAccountInput!]
  updateMany: [FilesUpdateManyWithWhereWithoutAccountInput!]
  upsert: [FilesUpsertWithWhereUniqueWithoutAccountInput!]
}

input FilesUpdateManyWithoutRtwInput {
  connect: [FilesWhereUniqueInput!]
  connectOrCreate: [FilesCreateOrConnectWithoutRtwInput!]
  create: [FilesCreateWithoutRtwInput!]
  createMany: FilesCreateManyRtwInputEnvelope
  delete: [FilesWhereUniqueInput!]
  deleteMany: [FilesScalarWhereInput!]
  disconnect: [FilesWhereUniqueInput!]
  set: [FilesWhereUniqueInput!]
  update: [FilesUpdateWithWhereUniqueWithoutRtwInput!]
  updateMany: [FilesUpdateManyWithWhereWithoutRtwInput!]
  upsert: [FilesUpsertWithWhereUniqueWithoutRtwInput!]
}

input FilesUpdateWithWhereUniqueWithoutAccountInput {
  data: FilesUpdateWithoutAccountInput!
  where: FilesWhereUniqueInput!
}

input FilesUpdateWithWhereUniqueWithoutRtwInput {
  data: FilesUpdateWithoutRtwInput!
  where: FilesWhereUniqueInput!
}

input FilesUpdateWithoutAccountInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  rtw: RTWUpdateOneWithoutFilesInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FilesUpdateWithoutRtwInput {
  account: AccountUpdateManyWithoutFilesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input FilesUpsertWithWhereUniqueWithoutAccountInput {
  create: FilesCreateWithoutAccountInput!
  update: FilesUpdateWithoutAccountInput!
  where: FilesWhereUniqueInput!
}

input FilesUpsertWithWhereUniqueWithoutRtwInput {
  create: FilesCreateWithoutRtwInput!
  update: FilesUpdateWithoutRtwInput!
  where: FilesWhereUniqueInput!
}

input FilesWhereInput {
  AND: [FilesWhereInput!]
  NOT: [FilesWhereInput!]
  OR: [FilesWhereInput!]
  account: AccountListRelationFilter
  createdAt: DateTimeFilter
  deleted: DateTimeNullableFilter
  id: StringFilter
  name: StringFilter
  rtw: RTWRelationFilter
  rtwId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input FilesWhereUniqueInput {
  id: String
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

input JsonFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input JsonNullableFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input JsonNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedJsonNullableFilter
  _min: NestedJsonNullableFilter
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input JsonWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedJsonFilter
  _min: NestedJsonFilter
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

enum License {
  CCTV
  CP
  CVIT
  DS
  KH
  SG
  VI
}

enum LicenseType {
  FRONTLINE
  NON_FRONTLINE
}

type ManagersOnAccount {
  account: Account!
  accountId: String!
  createdAt: DateTime!
  managers: Account!
  managersId: String!
  updatedAt: DateTime!
}

input ManagersOnAccountAccountIdManagersIdCompoundUniqueInput {
  accountId: String!
  managersId: String!
}

type ManagersOnAccountCountAggregate {
  _all: Int!
  accountId: Int!
  createdAt: Int!
  managersId: Int!
  updatedAt: Int!
}

input ManagersOnAccountCountOrderByAggregateInput {
  accountId: SortOrder
  createdAt: SortOrder
  managersId: SortOrder
  updatedAt: SortOrder
}

input ManagersOnAccountCreateInput {
  account: AccountCreateNestedOneWithoutAccountsInput!
  createdAt: DateTime
  managers: AccountCreateNestedOneWithoutManagersInput!
  updatedAt: DateTime
}

input ManagersOnAccountCreateManyAccountInput {
  createdAt: DateTime
  managersId: String!
  updatedAt: DateTime
}

input ManagersOnAccountCreateManyAccountInputEnvelope {
  data: [ManagersOnAccountCreateManyAccountInput!]!
  skipDuplicates: Boolean
}

input ManagersOnAccountCreateManyInput {
  accountId: String!
  createdAt: DateTime
  managersId: String!
  updatedAt: DateTime
}

input ManagersOnAccountCreateManyManagersInput {
  accountId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input ManagersOnAccountCreateManyManagersInputEnvelope {
  data: [ManagersOnAccountCreateManyManagersInput!]!
  skipDuplicates: Boolean
}

input ManagersOnAccountCreateNestedManyWithoutAccountInput {
  connect: [ManagersOnAccountWhereUniqueInput!]
  connectOrCreate: [ManagersOnAccountCreateOrConnectWithoutAccountInput!]
  create: [ManagersOnAccountCreateWithoutAccountInput!]
  createMany: ManagersOnAccountCreateManyAccountInputEnvelope
}

input ManagersOnAccountCreateNestedManyWithoutManagersInput {
  connect: [ManagersOnAccountWhereUniqueInput!]
  connectOrCreate: [ManagersOnAccountCreateOrConnectWithoutManagersInput!]
  create: [ManagersOnAccountCreateWithoutManagersInput!]
  createMany: ManagersOnAccountCreateManyManagersInputEnvelope
}

input ManagersOnAccountCreateOrConnectWithoutAccountInput {
  create: ManagersOnAccountCreateWithoutAccountInput!
  where: ManagersOnAccountWhereUniqueInput!
}

input ManagersOnAccountCreateOrConnectWithoutManagersInput {
  create: ManagersOnAccountCreateWithoutManagersInput!
  where: ManagersOnAccountWhereUniqueInput!
}

input ManagersOnAccountCreateWithoutAccountInput {
  createdAt: DateTime
  managers: AccountCreateNestedOneWithoutManagersInput!
  updatedAt: DateTime
}

input ManagersOnAccountCreateWithoutManagersInput {
  account: AccountCreateNestedOneWithoutAccountsInput!
  createdAt: DateTime
  updatedAt: DateTime
}

type ManagersOnAccountGroupBy {
  _count: ManagersOnAccountCountAggregate
  _max: ManagersOnAccountMaxAggregate
  _min: ManagersOnAccountMinAggregate
  accountId: String!
  createdAt: DateTime!
  managersId: String!
  updatedAt: DateTime!
}

input ManagersOnAccountListRelationFilter {
  every: ManagersOnAccountWhereInput
  none: ManagersOnAccountWhereInput
  some: ManagersOnAccountWhereInput
}

type ManagersOnAccountMaxAggregate {
  accountId: String
  createdAt: DateTime
  managersId: String
  updatedAt: DateTime
}

input ManagersOnAccountMaxOrderByAggregateInput {
  accountId: SortOrder
  createdAt: SortOrder
  managersId: SortOrder
  updatedAt: SortOrder
}

type ManagersOnAccountMinAggregate {
  accountId: String
  createdAt: DateTime
  managersId: String
  updatedAt: DateTime
}

input ManagersOnAccountMinOrderByAggregateInput {
  accountId: SortOrder
  createdAt: SortOrder
  managersId: SortOrder
  updatedAt: SortOrder
}

input ManagersOnAccountOrderByRelationAggregateInput {
  _count: SortOrder
}

enum ManagersOnAccountOrderByRelevanceFieldEnum {
  accountId
  managersId
}

input ManagersOnAccountOrderByRelevanceInput {
  fields: [ManagersOnAccountOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input ManagersOnAccountOrderByWithAggregationInput {
  _count: ManagersOnAccountCountOrderByAggregateInput
  _max: ManagersOnAccountMaxOrderByAggregateInput
  _min: ManagersOnAccountMinOrderByAggregateInput
  accountId: SortOrder
  createdAt: SortOrder
  managersId: SortOrder
  updatedAt: SortOrder
}

input ManagersOnAccountOrderByWithRelationAndSearchRelevanceInput {
  _relevance: ManagersOnAccountOrderByRelevanceInput
  account: AccountOrderByWithRelationAndSearchRelevanceInput
  accountId: SortOrder
  createdAt: SortOrder
  managers: AccountOrderByWithRelationAndSearchRelevanceInput
  managersId: SortOrder
  updatedAt: SortOrder
}

enum ManagersOnAccountScalarFieldEnum {
  accountId
  createdAt
  managersId
  updatedAt
}

input ManagersOnAccountScalarWhereInput {
  AND: [ManagersOnAccountScalarWhereInput!]
  NOT: [ManagersOnAccountScalarWhereInput!]
  OR: [ManagersOnAccountScalarWhereInput!]
  accountId: StringFilter
  createdAt: DateTimeFilter
  managersId: StringFilter
  updatedAt: DateTimeFilter
}

input ManagersOnAccountScalarWhereWithAggregatesInput {
  AND: [ManagersOnAccountScalarWhereWithAggregatesInput!]
  NOT: [ManagersOnAccountScalarWhereWithAggregatesInput!]
  OR: [ManagersOnAccountScalarWhereWithAggregatesInput!]
  accountId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  managersId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input ManagersOnAccountUpdateInput {
  account: AccountUpdateOneRequiredWithoutAccountsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  managers: AccountUpdateOneRequiredWithoutManagersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ManagersOnAccountUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ManagersOnAccountUpdateManyWithWhereWithoutAccountInput {
  data: ManagersOnAccountUpdateManyMutationInput!
  where: ManagersOnAccountScalarWhereInput!
}

input ManagersOnAccountUpdateManyWithWhereWithoutManagersInput {
  data: ManagersOnAccountUpdateManyMutationInput!
  where: ManagersOnAccountScalarWhereInput!
}

input ManagersOnAccountUpdateManyWithoutAccountInput {
  connect: [ManagersOnAccountWhereUniqueInput!]
  connectOrCreate: [ManagersOnAccountCreateOrConnectWithoutAccountInput!]
  create: [ManagersOnAccountCreateWithoutAccountInput!]
  createMany: ManagersOnAccountCreateManyAccountInputEnvelope
  delete: [ManagersOnAccountWhereUniqueInput!]
  deleteMany: [ManagersOnAccountScalarWhereInput!]
  disconnect: [ManagersOnAccountWhereUniqueInput!]
  set: [ManagersOnAccountWhereUniqueInput!]
  update: [ManagersOnAccountUpdateWithWhereUniqueWithoutAccountInput!]
  updateMany: [ManagersOnAccountUpdateManyWithWhereWithoutAccountInput!]
  upsert: [ManagersOnAccountUpsertWithWhereUniqueWithoutAccountInput!]
}

input ManagersOnAccountUpdateManyWithoutManagersInput {
  connect: [ManagersOnAccountWhereUniqueInput!]
  connectOrCreate: [ManagersOnAccountCreateOrConnectWithoutManagersInput!]
  create: [ManagersOnAccountCreateWithoutManagersInput!]
  createMany: ManagersOnAccountCreateManyManagersInputEnvelope
  delete: [ManagersOnAccountWhereUniqueInput!]
  deleteMany: [ManagersOnAccountScalarWhereInput!]
  disconnect: [ManagersOnAccountWhereUniqueInput!]
  set: [ManagersOnAccountWhereUniqueInput!]
  update: [ManagersOnAccountUpdateWithWhereUniqueWithoutManagersInput!]
  updateMany: [ManagersOnAccountUpdateManyWithWhereWithoutManagersInput!]
  upsert: [ManagersOnAccountUpsertWithWhereUniqueWithoutManagersInput!]
}

input ManagersOnAccountUpdateWithWhereUniqueWithoutAccountInput {
  data: ManagersOnAccountUpdateWithoutAccountInput!
  where: ManagersOnAccountWhereUniqueInput!
}

input ManagersOnAccountUpdateWithWhereUniqueWithoutManagersInput {
  data: ManagersOnAccountUpdateWithoutManagersInput!
  where: ManagersOnAccountWhereUniqueInput!
}

input ManagersOnAccountUpdateWithoutAccountInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  managers: AccountUpdateOneRequiredWithoutManagersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ManagersOnAccountUpdateWithoutManagersInput {
  account: AccountUpdateOneRequiredWithoutAccountsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ManagersOnAccountUpsertWithWhereUniqueWithoutAccountInput {
  create: ManagersOnAccountCreateWithoutAccountInput!
  update: ManagersOnAccountUpdateWithoutAccountInput!
  where: ManagersOnAccountWhereUniqueInput!
}

input ManagersOnAccountUpsertWithWhereUniqueWithoutManagersInput {
  create: ManagersOnAccountCreateWithoutManagersInput!
  update: ManagersOnAccountUpdateWithoutManagersInput!
  where: ManagersOnAccountWhereUniqueInput!
}

input ManagersOnAccountWhereInput {
  AND: [ManagersOnAccountWhereInput!]
  NOT: [ManagersOnAccountWhereInput!]
  OR: [ManagersOnAccountWhereInput!]
  account: AccountRelationFilter
  accountId: StringFilter
  createdAt: DateTimeFilter
  managers: AccountRelationFilter
  managersId: StringFilter
  updatedAt: DateTimeFilter
}

input ManagersOnAccountWhereUniqueInput {
  accountId_managersId: ManagersOnAccountAccountIdManagersIdCompoundUniqueInput
}

type Mutation {
  createAccount(data: AccountCreateInput!): Account!
  createAddress(data: AddressCreateInput!): Address!
  createApplication(data: ApplicationCreateInput!): Application!
  createArrangement(data: ArrangementCreateInput!): Arrangement!
  createArrangementOfRoom(
    data: ArrangementOfRoomCreateInput!
  ): ArrangementOfRoom!
  createContactAtAddress(data: ContactAtAddressCreateInput!): ContactAtAddress!
  createDomain(data: DomainCreateInput!): Domain!
  createEmail(data: EmailCreateInput!): Email!
  createFeature(data: FeatureCreateInput!): Feature!
  createFeatureOfAddress(data: FeatureOfAddressCreateInput!): FeatureOfAddress!
  createFeatureOfRoom(data: FeatureOfRoomCreateInput!): FeatureOfRoom!
  createFiles(data: FilesCreateInput!): Files!
  createManagersOnAccount(
    data: ManagersOnAccountCreateInput!
  ): ManagersOnAccount!
  createManyAccount(
    data: [AccountCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  createManyAddress(
    data: [AddressCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  createManyApplication(
    data: [ApplicationCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  createManyArrangement(
    data: [ArrangementCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  createManyArrangementOfRoom(
    data: [ArrangementOfRoomCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  createManyContactAtAddress(
    data: [ContactAtAddressCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  createManyDomain(
    data: [DomainCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  createManyEmail(
    data: [EmailCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  createManyFeature(
    data: [FeatureCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  createManyFeatureOfAddress(
    data: [FeatureOfAddressCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  createManyFeatureOfRoom(
    data: [FeatureOfRoomCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  createManyFiles(
    data: [FilesCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  createManyManagersOnAccount(
    data: [ManagersOnAccountCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  createManyPhone(
    data: [PhoneCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  createManyRTW(
    data: [RTWCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  createManyRoom(
    data: [RoomCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  createManySIABadge(
    data: [SIABadgeCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  createManyStatus(
    data: [StatusCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  createManyStatusOnAccount(
    data: [StatusOnAccountCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  createManySubscription(
    data: [SubscriptionCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  createManySubscriptionOnAccount(
    data: [SubscriptionOnAccountCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  createManySubuserOnAccount(
    data: [SubuserOnAccountCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  createManyToken(
    data: [TokenCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  createManyTransaction(
    data: [TransactionCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  createManyVenueStyle(
    data: [VenueStyleCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  createPhone(data: PhoneCreateInput!): Phone!
  createRTW(data: RTWCreateInput!): RTW!
  createRoom(data: RoomCreateInput!): Room!
  createSIABadge(data: SIABadgeCreateInput!): SIABadge!
  createStatus(data: StatusCreateInput!): Status!
  createStatusOnAccount(data: StatusOnAccountCreateInput!): StatusOnAccount!
  createSubscription(data: SubscriptionCreateInput!): Subscription!
  createSubscriptionOnAccount(
    data: SubscriptionOnAccountCreateInput!
  ): SubscriptionOnAccount!
  createSubuserOnAccount(data: SubuserOnAccountCreateInput!): SubuserOnAccount!
  createToken(data: TokenCreateInput!): Token!
  createTransaction(data: TransactionCreateInput!): Transaction!
  createVenueStyle(data: VenueStyleCreateInput!): VenueStyle!
  deleteAccount(where: AccountWhereUniqueInput!): Account
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteApplication(where: ApplicationWhereUniqueInput!): Application
  deleteArrangement(where: ArrangementWhereUniqueInput!): Arrangement
  deleteArrangementOfRoom(
    where: ArrangementOfRoomWhereUniqueInput!
  ): ArrangementOfRoom
  deleteContactAtAddress(
    where: ContactAtAddressWhereUniqueInput!
  ): ContactAtAddress
  deleteDomain(where: DomainWhereUniqueInput!): Domain
  deleteEmail(where: EmailWhereUniqueInput!): Email
  deleteFeature(where: FeatureWhereUniqueInput!): Feature
  deleteFeatureOfAddress(
    where: FeatureOfAddressWhereUniqueInput!
  ): FeatureOfAddress
  deleteFeatureOfRoom(where: FeatureOfRoomWhereUniqueInput!): FeatureOfRoom
  deleteFiles(where: FilesWhereUniqueInput!): Files
  deleteManagersOnAccount(
    where: ManagersOnAccountWhereUniqueInput!
  ): ManagersOnAccount
  deleteManyAccount(where: AccountWhereInput): AffectedRowsOutput!
  deleteManyAddress(where: AddressWhereInput): AffectedRowsOutput!
  deleteManyApplication(where: ApplicationWhereInput): AffectedRowsOutput!
  deleteManyArrangement(where: ArrangementWhereInput): AffectedRowsOutput!
  deleteManyArrangementOfRoom(
    where: ArrangementOfRoomWhereInput
  ): AffectedRowsOutput!
  deleteManyContactAtAddress(
    where: ContactAtAddressWhereInput
  ): AffectedRowsOutput!
  deleteManyDomain(where: DomainWhereInput): AffectedRowsOutput!
  deleteManyEmail(where: EmailWhereInput): AffectedRowsOutput!
  deleteManyFeature(where: FeatureWhereInput): AffectedRowsOutput!
  deleteManyFeatureOfAddress(
    where: FeatureOfAddressWhereInput
  ): AffectedRowsOutput!
  deleteManyFeatureOfRoom(where: FeatureOfRoomWhereInput): AffectedRowsOutput!
  deleteManyFiles(where: FilesWhereInput): AffectedRowsOutput!
  deleteManyManagersOnAccount(
    where: ManagersOnAccountWhereInput
  ): AffectedRowsOutput!
  deleteManyPhone(where: PhoneWhereInput): AffectedRowsOutput!
  deleteManyRTW(where: RTWWhereInput): AffectedRowsOutput!
  deleteManyRoom(where: RoomWhereInput): AffectedRowsOutput!
  deleteManySIABadge(where: SIABadgeWhereInput): AffectedRowsOutput!
  deleteManyStatus(where: StatusWhereInput): AffectedRowsOutput!
  deleteManyStatusOnAccount(
    where: StatusOnAccountWhereInput
  ): AffectedRowsOutput!
  deleteManySubscription(where: SubscriptionWhereInput): AffectedRowsOutput!
  deleteManySubscriptionOnAccount(
    where: SubscriptionOnAccountWhereInput
  ): AffectedRowsOutput!
  deleteManySubuserOnAccount(
    where: SubuserOnAccountWhereInput
  ): AffectedRowsOutput!
  deleteManyToken(where: TokenWhereInput): AffectedRowsOutput!
  deleteManyTransaction(where: TransactionWhereInput): AffectedRowsOutput!
  deleteManyVenueStyle(where: VenueStyleWhereInput): AffectedRowsOutput!
  deletePhone(where: PhoneWhereUniqueInput!): Phone
  deleteRTW(where: RTWWhereUniqueInput!): RTW
  deleteRoom(where: RoomWhereUniqueInput!): Room
  deleteSIABadge(where: SIABadgeWhereUniqueInput!): SIABadge
  deleteStatus(where: StatusWhereUniqueInput!): Status
  deleteStatusOnAccount(
    where: StatusOnAccountWhereUniqueInput!
  ): StatusOnAccount
  deleteSubscription(where: SubscriptionWhereUniqueInput!): Subscription
  deleteSubscriptionOnAccount(
    where: SubscriptionOnAccountWhereUniqueInput!
  ): SubscriptionOnAccount
  deleteSubuserOnAccount(
    where: SubuserOnAccountWhereUniqueInput!
  ): SubuserOnAccount
  deleteToken(where: TokenWhereUniqueInput!): Token
  deleteTransaction(where: TransactionWhereUniqueInput!): Transaction
  deleteVenueStyle(where: VenueStyleWhereUniqueInput!): VenueStyle
  updateAccount(
    data: AccountUpdateInput!
    where: AccountWhereUniqueInput!
  ): Account
  updateAddress(
    data: AddressUpdateInput!
    where: AddressWhereUniqueInput!
  ): Address
  updateApplication(
    data: ApplicationUpdateInput!
    where: ApplicationWhereUniqueInput!
  ): Application
  updateArrangement(
    data: ArrangementUpdateInput!
    where: ArrangementWhereUniqueInput!
  ): Arrangement
  updateArrangementOfRoom(
    data: ArrangementOfRoomUpdateInput!
    where: ArrangementOfRoomWhereUniqueInput!
  ): ArrangementOfRoom
  updateContactAtAddress(
    data: ContactAtAddressUpdateInput!
    where: ContactAtAddressWhereUniqueInput!
  ): ContactAtAddress
  updateDomain(data: DomainUpdateInput!, where: DomainWhereUniqueInput!): Domain
  updateEmail(data: EmailUpdateInput!, where: EmailWhereUniqueInput!): Email
  updateFeature(
    data: FeatureUpdateInput!
    where: FeatureWhereUniqueInput!
  ): Feature
  updateFeatureOfAddress(
    data: FeatureOfAddressUpdateInput!
    where: FeatureOfAddressWhereUniqueInput!
  ): FeatureOfAddress
  updateFeatureOfRoom(
    data: FeatureOfRoomUpdateInput!
    where: FeatureOfRoomWhereUniqueInput!
  ): FeatureOfRoom
  updateFiles(data: FilesUpdateInput!, where: FilesWhereUniqueInput!): Files
  updateManagersOnAccount(
    data: ManagersOnAccountUpdateInput!
    where: ManagersOnAccountWhereUniqueInput!
  ): ManagersOnAccount
  updateManyAccount(
    data: AccountUpdateManyMutationInput!
    where: AccountWhereInput
  ): AffectedRowsOutput!
  updateManyAddress(
    data: AddressUpdateManyMutationInput!
    where: AddressWhereInput
  ): AffectedRowsOutput!
  updateManyApplication(
    data: ApplicationUpdateManyMutationInput!
    where: ApplicationWhereInput
  ): AffectedRowsOutput!
  updateManyArrangement(
    data: ArrangementUpdateManyMutationInput!
    where: ArrangementWhereInput
  ): AffectedRowsOutput!
  updateManyArrangementOfRoom(
    data: ArrangementOfRoomUpdateManyMutationInput!
    where: ArrangementOfRoomWhereInput
  ): AffectedRowsOutput!
  updateManyContactAtAddress(
    data: ContactAtAddressUpdateManyMutationInput!
    where: ContactAtAddressWhereInput
  ): AffectedRowsOutput!
  updateManyDomain(
    data: DomainUpdateManyMutationInput!
    where: DomainWhereInput
  ): AffectedRowsOutput!
  updateManyEmail(
    data: EmailUpdateManyMutationInput!
    where: EmailWhereInput
  ): AffectedRowsOutput!
  updateManyFeature(
    data: FeatureUpdateManyMutationInput!
    where: FeatureWhereInput
  ): AffectedRowsOutput!
  updateManyFeatureOfAddress(
    data: FeatureOfAddressUpdateManyMutationInput!
    where: FeatureOfAddressWhereInput
  ): AffectedRowsOutput!
  updateManyFeatureOfRoom(
    data: FeatureOfRoomUpdateManyMutationInput!
    where: FeatureOfRoomWhereInput
  ): AffectedRowsOutput!
  updateManyFiles(
    data: FilesUpdateManyMutationInput!
    where: FilesWhereInput
  ): AffectedRowsOutput!
  updateManyManagersOnAccount(
    data: ManagersOnAccountUpdateManyMutationInput!
    where: ManagersOnAccountWhereInput
  ): AffectedRowsOutput!
  updateManyPhone(
    data: PhoneUpdateManyMutationInput!
    where: PhoneWhereInput
  ): AffectedRowsOutput!
  updateManyRTW(
    data: RTWUpdateManyMutationInput!
    where: RTWWhereInput
  ): AffectedRowsOutput!
  updateManyRoom(
    data: RoomUpdateManyMutationInput!
    where: RoomWhereInput
  ): AffectedRowsOutput!
  updateManySIABadge(
    data: SIABadgeUpdateManyMutationInput!
    where: SIABadgeWhereInput
  ): AffectedRowsOutput!
  updateManyStatus(
    data: StatusUpdateManyMutationInput!
    where: StatusWhereInput
  ): AffectedRowsOutput!
  updateManyStatusOnAccount(
    data: StatusOnAccountUpdateManyMutationInput!
    where: StatusOnAccountWhereInput
  ): AffectedRowsOutput!
  updateManySubscription(
    data: SubscriptionUpdateManyMutationInput!
    where: SubscriptionWhereInput
  ): AffectedRowsOutput!
  updateManySubscriptionOnAccount(
    data: SubscriptionOnAccountUpdateManyMutationInput!
    where: SubscriptionOnAccountWhereInput
  ): AffectedRowsOutput!
  updateManySubuserOnAccount(
    data: SubuserOnAccountUpdateManyMutationInput!
    where: SubuserOnAccountWhereInput
  ): AffectedRowsOutput!
  updateManyToken(
    data: TokenUpdateManyMutationInput!
    where: TokenWhereInput
  ): AffectedRowsOutput!
  updateManyTransaction(
    data: TransactionUpdateManyMutationInput!
    where: TransactionWhereInput
  ): AffectedRowsOutput!
  updateManyVenueStyle(
    data: VenueStyleUpdateManyMutationInput!
    where: VenueStyleWhereInput
  ): AffectedRowsOutput!
  updatePhone(data: PhoneUpdateInput!, where: PhoneWhereUniqueInput!): Phone
  updateRTW(data: RTWUpdateInput!, where: RTWWhereUniqueInput!): RTW
  updateRoom(data: RoomUpdateInput!, where: RoomWhereUniqueInput!): Room
  updateSIABadge(
    data: SIABadgeUpdateInput!
    where: SIABadgeWhereUniqueInput!
  ): SIABadge
  updateStatus(data: StatusUpdateInput!, where: StatusWhereUniqueInput!): Status
  updateStatusOnAccount(
    data: StatusOnAccountUpdateInput!
    where: StatusOnAccountWhereUniqueInput!
  ): StatusOnAccount
  updateSubscription(
    data: SubscriptionUpdateInput!
    where: SubscriptionWhereUniqueInput!
  ): Subscription
  updateSubscriptionOnAccount(
    data: SubscriptionOnAccountUpdateInput!
    where: SubscriptionOnAccountWhereUniqueInput!
  ): SubscriptionOnAccount
  updateSubuserOnAccount(
    data: SubuserOnAccountUpdateInput!
    where: SubuserOnAccountWhereUniqueInput!
  ): SubuserOnAccount
  updateToken(data: TokenUpdateInput!, where: TokenWhereUniqueInput!): Token
  updateTransaction(
    data: TransactionUpdateInput!
    where: TransactionWhereUniqueInput!
  ): Transaction
  updateVenueStyle(
    data: VenueStyleUpdateInput!
    where: VenueStyleWhereUniqueInput!
  ): VenueStyle
  upsertAccount(
    create: AccountCreateInput!
    update: AccountUpdateInput!
    where: AccountWhereUniqueInput!
  ): Account!
  upsertAddress(
    create: AddressCreateInput!
    update: AddressUpdateInput!
    where: AddressWhereUniqueInput!
  ): Address!
  upsertApplication(
    create: ApplicationCreateInput!
    update: ApplicationUpdateInput!
    where: ApplicationWhereUniqueInput!
  ): Application!
  upsertArrangement(
    create: ArrangementCreateInput!
    update: ArrangementUpdateInput!
    where: ArrangementWhereUniqueInput!
  ): Arrangement!
  upsertArrangementOfRoom(
    create: ArrangementOfRoomCreateInput!
    update: ArrangementOfRoomUpdateInput!
    where: ArrangementOfRoomWhereUniqueInput!
  ): ArrangementOfRoom!
  upsertContactAtAddress(
    create: ContactAtAddressCreateInput!
    update: ContactAtAddressUpdateInput!
    where: ContactAtAddressWhereUniqueInput!
  ): ContactAtAddress!
  upsertDomain(
    create: DomainCreateInput!
    update: DomainUpdateInput!
    where: DomainWhereUniqueInput!
  ): Domain!
  upsertEmail(
    create: EmailCreateInput!
    update: EmailUpdateInput!
    where: EmailWhereUniqueInput!
  ): Email!
  upsertFeature(
    create: FeatureCreateInput!
    update: FeatureUpdateInput!
    where: FeatureWhereUniqueInput!
  ): Feature!
  upsertFeatureOfAddress(
    create: FeatureOfAddressCreateInput!
    update: FeatureOfAddressUpdateInput!
    where: FeatureOfAddressWhereUniqueInput!
  ): FeatureOfAddress!
  upsertFeatureOfRoom(
    create: FeatureOfRoomCreateInput!
    update: FeatureOfRoomUpdateInput!
    where: FeatureOfRoomWhereUniqueInput!
  ): FeatureOfRoom!
  upsertFiles(
    create: FilesCreateInput!
    update: FilesUpdateInput!
    where: FilesWhereUniqueInput!
  ): Files!
  upsertManagersOnAccount(
    create: ManagersOnAccountCreateInput!
    update: ManagersOnAccountUpdateInput!
    where: ManagersOnAccountWhereUniqueInput!
  ): ManagersOnAccount!
  upsertPhone(
    create: PhoneCreateInput!
    update: PhoneUpdateInput!
    where: PhoneWhereUniqueInput!
  ): Phone!
  upsertRTW(
    create: RTWCreateInput!
    update: RTWUpdateInput!
    where: RTWWhereUniqueInput!
  ): RTW!
  upsertRoom(
    create: RoomCreateInput!
    update: RoomUpdateInput!
    where: RoomWhereUniqueInput!
  ): Room!
  upsertSIABadge(
    create: SIABadgeCreateInput!
    update: SIABadgeUpdateInput!
    where: SIABadgeWhereUniqueInput!
  ): SIABadge!
  upsertStatus(
    create: StatusCreateInput!
    update: StatusUpdateInput!
    where: StatusWhereUniqueInput!
  ): Status!
  upsertStatusOnAccount(
    create: StatusOnAccountCreateInput!
    update: StatusOnAccountUpdateInput!
    where: StatusOnAccountWhereUniqueInput!
  ): StatusOnAccount!
  upsertSubscription(
    create: SubscriptionCreateInput!
    update: SubscriptionUpdateInput!
    where: SubscriptionWhereUniqueInput!
  ): Subscription!
  upsertSubscriptionOnAccount(
    create: SubscriptionOnAccountCreateInput!
    update: SubscriptionOnAccountUpdateInput!
    where: SubscriptionOnAccountWhereUniqueInput!
  ): SubscriptionOnAccount!
  upsertSubuserOnAccount(
    create: SubuserOnAccountCreateInput!
    update: SubuserOnAccountUpdateInput!
    where: SubuserOnAccountWhereUniqueInput!
  ): SubuserOnAccount!
  upsertToken(
    create: TokenCreateInput!
    update: TokenUpdateInput!
    where: TokenWhereUniqueInput!
  ): Token!
  upsertTransaction(
    create: TransactionCreateInput!
    update: TransactionUpdateInput!
    where: TransactionWhereUniqueInput!
  ): Transaction!
  upsertVenueStyle(
    create: VenueStyleCreateInput!
    update: VenueStyleUpdateInput!
    where: VenueStyleWhereUniqueInput!
  ): VenueStyle!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedBoolNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedBoolNullableFilter
  _min: NestedBoolNullableFilter
  equals: Boolean
  not: NestedBoolNullableWithAggregatesFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedEnumAccountTypeFilter {
  equals: AccountType
  in: [AccountType!]
  not: NestedEnumAccountTypeFilter
  notIn: [AccountType!]
}

input NestedEnumAccountTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumAccountTypeFilter
  _min: NestedEnumAccountTypeFilter
  equals: AccountType
  in: [AccountType!]
  not: NestedEnumAccountTypeWithAggregatesFilter
  notIn: [AccountType!]
}

input NestedEnumAddressTypeFilter {
  equals: AddressType
  in: [AddressType!]
  not: NestedEnumAddressTypeFilter
  notIn: [AddressType!]
}

input NestedEnumAddressTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumAddressTypeFilter
  _min: NestedEnumAddressTypeFilter
  equals: AddressType
  in: [AddressType!]
  not: NestedEnumAddressTypeWithAggregatesFilter
  notIn: [AddressType!]
}

input NestedEnumFeatureTypeFilter {
  equals: FeatureType
  in: [FeatureType!]
  not: NestedEnumFeatureTypeFilter
  notIn: [FeatureType!]
}

input NestedEnumFeatureTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumFeatureTypeFilter
  _min: NestedEnumFeatureTypeFilter
  equals: FeatureType
  in: [FeatureType!]
  not: NestedEnumFeatureTypeWithAggregatesFilter
  notIn: [FeatureType!]
}

input NestedEnumLicenseFilter {
  equals: License
  in: [License!]
  not: NestedEnumLicenseFilter
  notIn: [License!]
}

input NestedEnumLicenseTypeFilter {
  equals: LicenseType
  in: [LicenseType!]
  not: NestedEnumLicenseTypeFilter
  notIn: [LicenseType!]
}

input NestedEnumLicenseTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumLicenseTypeFilter
  _min: NestedEnumLicenseTypeFilter
  equals: LicenseType
  in: [LicenseType!]
  not: NestedEnumLicenseTypeWithAggregatesFilter
  notIn: [LicenseType!]
}

input NestedEnumLicenseWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumLicenseFilter
  _min: NestedEnumLicenseFilter
  equals: License
  in: [License!]
  not: NestedEnumLicenseWithAggregatesFilter
  notIn: [License!]
}

input NestedEnumTitleNullableFilter {
  equals: Title
  in: [Title!]
  not: NestedEnumTitleNullableFilter
  notIn: [Title!]
}

input NestedEnumTitleNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumTitleNullableFilter
  _min: NestedEnumTitleNullableFilter
  equals: Title
  in: [Title!]
  not: NestedEnumTitleNullableWithAggregatesFilter
  notIn: [Title!]
}

input NestedEnumTokenTypeFilter {
  equals: TokenType
  in: [TokenType!]
  not: NestedEnumTokenTypeFilter
  notIn: [TokenType!]
}

input NestedEnumTokenTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumTokenTypeFilter
  _min: NestedEnumTokenTypeFilter
  equals: TokenType
  in: [TokenType!]
  not: NestedEnumTokenTypeWithAggregatesFilter
  notIn: [TokenType!]
}

input NestedEnumdnsTypeFilter {
  equals: dnsType
  in: [dnsType!]
  not: NestedEnumdnsTypeFilter
  notIn: [dnsType!]
}

input NestedEnumdnsTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumdnsTypeFilter
  _min: NestedEnumdnsTypeFilter
  equals: dnsType
  in: [dnsType!]
  not: NestedEnumdnsTypeWithAggregatesFilter
  notIn: [dnsType!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedJsonFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input NestedJsonNullableFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input NullableBoolFieldUpdateOperationsInput {
  set: Boolean
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableEnumTitleFieldUpdateOperationsInput {
  set: Title
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Phone {
  account: Account!
  accountId: String!
  address: Address!
  addressId: String!
  createdAt: DateTime!
  deleted: DateTime
  id: String!
  phone: String!
  public: Boolean!
  updatedAt: DateTime!
}

type PhoneCountAggregate {
  _all: Int!
  accountId: Int!
  addressId: Int!
  createdAt: Int!
  deleted: Int!
  id: Int!
  phone: Int!
  public: Int!
  updatedAt: Int!
}

input PhoneCountOrderByAggregateInput {
  accountId: SortOrder
  addressId: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  phone: SortOrder
  public: SortOrder
  updatedAt: SortOrder
}

input PhoneCreateInput {
  account: AccountCreateNestedOneWithoutPhonesInput!
  address: AddressCreateNestedOneWithoutPhonesInput!
  createdAt: DateTime
  deleted: DateTime
  id: String
  phone: String!
  public: Boolean
  updatedAt: DateTime
}

input PhoneCreateManyAccountInput {
  addressId: String!
  createdAt: DateTime
  deleted: DateTime
  id: String
  phone: String!
  public: Boolean
  updatedAt: DateTime
}

input PhoneCreateManyAccountInputEnvelope {
  data: [PhoneCreateManyAccountInput!]!
  skipDuplicates: Boolean
}

input PhoneCreateManyAddressInput {
  accountId: String!
  createdAt: DateTime
  deleted: DateTime
  id: String
  phone: String!
  public: Boolean
  updatedAt: DateTime
}

input PhoneCreateManyAddressInputEnvelope {
  data: [PhoneCreateManyAddressInput!]!
  skipDuplicates: Boolean
}

input PhoneCreateManyInput {
  accountId: String!
  addressId: String!
  createdAt: DateTime
  deleted: DateTime
  id: String
  phone: String!
  public: Boolean
  updatedAt: DateTime
}

input PhoneCreateNestedManyWithoutAccountInput {
  connect: [PhoneWhereUniqueInput!]
  connectOrCreate: [PhoneCreateOrConnectWithoutAccountInput!]
  create: [PhoneCreateWithoutAccountInput!]
  createMany: PhoneCreateManyAccountInputEnvelope
}

input PhoneCreateNestedManyWithoutAddressInput {
  connect: [PhoneWhereUniqueInput!]
  connectOrCreate: [PhoneCreateOrConnectWithoutAddressInput!]
  create: [PhoneCreateWithoutAddressInput!]
  createMany: PhoneCreateManyAddressInputEnvelope
}

input PhoneCreateOrConnectWithoutAccountInput {
  create: PhoneCreateWithoutAccountInput!
  where: PhoneWhereUniqueInput!
}

input PhoneCreateOrConnectWithoutAddressInput {
  create: PhoneCreateWithoutAddressInput!
  where: PhoneWhereUniqueInput!
}

input PhoneCreateWithoutAccountInput {
  address: AddressCreateNestedOneWithoutPhonesInput!
  createdAt: DateTime
  deleted: DateTime
  id: String
  phone: String!
  public: Boolean
  updatedAt: DateTime
}

input PhoneCreateWithoutAddressInput {
  account: AccountCreateNestedOneWithoutPhonesInput!
  createdAt: DateTime
  deleted: DateTime
  id: String
  phone: String!
  public: Boolean
  updatedAt: DateTime
}

type PhoneGroupBy {
  _count: PhoneCountAggregate
  _max: PhoneMaxAggregate
  _min: PhoneMinAggregate
  accountId: String!
  addressId: String!
  createdAt: DateTime!
  deleted: DateTime
  id: String!
  phone: String!
  public: Boolean!
  updatedAt: DateTime!
}

input PhoneListRelationFilter {
  every: PhoneWhereInput
  none: PhoneWhereInput
  some: PhoneWhereInput
}

type PhoneMaxAggregate {
  accountId: String
  addressId: String
  createdAt: DateTime
  deleted: DateTime
  id: String
  phone: String
  public: Boolean
  updatedAt: DateTime
}

input PhoneMaxOrderByAggregateInput {
  accountId: SortOrder
  addressId: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  phone: SortOrder
  public: SortOrder
  updatedAt: SortOrder
}

type PhoneMinAggregate {
  accountId: String
  addressId: String
  createdAt: DateTime
  deleted: DateTime
  id: String
  phone: String
  public: Boolean
  updatedAt: DateTime
}

input PhoneMinOrderByAggregateInput {
  accountId: SortOrder
  addressId: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  phone: SortOrder
  public: SortOrder
  updatedAt: SortOrder
}

input PhoneOrderByRelationAggregateInput {
  _count: SortOrder
}

enum PhoneOrderByRelevanceFieldEnum {
  accountId
  addressId
  id
  phone
}

input PhoneOrderByRelevanceInput {
  fields: [PhoneOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input PhoneOrderByWithAggregationInput {
  _count: PhoneCountOrderByAggregateInput
  _max: PhoneMaxOrderByAggregateInput
  _min: PhoneMinOrderByAggregateInput
  accountId: SortOrder
  addressId: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  phone: SortOrder
  public: SortOrder
  updatedAt: SortOrder
}

input PhoneOrderByWithRelationAndSearchRelevanceInput {
  _relevance: PhoneOrderByRelevanceInput
  account: AccountOrderByWithRelationAndSearchRelevanceInput
  accountId: SortOrder
  address: AddressOrderByWithRelationAndSearchRelevanceInput
  addressId: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  phone: SortOrder
  public: SortOrder
  updatedAt: SortOrder
}

enum PhoneScalarFieldEnum {
  accountId
  addressId
  createdAt
  deleted
  id
  phone
  public
  updatedAt
}

input PhoneScalarWhereInput {
  AND: [PhoneScalarWhereInput!]
  NOT: [PhoneScalarWhereInput!]
  OR: [PhoneScalarWhereInput!]
  accountId: StringFilter
  addressId: StringFilter
  createdAt: DateTimeFilter
  deleted: DateTimeNullableFilter
  id: StringFilter
  phone: StringFilter
  public: BoolFilter
  updatedAt: DateTimeFilter
}

input PhoneScalarWhereWithAggregatesInput {
  AND: [PhoneScalarWhereWithAggregatesInput!]
  NOT: [PhoneScalarWhereWithAggregatesInput!]
  OR: [PhoneScalarWhereWithAggregatesInput!]
  accountId: StringWithAggregatesFilter
  addressId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deleted: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  phone: StringWithAggregatesFilter
  public: BoolWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input PhoneUpdateInput {
  account: AccountUpdateOneRequiredWithoutPhonesInput
  address: AddressUpdateOneRequiredWithoutPhonesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  public: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PhoneUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  public: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PhoneUpdateManyWithWhereWithoutAccountInput {
  data: PhoneUpdateManyMutationInput!
  where: PhoneScalarWhereInput!
}

input PhoneUpdateManyWithWhereWithoutAddressInput {
  data: PhoneUpdateManyMutationInput!
  where: PhoneScalarWhereInput!
}

input PhoneUpdateManyWithoutAccountInput {
  connect: [PhoneWhereUniqueInput!]
  connectOrCreate: [PhoneCreateOrConnectWithoutAccountInput!]
  create: [PhoneCreateWithoutAccountInput!]
  createMany: PhoneCreateManyAccountInputEnvelope
  delete: [PhoneWhereUniqueInput!]
  deleteMany: [PhoneScalarWhereInput!]
  disconnect: [PhoneWhereUniqueInput!]
  set: [PhoneWhereUniqueInput!]
  update: [PhoneUpdateWithWhereUniqueWithoutAccountInput!]
  updateMany: [PhoneUpdateManyWithWhereWithoutAccountInput!]
  upsert: [PhoneUpsertWithWhereUniqueWithoutAccountInput!]
}

input PhoneUpdateManyWithoutAddressInput {
  connect: [PhoneWhereUniqueInput!]
  connectOrCreate: [PhoneCreateOrConnectWithoutAddressInput!]
  create: [PhoneCreateWithoutAddressInput!]
  createMany: PhoneCreateManyAddressInputEnvelope
  delete: [PhoneWhereUniqueInput!]
  deleteMany: [PhoneScalarWhereInput!]
  disconnect: [PhoneWhereUniqueInput!]
  set: [PhoneWhereUniqueInput!]
  update: [PhoneUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [PhoneUpdateManyWithWhereWithoutAddressInput!]
  upsert: [PhoneUpsertWithWhereUniqueWithoutAddressInput!]
}

input PhoneUpdateWithWhereUniqueWithoutAccountInput {
  data: PhoneUpdateWithoutAccountInput!
  where: PhoneWhereUniqueInput!
}

input PhoneUpdateWithWhereUniqueWithoutAddressInput {
  data: PhoneUpdateWithoutAddressInput!
  where: PhoneWhereUniqueInput!
}

input PhoneUpdateWithoutAccountInput {
  address: AddressUpdateOneRequiredWithoutPhonesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  public: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PhoneUpdateWithoutAddressInput {
  account: AccountUpdateOneRequiredWithoutPhonesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  phone: StringFieldUpdateOperationsInput
  public: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PhoneUpsertWithWhereUniqueWithoutAccountInput {
  create: PhoneCreateWithoutAccountInput!
  update: PhoneUpdateWithoutAccountInput!
  where: PhoneWhereUniqueInput!
}

input PhoneUpsertWithWhereUniqueWithoutAddressInput {
  create: PhoneCreateWithoutAddressInput!
  update: PhoneUpdateWithoutAddressInput!
  where: PhoneWhereUniqueInput!
}

input PhoneWhereInput {
  AND: [PhoneWhereInput!]
  NOT: [PhoneWhereInput!]
  OR: [PhoneWhereInput!]
  account: AccountRelationFilter
  accountId: StringFilter
  address: AddressRelationFilter
  addressId: StringFilter
  createdAt: DateTimeFilter
  deleted: DateTimeNullableFilter
  id: StringFilter
  phone: StringFilter
  public: BoolFilter
  updatedAt: DateTimeFilter
}

input PhoneWhereUniqueInput {
  id: String
  phone: String
}

type Query {
  account(where: AccountWhereUniqueInput!): Account
  accounts(
    cursor: AccountWhereUniqueInput
    distinct: [AccountScalarFieldEnum!]
    orderBy: [AccountOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: AccountWhereInput
  ): [Account!]!
  address(where: AddressWhereUniqueInput!): Address
  addresses(
    cursor: AddressWhereUniqueInput
    distinct: [AddressScalarFieldEnum!]
    orderBy: [AddressOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: AddressWhereInput
  ): [Address!]!
  aggregateAccount(
    cursor: AccountWhereUniqueInput
    orderBy: [AccountOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: AccountWhereInput
  ): AggregateAccount!
  aggregateAddress(
    cursor: AddressWhereUniqueInput
    orderBy: [AddressOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: AddressWhereInput
  ): AggregateAddress!
  aggregateApplication(
    cursor: ApplicationWhereUniqueInput
    orderBy: [ApplicationOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: ApplicationWhereInput
  ): AggregateApplication!
  aggregateArrangement(
    cursor: ArrangementWhereUniqueInput
    orderBy: [ArrangementOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: ArrangementWhereInput
  ): AggregateArrangement!
  aggregateArrangementOfRoom(
    cursor: ArrangementOfRoomWhereUniqueInput
    orderBy: [ArrangementOfRoomOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: ArrangementOfRoomWhereInput
  ): AggregateArrangementOfRoom!
  aggregateContactAtAddress(
    cursor: ContactAtAddressWhereUniqueInput
    orderBy: [ContactAtAddressOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: ContactAtAddressWhereInput
  ): AggregateContactAtAddress!
  aggregateDomain(
    cursor: DomainWhereUniqueInput
    orderBy: [DomainOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: DomainWhereInput
  ): AggregateDomain!
  aggregateEmail(
    cursor: EmailWhereUniqueInput
    orderBy: [EmailOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: EmailWhereInput
  ): AggregateEmail!
  aggregateFeature(
    cursor: FeatureWhereUniqueInput
    orderBy: [FeatureOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: FeatureWhereInput
  ): AggregateFeature!
  aggregateFeatureOfAddress(
    cursor: FeatureOfAddressWhereUniqueInput
    orderBy: [FeatureOfAddressOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: FeatureOfAddressWhereInput
  ): AggregateFeatureOfAddress!
  aggregateFeatureOfRoom(
    cursor: FeatureOfRoomWhereUniqueInput
    orderBy: [FeatureOfRoomOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: FeatureOfRoomWhereInput
  ): AggregateFeatureOfRoom!
  aggregateFiles(
    cursor: FilesWhereUniqueInput
    orderBy: [FilesOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: FilesWhereInput
  ): AggregateFiles!
  aggregateManagersOnAccount(
    cursor: ManagersOnAccountWhereUniqueInput
    orderBy: [ManagersOnAccountOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: ManagersOnAccountWhereInput
  ): AggregateManagersOnAccount!
  aggregatePhone(
    cursor: PhoneWhereUniqueInput
    orderBy: [PhoneOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: PhoneWhereInput
  ): AggregatePhone!
  aggregateRTW(
    cursor: RTWWhereUniqueInput
    orderBy: [RTWOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: RTWWhereInput
  ): AggregateRTW!
  aggregateRoom(
    cursor: RoomWhereUniqueInput
    orderBy: [RoomOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: RoomWhereInput
  ): AggregateRoom!
  aggregateSIABadge(
    cursor: SIABadgeWhereUniqueInput
    orderBy: [SIABadgeOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: SIABadgeWhereInput
  ): AggregateSIABadge!
  aggregateStatus(
    cursor: StatusWhereUniqueInput
    orderBy: [StatusOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: StatusWhereInput
  ): AggregateStatus!
  aggregateStatusOnAccount(
    cursor: StatusOnAccountWhereUniqueInput
    orderBy: [StatusOnAccountOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: StatusOnAccountWhereInput
  ): AggregateStatusOnAccount!
  aggregateSubscription(
    cursor: SubscriptionWhereUniqueInput
    orderBy: [SubscriptionOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: SubscriptionWhereInput
  ): AggregateSubscription!
  aggregateSubscriptionOnAccount(
    cursor: SubscriptionOnAccountWhereUniqueInput
    orderBy: [SubscriptionOnAccountOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: SubscriptionOnAccountWhereInput
  ): AggregateSubscriptionOnAccount!
  aggregateSubuserOnAccount(
    cursor: SubuserOnAccountWhereUniqueInput
    orderBy: [SubuserOnAccountOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: SubuserOnAccountWhereInput
  ): AggregateSubuserOnAccount!
  aggregateToken(
    cursor: TokenWhereUniqueInput
    orderBy: [TokenOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: TokenWhereInput
  ): AggregateToken!
  aggregateTransaction(
    cursor: TransactionWhereUniqueInput
    orderBy: [TransactionOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: TransactionWhereInput
  ): AggregateTransaction!
  aggregateVenueStyle(
    cursor: VenueStyleWhereUniqueInput
    orderBy: [VenueStyleOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: VenueStyleWhereInput
  ): AggregateVenueStyle!
  application(where: ApplicationWhereUniqueInput!): Application
  applications(
    cursor: ApplicationWhereUniqueInput
    distinct: [ApplicationScalarFieldEnum!]
    orderBy: [ApplicationOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: ApplicationWhereInput
  ): [Application!]!
  arrangement(where: ArrangementWhereUniqueInput!): Arrangement
  arrangementOfRoom(
    where: ArrangementOfRoomWhereUniqueInput!
  ): ArrangementOfRoom
  arrangementOfRooms(
    cursor: ArrangementOfRoomWhereUniqueInput
    distinct: [ArrangementOfRoomScalarFieldEnum!]
    orderBy: [ArrangementOfRoomOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: ArrangementOfRoomWhereInput
  ): [ArrangementOfRoom!]!
  arrangements(
    cursor: ArrangementWhereUniqueInput
    distinct: [ArrangementScalarFieldEnum!]
    orderBy: [ArrangementOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: ArrangementWhereInput
  ): [Arrangement!]!
  contactAtAddress(where: ContactAtAddressWhereUniqueInput!): ContactAtAddress
  contactAtAddresses(
    cursor: ContactAtAddressWhereUniqueInput
    distinct: [ContactAtAddressScalarFieldEnum!]
    orderBy: [ContactAtAddressOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: ContactAtAddressWhereInput
  ): [ContactAtAddress!]!
  domain(where: DomainWhereUniqueInput!): Domain
  domains(
    cursor: DomainWhereUniqueInput
    distinct: [DomainScalarFieldEnum!]
    orderBy: [DomainOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: DomainWhereInput
  ): [Domain!]!
  email(where: EmailWhereUniqueInput!): Email
  emails(
    cursor: EmailWhereUniqueInput
    distinct: [EmailScalarFieldEnum!]
    orderBy: [EmailOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: EmailWhereInput
  ): [Email!]!
  feature(where: FeatureWhereUniqueInput!): Feature
  featureOfAddress(where: FeatureOfAddressWhereUniqueInput!): FeatureOfAddress
  featureOfAddresses(
    cursor: FeatureOfAddressWhereUniqueInput
    distinct: [FeatureOfAddressScalarFieldEnum!]
    orderBy: [FeatureOfAddressOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: FeatureOfAddressWhereInput
  ): [FeatureOfAddress!]!
  featureOfRoom(where: FeatureOfRoomWhereUniqueInput!): FeatureOfRoom
  featureOfRooms(
    cursor: FeatureOfRoomWhereUniqueInput
    distinct: [FeatureOfRoomScalarFieldEnum!]
    orderBy: [FeatureOfRoomOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: FeatureOfRoomWhereInput
  ): [FeatureOfRoom!]!
  features(
    cursor: FeatureWhereUniqueInput
    distinct: [FeatureScalarFieldEnum!]
    orderBy: [FeatureOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: FeatureWhereInput
  ): [Feature!]!
  findFirstAccount(
    cursor: AccountWhereUniqueInput
    distinct: [AccountScalarFieldEnum!]
    orderBy: [AccountOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: AccountWhereInput
  ): Account
  findFirstAddress(
    cursor: AddressWhereUniqueInput
    distinct: [AddressScalarFieldEnum!]
    orderBy: [AddressOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: AddressWhereInput
  ): Address
  findFirstApplication(
    cursor: ApplicationWhereUniqueInput
    distinct: [ApplicationScalarFieldEnum!]
    orderBy: [ApplicationOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: ApplicationWhereInput
  ): Application
  findFirstArrangement(
    cursor: ArrangementWhereUniqueInput
    distinct: [ArrangementScalarFieldEnum!]
    orderBy: [ArrangementOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: ArrangementWhereInput
  ): Arrangement
  findFirstArrangementOfRoom(
    cursor: ArrangementOfRoomWhereUniqueInput
    distinct: [ArrangementOfRoomScalarFieldEnum!]
    orderBy: [ArrangementOfRoomOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: ArrangementOfRoomWhereInput
  ): ArrangementOfRoom
  findFirstContactAtAddress(
    cursor: ContactAtAddressWhereUniqueInput
    distinct: [ContactAtAddressScalarFieldEnum!]
    orderBy: [ContactAtAddressOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: ContactAtAddressWhereInput
  ): ContactAtAddress
  findFirstDomain(
    cursor: DomainWhereUniqueInput
    distinct: [DomainScalarFieldEnum!]
    orderBy: [DomainOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: DomainWhereInput
  ): Domain
  findFirstEmail(
    cursor: EmailWhereUniqueInput
    distinct: [EmailScalarFieldEnum!]
    orderBy: [EmailOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: EmailWhereInput
  ): Email
  findFirstFeature(
    cursor: FeatureWhereUniqueInput
    distinct: [FeatureScalarFieldEnum!]
    orderBy: [FeatureOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: FeatureWhereInput
  ): Feature
  findFirstFeatureOfAddress(
    cursor: FeatureOfAddressWhereUniqueInput
    distinct: [FeatureOfAddressScalarFieldEnum!]
    orderBy: [FeatureOfAddressOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: FeatureOfAddressWhereInput
  ): FeatureOfAddress
  findFirstFeatureOfRoom(
    cursor: FeatureOfRoomWhereUniqueInput
    distinct: [FeatureOfRoomScalarFieldEnum!]
    orderBy: [FeatureOfRoomOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: FeatureOfRoomWhereInput
  ): FeatureOfRoom
  findFirstFiles(
    cursor: FilesWhereUniqueInput
    distinct: [FilesScalarFieldEnum!]
    orderBy: [FilesOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: FilesWhereInput
  ): Files
  findFirstManagersOnAccount(
    cursor: ManagersOnAccountWhereUniqueInput
    distinct: [ManagersOnAccountScalarFieldEnum!]
    orderBy: [ManagersOnAccountOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: ManagersOnAccountWhereInput
  ): ManagersOnAccount
  findFirstPhone(
    cursor: PhoneWhereUniqueInput
    distinct: [PhoneScalarFieldEnum!]
    orderBy: [PhoneOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: PhoneWhereInput
  ): Phone
  findFirstRTW(
    cursor: RTWWhereUniqueInput
    distinct: [RTWScalarFieldEnum!]
    orderBy: [RTWOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: RTWWhereInput
  ): RTW
  findFirstRoom(
    cursor: RoomWhereUniqueInput
    distinct: [RoomScalarFieldEnum!]
    orderBy: [RoomOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: RoomWhereInput
  ): Room
  findFirstSIABadge(
    cursor: SIABadgeWhereUniqueInput
    distinct: [SIABadgeScalarFieldEnum!]
    orderBy: [SIABadgeOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: SIABadgeWhereInput
  ): SIABadge
  findFirstStatus(
    cursor: StatusWhereUniqueInput
    distinct: [StatusScalarFieldEnum!]
    orderBy: [StatusOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: StatusWhereInput
  ): Status
  findFirstStatusOnAccount(
    cursor: StatusOnAccountWhereUniqueInput
    distinct: [StatusOnAccountScalarFieldEnum!]
    orderBy: [StatusOnAccountOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: StatusOnAccountWhereInput
  ): StatusOnAccount
  findFirstSubscription(
    cursor: SubscriptionWhereUniqueInput
    distinct: [SubscriptionScalarFieldEnum!]
    orderBy: [SubscriptionOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: SubscriptionWhereInput
  ): Subscription
  findFirstSubscriptionOnAccount(
    cursor: SubscriptionOnAccountWhereUniqueInput
    distinct: [SubscriptionOnAccountScalarFieldEnum!]
    orderBy: [SubscriptionOnAccountOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: SubscriptionOnAccountWhereInput
  ): SubscriptionOnAccount
  findFirstSubuserOnAccount(
    cursor: SubuserOnAccountWhereUniqueInput
    distinct: [SubuserOnAccountScalarFieldEnum!]
    orderBy: [SubuserOnAccountOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: SubuserOnAccountWhereInput
  ): SubuserOnAccount
  findFirstToken(
    cursor: TokenWhereUniqueInput
    distinct: [TokenScalarFieldEnum!]
    orderBy: [TokenOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: TokenWhereInput
  ): Token
  findFirstTransaction(
    cursor: TransactionWhereUniqueInput
    distinct: [TransactionScalarFieldEnum!]
    orderBy: [TransactionOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: TransactionWhereInput
  ): Transaction
  findFirstVenueStyle(
    cursor: VenueStyleWhereUniqueInput
    distinct: [VenueStyleScalarFieldEnum!]
    orderBy: [VenueStyleOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: VenueStyleWhereInput
  ): VenueStyle
  findManyFiles(
    cursor: FilesWhereUniqueInput
    distinct: [FilesScalarFieldEnum!]
    orderBy: [FilesOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: FilesWhereInput
  ): [Files!]!
  findUniqueFiles(where: FilesWhereUniqueInput!): Files
  groupByAccount(
    by: [AccountScalarFieldEnum!]!
    having: AccountScalarWhereWithAggregatesInput
    orderBy: [AccountOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: AccountWhereInput
  ): [AccountGroupBy!]!
  groupByAddress(
    by: [AddressScalarFieldEnum!]!
    having: AddressScalarWhereWithAggregatesInput
    orderBy: [AddressOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: AddressWhereInput
  ): [AddressGroupBy!]!
  groupByApplication(
    by: [ApplicationScalarFieldEnum!]!
    having: ApplicationScalarWhereWithAggregatesInput
    orderBy: [ApplicationOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: ApplicationWhereInput
  ): [ApplicationGroupBy!]!
  groupByArrangement(
    by: [ArrangementScalarFieldEnum!]!
    having: ArrangementScalarWhereWithAggregatesInput
    orderBy: [ArrangementOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: ArrangementWhereInput
  ): [ArrangementGroupBy!]!
  groupByArrangementOfRoom(
    by: [ArrangementOfRoomScalarFieldEnum!]!
    having: ArrangementOfRoomScalarWhereWithAggregatesInput
    orderBy: [ArrangementOfRoomOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: ArrangementOfRoomWhereInput
  ): [ArrangementOfRoomGroupBy!]!
  groupByContactAtAddress(
    by: [ContactAtAddressScalarFieldEnum!]!
    having: ContactAtAddressScalarWhereWithAggregatesInput
    orderBy: [ContactAtAddressOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: ContactAtAddressWhereInput
  ): [ContactAtAddressGroupBy!]!
  groupByDomain(
    by: [DomainScalarFieldEnum!]!
    having: DomainScalarWhereWithAggregatesInput
    orderBy: [DomainOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: DomainWhereInput
  ): [DomainGroupBy!]!
  groupByEmail(
    by: [EmailScalarFieldEnum!]!
    having: EmailScalarWhereWithAggregatesInput
    orderBy: [EmailOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: EmailWhereInput
  ): [EmailGroupBy!]!
  groupByFeature(
    by: [FeatureScalarFieldEnum!]!
    having: FeatureScalarWhereWithAggregatesInput
    orderBy: [FeatureOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: FeatureWhereInput
  ): [FeatureGroupBy!]!
  groupByFeatureOfAddress(
    by: [FeatureOfAddressScalarFieldEnum!]!
    having: FeatureOfAddressScalarWhereWithAggregatesInput
    orderBy: [FeatureOfAddressOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: FeatureOfAddressWhereInput
  ): [FeatureOfAddressGroupBy!]!
  groupByFeatureOfRoom(
    by: [FeatureOfRoomScalarFieldEnum!]!
    having: FeatureOfRoomScalarWhereWithAggregatesInput
    orderBy: [FeatureOfRoomOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: FeatureOfRoomWhereInput
  ): [FeatureOfRoomGroupBy!]!
  groupByFiles(
    by: [FilesScalarFieldEnum!]!
    having: FilesScalarWhereWithAggregatesInput
    orderBy: [FilesOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: FilesWhereInput
  ): [FilesGroupBy!]!
  groupByManagersOnAccount(
    by: [ManagersOnAccountScalarFieldEnum!]!
    having: ManagersOnAccountScalarWhereWithAggregatesInput
    orderBy: [ManagersOnAccountOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: ManagersOnAccountWhereInput
  ): [ManagersOnAccountGroupBy!]!
  groupByPhone(
    by: [PhoneScalarFieldEnum!]!
    having: PhoneScalarWhereWithAggregatesInput
    orderBy: [PhoneOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: PhoneWhereInput
  ): [PhoneGroupBy!]!
  groupByRTW(
    by: [RTWScalarFieldEnum!]!
    having: RTWScalarWhereWithAggregatesInput
    orderBy: [RTWOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: RTWWhereInput
  ): [RTWGroupBy!]!
  groupByRoom(
    by: [RoomScalarFieldEnum!]!
    having: RoomScalarWhereWithAggregatesInput
    orderBy: [RoomOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: RoomWhereInput
  ): [RoomGroupBy!]!
  groupBySIABadge(
    by: [SIABadgeScalarFieldEnum!]!
    having: SIABadgeScalarWhereWithAggregatesInput
    orderBy: [SIABadgeOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: SIABadgeWhereInput
  ): [SIABadgeGroupBy!]!
  groupByStatus(
    by: [StatusScalarFieldEnum!]!
    having: StatusScalarWhereWithAggregatesInput
    orderBy: [StatusOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: StatusWhereInput
  ): [StatusGroupBy!]!
  groupByStatusOnAccount(
    by: [StatusOnAccountScalarFieldEnum!]!
    having: StatusOnAccountScalarWhereWithAggregatesInput
    orderBy: [StatusOnAccountOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: StatusOnAccountWhereInput
  ): [StatusOnAccountGroupBy!]!
  groupBySubscription(
    by: [SubscriptionScalarFieldEnum!]!
    having: SubscriptionScalarWhereWithAggregatesInput
    orderBy: [SubscriptionOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: SubscriptionWhereInput
  ): [SubscriptionGroupBy!]!
  groupBySubscriptionOnAccount(
    by: [SubscriptionOnAccountScalarFieldEnum!]!
    having: SubscriptionOnAccountScalarWhereWithAggregatesInput
    orderBy: [SubscriptionOnAccountOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: SubscriptionOnAccountWhereInput
  ): [SubscriptionOnAccountGroupBy!]!
  groupBySubuserOnAccount(
    by: [SubuserOnAccountScalarFieldEnum!]!
    having: SubuserOnAccountScalarWhereWithAggregatesInput
    orderBy: [SubuserOnAccountOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: SubuserOnAccountWhereInput
  ): [SubuserOnAccountGroupBy!]!
  groupByToken(
    by: [TokenScalarFieldEnum!]!
    having: TokenScalarWhereWithAggregatesInput
    orderBy: [TokenOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: TokenWhereInput
  ): [TokenGroupBy!]!
  groupByTransaction(
    by: [TransactionScalarFieldEnum!]!
    having: TransactionScalarWhereWithAggregatesInput
    orderBy: [TransactionOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: TransactionWhereInput
  ): [TransactionGroupBy!]!
  groupByVenueStyle(
    by: [VenueStyleScalarFieldEnum!]!
    having: VenueStyleScalarWhereWithAggregatesInput
    orderBy: [VenueStyleOrderByWithAggregationInput!]
    skip: Int
    take: Int
    where: VenueStyleWhereInput
  ): [VenueStyleGroupBy!]!
  managersOnAccount(
    where: ManagersOnAccountWhereUniqueInput!
  ): ManagersOnAccount
  managersOnAccounts(
    cursor: ManagersOnAccountWhereUniqueInput
    distinct: [ManagersOnAccountScalarFieldEnum!]
    orderBy: [ManagersOnAccountOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: ManagersOnAccountWhereInput
  ): [ManagersOnAccount!]!
  phone(where: PhoneWhereUniqueInput!): Phone
  phones(
    cursor: PhoneWhereUniqueInput
    distinct: [PhoneScalarFieldEnum!]
    orderBy: [PhoneOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: PhoneWhereInput
  ): [Phone!]!
  rTW(where: RTWWhereUniqueInput!): RTW
  rTWS(
    cursor: RTWWhereUniqueInput
    distinct: [RTWScalarFieldEnum!]
    orderBy: [RTWOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: RTWWhereInput
  ): [RTW!]!
  room(where: RoomWhereUniqueInput!): Room
  rooms(
    cursor: RoomWhereUniqueInput
    distinct: [RoomScalarFieldEnum!]
    orderBy: [RoomOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: RoomWhereInput
  ): [Room!]!
  sIABadge(where: SIABadgeWhereUniqueInput!): SIABadge
  sIABadges(
    cursor: SIABadgeWhereUniqueInput
    distinct: [SIABadgeScalarFieldEnum!]
    orderBy: [SIABadgeOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: SIABadgeWhereInput
  ): [SIABadge!]!
  status(where: StatusWhereUniqueInput!): Status
  statusOnAccount(where: StatusOnAccountWhereUniqueInput!): StatusOnAccount
  statusOnAccounts(
    cursor: StatusOnAccountWhereUniqueInput
    distinct: [StatusOnAccountScalarFieldEnum!]
    orderBy: [StatusOnAccountOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: StatusOnAccountWhereInput
  ): [StatusOnAccount!]!
  statuses(
    cursor: StatusWhereUniqueInput
    distinct: [StatusScalarFieldEnum!]
    orderBy: [StatusOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: StatusWhereInput
  ): [Status!]!
  subscription(where: SubscriptionWhereUniqueInput!): Subscription
  subscriptionOnAccount(
    where: SubscriptionOnAccountWhereUniqueInput!
  ): SubscriptionOnAccount
  subscriptionOnAccounts(
    cursor: SubscriptionOnAccountWhereUniqueInput
    distinct: [SubscriptionOnAccountScalarFieldEnum!]
    orderBy: [SubscriptionOnAccountOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: SubscriptionOnAccountWhereInput
  ): [SubscriptionOnAccount!]!
  subscriptions(
    cursor: SubscriptionWhereUniqueInput
    distinct: [SubscriptionScalarFieldEnum!]
    orderBy: [SubscriptionOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: SubscriptionWhereInput
  ): [Subscription!]!
  subuserOnAccount(where: SubuserOnAccountWhereUniqueInput!): SubuserOnAccount
  subuserOnAccounts(
    cursor: SubuserOnAccountWhereUniqueInput
    distinct: [SubuserOnAccountScalarFieldEnum!]
    orderBy: [SubuserOnAccountOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: SubuserOnAccountWhereInput
  ): [SubuserOnAccount!]!
  token(where: TokenWhereUniqueInput!): Token
  tokens(
    cursor: TokenWhereUniqueInput
    distinct: [TokenScalarFieldEnum!]
    orderBy: [TokenOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: TokenWhereInput
  ): [Token!]!
  transaction(where: TransactionWhereUniqueInput!): Transaction
  transactions(
    cursor: TransactionWhereUniqueInput
    distinct: [TransactionScalarFieldEnum!]
    orderBy: [TransactionOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: TransactionWhereInput
  ): [Transaction!]!
  venueStyle(where: VenueStyleWhereUniqueInput!): VenueStyle
  venueStyles(
    cursor: VenueStyleWhereUniqueInput
    distinct: [VenueStyleScalarFieldEnum!]
    orderBy: [VenueStyleOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: VenueStyleWhereInput
  ): [VenueStyle!]!
}

enum QueryMode {
  default
  insensitive
}

type RTW {
  _count: RTWCount
  account: Account!
  accountId: String!
  active: Boolean
  createdAt: DateTime!
  deleted: DateTime
  endDate: DateTime
  files(
    cursor: FilesWhereUniqueInput
    distinct: [FilesScalarFieldEnum!]
    orderBy: [FilesOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: FilesWhereInput
  ): [Files!]!
  id: String!
  name: String!
  startDate: DateTime
  updatedAt: DateTime!
}

type RTWCount {
  files: Int!
}

type RTWCountAggregate {
  _all: Int!
  accountId: Int!
  active: Int!
  createdAt: Int!
  deleted: Int!
  endDate: Int!
  id: Int!
  name: Int!
  startDate: Int!
  updatedAt: Int!
}

input RTWCountOrderByAggregateInput {
  accountId: SortOrder
  active: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  endDate: SortOrder
  id: SortOrder
  name: SortOrder
  startDate: SortOrder
  updatedAt: SortOrder
}

input RTWCreateInput {
  account: AccountCreateNestedOneWithoutRtwInput!
  active: Boolean
  createdAt: DateTime
  deleted: DateTime
  endDate: DateTime
  files: FilesCreateNestedManyWithoutRtwInput
  id: String
  name: String!
  startDate: DateTime
  updatedAt: DateTime
}

input RTWCreateManyAccountInput {
  active: Boolean
  createdAt: DateTime
  deleted: DateTime
  endDate: DateTime
  id: String
  name: String!
  startDate: DateTime
  updatedAt: DateTime
}

input RTWCreateManyAccountInputEnvelope {
  data: [RTWCreateManyAccountInput!]!
  skipDuplicates: Boolean
}

input RTWCreateManyInput {
  accountId: String!
  active: Boolean
  createdAt: DateTime
  deleted: DateTime
  endDate: DateTime
  id: String
  name: String!
  startDate: DateTime
  updatedAt: DateTime
}

input RTWCreateNestedManyWithoutAccountInput {
  connect: [RTWWhereUniqueInput!]
  connectOrCreate: [RTWCreateOrConnectWithoutAccountInput!]
  create: [RTWCreateWithoutAccountInput!]
  createMany: RTWCreateManyAccountInputEnvelope
}

input RTWCreateNestedOneWithoutFilesInput {
  connect: RTWWhereUniqueInput
  connectOrCreate: RTWCreateOrConnectWithoutFilesInput
  create: RTWCreateWithoutFilesInput
}

input RTWCreateOrConnectWithoutAccountInput {
  create: RTWCreateWithoutAccountInput!
  where: RTWWhereUniqueInput!
}

input RTWCreateOrConnectWithoutFilesInput {
  create: RTWCreateWithoutFilesInput!
  where: RTWWhereUniqueInput!
}

input RTWCreateWithoutAccountInput {
  active: Boolean
  createdAt: DateTime
  deleted: DateTime
  endDate: DateTime
  files: FilesCreateNestedManyWithoutRtwInput
  id: String
  name: String!
  startDate: DateTime
  updatedAt: DateTime
}

input RTWCreateWithoutFilesInput {
  account: AccountCreateNestedOneWithoutRtwInput!
  active: Boolean
  createdAt: DateTime
  deleted: DateTime
  endDate: DateTime
  id: String
  name: String!
  startDate: DateTime
  updatedAt: DateTime
}

type RTWGroupBy {
  _count: RTWCountAggregate
  _max: RTWMaxAggregate
  _min: RTWMinAggregate
  accountId: String!
  active: Boolean
  createdAt: DateTime!
  deleted: DateTime
  endDate: DateTime
  id: String!
  name: String!
  startDate: DateTime
  updatedAt: DateTime!
}

input RTWListRelationFilter {
  every: RTWWhereInput
  none: RTWWhereInput
  some: RTWWhereInput
}

type RTWMaxAggregate {
  accountId: String
  active: Boolean
  createdAt: DateTime
  deleted: DateTime
  endDate: DateTime
  id: String
  name: String
  startDate: DateTime
  updatedAt: DateTime
}

input RTWMaxOrderByAggregateInput {
  accountId: SortOrder
  active: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  endDate: SortOrder
  id: SortOrder
  name: SortOrder
  startDate: SortOrder
  updatedAt: SortOrder
}

type RTWMinAggregate {
  accountId: String
  active: Boolean
  createdAt: DateTime
  deleted: DateTime
  endDate: DateTime
  id: String
  name: String
  startDate: DateTime
  updatedAt: DateTime
}

input RTWMinOrderByAggregateInput {
  accountId: SortOrder
  active: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  endDate: SortOrder
  id: SortOrder
  name: SortOrder
  startDate: SortOrder
  updatedAt: SortOrder
}

input RTWOrderByRelationAggregateInput {
  _count: SortOrder
}

enum RTWOrderByRelevanceFieldEnum {
  accountId
  id
  name
}

input RTWOrderByRelevanceInput {
  fields: [RTWOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input RTWOrderByWithAggregationInput {
  _count: RTWCountOrderByAggregateInput
  _max: RTWMaxOrderByAggregateInput
  _min: RTWMinOrderByAggregateInput
  accountId: SortOrder
  active: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  endDate: SortOrder
  id: SortOrder
  name: SortOrder
  startDate: SortOrder
  updatedAt: SortOrder
}

input RTWOrderByWithRelationAndSearchRelevanceInput {
  _relevance: RTWOrderByRelevanceInput
  account: AccountOrderByWithRelationAndSearchRelevanceInput
  accountId: SortOrder
  active: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  endDate: SortOrder
  files: FilesOrderByRelationAggregateInput
  id: SortOrder
  name: SortOrder
  startDate: SortOrder
  updatedAt: SortOrder
}

input RTWRelationFilter {
  is: RTWWhereInput
  isNot: RTWWhereInput
}

enum RTWScalarFieldEnum {
  accountId
  active
  createdAt
  deleted
  endDate
  id
  name
  startDate
  updatedAt
}

input RTWScalarWhereInput {
  AND: [RTWScalarWhereInput!]
  NOT: [RTWScalarWhereInput!]
  OR: [RTWScalarWhereInput!]
  accountId: StringFilter
  active: BoolNullableFilter
  createdAt: DateTimeFilter
  deleted: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  id: StringFilter
  name: StringFilter
  startDate: DateTimeNullableFilter
  updatedAt: DateTimeFilter
}

input RTWScalarWhereWithAggregatesInput {
  AND: [RTWScalarWhereWithAggregatesInput!]
  NOT: [RTWScalarWhereWithAggregatesInput!]
  OR: [RTWScalarWhereWithAggregatesInput!]
  accountId: StringWithAggregatesFilter
  active: BoolNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deleted: DateTimeNullableWithAggregatesFilter
  endDate: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  startDate: DateTimeNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input RTWUpdateInput {
  account: AccountUpdateOneRequiredWithoutRtwInput
  active: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  files: FilesUpdateManyWithoutRtwInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  startDate: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RTWUpdateManyMutationInput {
  active: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  startDate: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RTWUpdateManyWithWhereWithoutAccountInput {
  data: RTWUpdateManyMutationInput!
  where: RTWScalarWhereInput!
}

input RTWUpdateManyWithoutAccountInput {
  connect: [RTWWhereUniqueInput!]
  connectOrCreate: [RTWCreateOrConnectWithoutAccountInput!]
  create: [RTWCreateWithoutAccountInput!]
  createMany: RTWCreateManyAccountInputEnvelope
  delete: [RTWWhereUniqueInput!]
  deleteMany: [RTWScalarWhereInput!]
  disconnect: [RTWWhereUniqueInput!]
  set: [RTWWhereUniqueInput!]
  update: [RTWUpdateWithWhereUniqueWithoutAccountInput!]
  updateMany: [RTWUpdateManyWithWhereWithoutAccountInput!]
  upsert: [RTWUpsertWithWhereUniqueWithoutAccountInput!]
}

input RTWUpdateOneWithoutFilesInput {
  connect: RTWWhereUniqueInput
  connectOrCreate: RTWCreateOrConnectWithoutFilesInput
  create: RTWCreateWithoutFilesInput
  delete: Boolean
  disconnect: Boolean
  update: RTWUpdateWithoutFilesInput
  upsert: RTWUpsertWithoutFilesInput
}

input RTWUpdateWithWhereUniqueWithoutAccountInput {
  data: RTWUpdateWithoutAccountInput!
  where: RTWWhereUniqueInput!
}

input RTWUpdateWithoutAccountInput {
  active: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  files: FilesUpdateManyWithoutRtwInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  startDate: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RTWUpdateWithoutFilesInput {
  account: AccountUpdateOneRequiredWithoutRtwInput
  active: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  startDate: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RTWUpsertWithWhereUniqueWithoutAccountInput {
  create: RTWCreateWithoutAccountInput!
  update: RTWUpdateWithoutAccountInput!
  where: RTWWhereUniqueInput!
}

input RTWUpsertWithoutFilesInput {
  create: RTWCreateWithoutFilesInput!
  update: RTWUpdateWithoutFilesInput!
}

input RTWWhereInput {
  AND: [RTWWhereInput!]
  NOT: [RTWWhereInput!]
  OR: [RTWWhereInput!]
  account: AccountRelationFilter
  accountId: StringFilter
  active: BoolNullableFilter
  createdAt: DateTimeFilter
  deleted: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  files: FilesListRelationFilter
  id: StringFilter
  name: StringFilter
  startDate: DateTimeNullableFilter
  updatedAt: DateTimeFilter
}

input RTWWhereUniqueInput {
  id: String
}

type Room {
  _count: RoomCount
  accessibility: Boolean
  address: Address!
  addressId: String!
  arrangements(
    cursor: ArrangementOfRoomWhereUniqueInput
    distinct: [ArrangementOfRoomScalarFieldEnum!]
    orderBy: [ArrangementOfRoomOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: ArrangementOfRoomWhereInput
  ): [ArrangementOfRoom!]!
  building: String
  checkin: DateTime
  checkout: DateTime
  createdAt: DateTime!
  deleted: DateTime
  featuresOfRoom(
    cursor: FeatureOfRoomWhereUniqueInput
    distinct: [FeatureOfRoomScalarFieldEnum!]
    orderBy: [FeatureOfRoomOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: FeatureOfRoomWhereInput
  ): [FeatureOfRoom!]!
  floor: String
  height: String
  id: String!
  length: String
  name: String!
  updatedAt: DateTime!
  width: String
}

type RoomCount {
  arrangements: Int!
  featuresOfRoom: Int!
}

type RoomCountAggregate {
  _all: Int!
  accessibility: Int!
  addressId: Int!
  building: Int!
  checkin: Int!
  checkout: Int!
  createdAt: Int!
  deleted: Int!
  floor: Int!
  height: Int!
  id: Int!
  length: Int!
  name: Int!
  updatedAt: Int!
  width: Int!
}

input RoomCountOrderByAggregateInput {
  accessibility: SortOrder
  addressId: SortOrder
  building: SortOrder
  checkin: SortOrder
  checkout: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  floor: SortOrder
  height: SortOrder
  id: SortOrder
  length: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  width: SortOrder
}

input RoomCreateInput {
  accessibility: Boolean
  address: AddressCreateNestedOneWithoutRoomsInput!
  arrangements: ArrangementOfRoomCreateNestedManyWithoutRoomInput
  building: String
  checkin: DateTime
  checkout: DateTime
  createdAt: DateTime
  deleted: DateTime
  featuresOfRoom: FeatureOfRoomCreateNestedManyWithoutRoomInput
  floor: String
  height: String
  id: String
  length: String
  name: String!
  updatedAt: DateTime
  width: String
}

input RoomCreateManyAddressInput {
  accessibility: Boolean
  building: String
  checkin: DateTime
  checkout: DateTime
  createdAt: DateTime
  deleted: DateTime
  floor: String
  height: String
  id: String
  length: String
  name: String!
  updatedAt: DateTime
  width: String
}

input RoomCreateManyAddressInputEnvelope {
  data: [RoomCreateManyAddressInput!]!
  skipDuplicates: Boolean
}

input RoomCreateManyInput {
  accessibility: Boolean
  addressId: String!
  building: String
  checkin: DateTime
  checkout: DateTime
  createdAt: DateTime
  deleted: DateTime
  floor: String
  height: String
  id: String
  length: String
  name: String!
  updatedAt: DateTime
  width: String
}

input RoomCreateNestedManyWithoutAddressInput {
  connect: [RoomWhereUniqueInput!]
  connectOrCreate: [RoomCreateOrConnectWithoutAddressInput!]
  create: [RoomCreateWithoutAddressInput!]
  createMany: RoomCreateManyAddressInputEnvelope
}

input RoomCreateNestedOneWithoutArrangementsInput {
  connect: RoomWhereUniqueInput
  connectOrCreate: RoomCreateOrConnectWithoutArrangementsInput
  create: RoomCreateWithoutArrangementsInput
}

input RoomCreateNestedOneWithoutFeaturesOfRoomInput {
  connect: RoomWhereUniqueInput
  connectOrCreate: RoomCreateOrConnectWithoutFeaturesOfRoomInput
  create: RoomCreateWithoutFeaturesOfRoomInput
}

input RoomCreateOrConnectWithoutAddressInput {
  create: RoomCreateWithoutAddressInput!
  where: RoomWhereUniqueInput!
}

input RoomCreateOrConnectWithoutArrangementsInput {
  create: RoomCreateWithoutArrangementsInput!
  where: RoomWhereUniqueInput!
}

input RoomCreateOrConnectWithoutFeaturesOfRoomInput {
  create: RoomCreateWithoutFeaturesOfRoomInput!
  where: RoomWhereUniqueInput!
}

input RoomCreateWithoutAddressInput {
  accessibility: Boolean
  arrangements: ArrangementOfRoomCreateNestedManyWithoutRoomInput
  building: String
  checkin: DateTime
  checkout: DateTime
  createdAt: DateTime
  deleted: DateTime
  featuresOfRoom: FeatureOfRoomCreateNestedManyWithoutRoomInput
  floor: String
  height: String
  id: String
  length: String
  name: String!
  updatedAt: DateTime
  width: String
}

input RoomCreateWithoutArrangementsInput {
  accessibility: Boolean
  address: AddressCreateNestedOneWithoutRoomsInput!
  building: String
  checkin: DateTime
  checkout: DateTime
  createdAt: DateTime
  deleted: DateTime
  featuresOfRoom: FeatureOfRoomCreateNestedManyWithoutRoomInput
  floor: String
  height: String
  id: String
  length: String
  name: String!
  updatedAt: DateTime
  width: String
}

input RoomCreateWithoutFeaturesOfRoomInput {
  accessibility: Boolean
  address: AddressCreateNestedOneWithoutRoomsInput!
  arrangements: ArrangementOfRoomCreateNestedManyWithoutRoomInput
  building: String
  checkin: DateTime
  checkout: DateTime
  createdAt: DateTime
  deleted: DateTime
  floor: String
  height: String
  id: String
  length: String
  name: String!
  updatedAt: DateTime
  width: String
}

type RoomGroupBy {
  _count: RoomCountAggregate
  _max: RoomMaxAggregate
  _min: RoomMinAggregate
  accessibility: Boolean
  addressId: String!
  building: String
  checkin: DateTime
  checkout: DateTime
  createdAt: DateTime!
  deleted: DateTime
  floor: String
  height: String
  id: String!
  length: String
  name: String!
  updatedAt: DateTime!
  width: String
}

input RoomListRelationFilter {
  every: RoomWhereInput
  none: RoomWhereInput
  some: RoomWhereInput
}

type RoomMaxAggregate {
  accessibility: Boolean
  addressId: String
  building: String
  checkin: DateTime
  checkout: DateTime
  createdAt: DateTime
  deleted: DateTime
  floor: String
  height: String
  id: String
  length: String
  name: String
  updatedAt: DateTime
  width: String
}

input RoomMaxOrderByAggregateInput {
  accessibility: SortOrder
  addressId: SortOrder
  building: SortOrder
  checkin: SortOrder
  checkout: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  floor: SortOrder
  height: SortOrder
  id: SortOrder
  length: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  width: SortOrder
}

type RoomMinAggregate {
  accessibility: Boolean
  addressId: String
  building: String
  checkin: DateTime
  checkout: DateTime
  createdAt: DateTime
  deleted: DateTime
  floor: String
  height: String
  id: String
  length: String
  name: String
  updatedAt: DateTime
  width: String
}

input RoomMinOrderByAggregateInput {
  accessibility: SortOrder
  addressId: SortOrder
  building: SortOrder
  checkin: SortOrder
  checkout: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  floor: SortOrder
  height: SortOrder
  id: SortOrder
  length: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  width: SortOrder
}

input RoomOrderByRelationAggregateInput {
  _count: SortOrder
}

enum RoomOrderByRelevanceFieldEnum {
  addressId
  building
  floor
  height
  id
  length
  name
  width
}

input RoomOrderByRelevanceInput {
  fields: [RoomOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input RoomOrderByWithAggregationInput {
  _count: RoomCountOrderByAggregateInput
  _max: RoomMaxOrderByAggregateInput
  _min: RoomMinOrderByAggregateInput
  accessibility: SortOrder
  addressId: SortOrder
  building: SortOrder
  checkin: SortOrder
  checkout: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  floor: SortOrder
  height: SortOrder
  id: SortOrder
  length: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  width: SortOrder
}

input RoomOrderByWithRelationAndSearchRelevanceInput {
  _relevance: RoomOrderByRelevanceInput
  accessibility: SortOrder
  address: AddressOrderByWithRelationAndSearchRelevanceInput
  addressId: SortOrder
  arrangements: ArrangementOfRoomOrderByRelationAggregateInput
  building: SortOrder
  checkin: SortOrder
  checkout: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  featuresOfRoom: FeatureOfRoomOrderByRelationAggregateInput
  floor: SortOrder
  height: SortOrder
  id: SortOrder
  length: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  width: SortOrder
}

input RoomRelationFilter {
  is: RoomWhereInput
  isNot: RoomWhereInput
}

enum RoomScalarFieldEnum {
  accessibility
  addressId
  building
  checkin
  checkout
  createdAt
  deleted
  floor
  height
  id
  length
  name
  updatedAt
  width
}

input RoomScalarWhereInput {
  AND: [RoomScalarWhereInput!]
  NOT: [RoomScalarWhereInput!]
  OR: [RoomScalarWhereInput!]
  accessibility: BoolNullableFilter
  addressId: StringFilter
  building: StringNullableFilter
  checkin: DateTimeNullableFilter
  checkout: DateTimeNullableFilter
  createdAt: DateTimeFilter
  deleted: DateTimeNullableFilter
  floor: StringNullableFilter
  height: StringNullableFilter
  id: StringFilter
  length: StringNullableFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  width: StringNullableFilter
}

input RoomScalarWhereWithAggregatesInput {
  AND: [RoomScalarWhereWithAggregatesInput!]
  NOT: [RoomScalarWhereWithAggregatesInput!]
  OR: [RoomScalarWhereWithAggregatesInput!]
  accessibility: BoolNullableWithAggregatesFilter
  addressId: StringWithAggregatesFilter
  building: StringNullableWithAggregatesFilter
  checkin: DateTimeNullableWithAggregatesFilter
  checkout: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deleted: DateTimeNullableWithAggregatesFilter
  floor: StringNullableWithAggregatesFilter
  height: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  length: StringNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  width: StringNullableWithAggregatesFilter
}

input RoomUpdateInput {
  accessibility: NullableBoolFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutRoomsInput
  arrangements: ArrangementOfRoomUpdateManyWithoutRoomInput
  building: NullableStringFieldUpdateOperationsInput
  checkin: NullableDateTimeFieldUpdateOperationsInput
  checkout: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  featuresOfRoom: FeatureOfRoomUpdateManyWithoutRoomInput
  floor: NullableStringFieldUpdateOperationsInput
  height: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  length: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  width: NullableStringFieldUpdateOperationsInput
}

input RoomUpdateManyMutationInput {
  accessibility: NullableBoolFieldUpdateOperationsInput
  building: NullableStringFieldUpdateOperationsInput
  checkin: NullableDateTimeFieldUpdateOperationsInput
  checkout: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  floor: NullableStringFieldUpdateOperationsInput
  height: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  length: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  width: NullableStringFieldUpdateOperationsInput
}

input RoomUpdateManyWithWhereWithoutAddressInput {
  data: RoomUpdateManyMutationInput!
  where: RoomScalarWhereInput!
}

input RoomUpdateManyWithoutAddressInput {
  connect: [RoomWhereUniqueInput!]
  connectOrCreate: [RoomCreateOrConnectWithoutAddressInput!]
  create: [RoomCreateWithoutAddressInput!]
  createMany: RoomCreateManyAddressInputEnvelope
  delete: [RoomWhereUniqueInput!]
  deleteMany: [RoomScalarWhereInput!]
  disconnect: [RoomWhereUniqueInput!]
  set: [RoomWhereUniqueInput!]
  update: [RoomUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [RoomUpdateManyWithWhereWithoutAddressInput!]
  upsert: [RoomUpsertWithWhereUniqueWithoutAddressInput!]
}

input RoomUpdateOneRequiredWithoutArrangementsInput {
  connect: RoomWhereUniqueInput
  connectOrCreate: RoomCreateOrConnectWithoutArrangementsInput
  create: RoomCreateWithoutArrangementsInput
  update: RoomUpdateWithoutArrangementsInput
  upsert: RoomUpsertWithoutArrangementsInput
}

input RoomUpdateOneRequiredWithoutFeaturesOfRoomInput {
  connect: RoomWhereUniqueInput
  connectOrCreate: RoomCreateOrConnectWithoutFeaturesOfRoomInput
  create: RoomCreateWithoutFeaturesOfRoomInput
  update: RoomUpdateWithoutFeaturesOfRoomInput
  upsert: RoomUpsertWithoutFeaturesOfRoomInput
}

input RoomUpdateWithWhereUniqueWithoutAddressInput {
  data: RoomUpdateWithoutAddressInput!
  where: RoomWhereUniqueInput!
}

input RoomUpdateWithoutAddressInput {
  accessibility: NullableBoolFieldUpdateOperationsInput
  arrangements: ArrangementOfRoomUpdateManyWithoutRoomInput
  building: NullableStringFieldUpdateOperationsInput
  checkin: NullableDateTimeFieldUpdateOperationsInput
  checkout: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  featuresOfRoom: FeatureOfRoomUpdateManyWithoutRoomInput
  floor: NullableStringFieldUpdateOperationsInput
  height: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  length: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  width: NullableStringFieldUpdateOperationsInput
}

input RoomUpdateWithoutArrangementsInput {
  accessibility: NullableBoolFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutRoomsInput
  building: NullableStringFieldUpdateOperationsInput
  checkin: NullableDateTimeFieldUpdateOperationsInput
  checkout: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  featuresOfRoom: FeatureOfRoomUpdateManyWithoutRoomInput
  floor: NullableStringFieldUpdateOperationsInput
  height: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  length: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  width: NullableStringFieldUpdateOperationsInput
}

input RoomUpdateWithoutFeaturesOfRoomInput {
  accessibility: NullableBoolFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutRoomsInput
  arrangements: ArrangementOfRoomUpdateManyWithoutRoomInput
  building: NullableStringFieldUpdateOperationsInput
  checkin: NullableDateTimeFieldUpdateOperationsInput
  checkout: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  floor: NullableStringFieldUpdateOperationsInput
  height: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  length: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  width: NullableStringFieldUpdateOperationsInput
}

input RoomUpsertWithWhereUniqueWithoutAddressInput {
  create: RoomCreateWithoutAddressInput!
  update: RoomUpdateWithoutAddressInput!
  where: RoomWhereUniqueInput!
}

input RoomUpsertWithoutArrangementsInput {
  create: RoomCreateWithoutArrangementsInput!
  update: RoomUpdateWithoutArrangementsInput!
}

input RoomUpsertWithoutFeaturesOfRoomInput {
  create: RoomCreateWithoutFeaturesOfRoomInput!
  update: RoomUpdateWithoutFeaturesOfRoomInput!
}

input RoomWhereInput {
  AND: [RoomWhereInput!]
  NOT: [RoomWhereInput!]
  OR: [RoomWhereInput!]
  accessibility: BoolNullableFilter
  address: AddressRelationFilter
  addressId: StringFilter
  arrangements: ArrangementOfRoomListRelationFilter
  building: StringNullableFilter
  checkin: DateTimeNullableFilter
  checkout: DateTimeNullableFilter
  createdAt: DateTimeFilter
  deleted: DateTimeNullableFilter
  featuresOfRoom: FeatureOfRoomListRelationFilter
  floor: StringNullableFilter
  height: StringNullableFilter
  id: StringFilter
  length: StringNullableFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  width: StringNullableFilter
}

input RoomWhereUniqueInput {
  id: String
}

type SIABadge {
  account: Account!
  account_id: String!
  createdAt: DateTime!
  deleted: DateTime
  id: Int!
  image: String!
  license: License!
  type: LicenseType!
  updatedAt: DateTime!
}

type SIABadgeAvgAggregate {
  id: Float
}

input SIABadgeAvgOrderByAggregateInput {
  id: SortOrder
}

type SIABadgeCountAggregate {
  _all: Int!
  account_id: Int!
  createdAt: Int!
  deleted: Int!
  id: Int!
  image: Int!
  license: Int!
  type: Int!
  updatedAt: Int!
}

input SIABadgeCountOrderByAggregateInput {
  account_id: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  image: SortOrder
  license: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

input SIABadgeCreateInput {
  account: AccountCreateNestedOneWithoutSiaInput!
  createdAt: DateTime
  deleted: DateTime
  id: Int!
  image: String!
  license: License!
  type: LicenseType!
  updatedAt: DateTime
}

input SIABadgeCreateManyAccountInput {
  createdAt: DateTime
  deleted: DateTime
  id: Int!
  image: String!
  license: License!
  type: LicenseType!
  updatedAt: DateTime
}

input SIABadgeCreateManyAccountInputEnvelope {
  data: [SIABadgeCreateManyAccountInput!]!
  skipDuplicates: Boolean
}

input SIABadgeCreateManyInput {
  account_id: String!
  createdAt: DateTime
  deleted: DateTime
  id: Int!
  image: String!
  license: License!
  type: LicenseType!
  updatedAt: DateTime
}

input SIABadgeCreateNestedManyWithoutAccountInput {
  connect: [SIABadgeWhereUniqueInput!]
  connectOrCreate: [SIABadgeCreateOrConnectWithoutAccountInput!]
  create: [SIABadgeCreateWithoutAccountInput!]
  createMany: SIABadgeCreateManyAccountInputEnvelope
}

input SIABadgeCreateOrConnectWithoutAccountInput {
  create: SIABadgeCreateWithoutAccountInput!
  where: SIABadgeWhereUniqueInput!
}

input SIABadgeCreateWithoutAccountInput {
  createdAt: DateTime
  deleted: DateTime
  id: Int!
  image: String!
  license: License!
  type: LicenseType!
  updatedAt: DateTime
}

type SIABadgeGroupBy {
  _avg: SIABadgeAvgAggregate
  _count: SIABadgeCountAggregate
  _max: SIABadgeMaxAggregate
  _min: SIABadgeMinAggregate
  _sum: SIABadgeSumAggregate
  account_id: String!
  createdAt: DateTime!
  deleted: DateTime
  id: Int!
  image: String!
  license: License!
  type: LicenseType!
  updatedAt: DateTime!
}

input SIABadgeListRelationFilter {
  every: SIABadgeWhereInput
  none: SIABadgeWhereInput
  some: SIABadgeWhereInput
}

type SIABadgeMaxAggregate {
  account_id: String
  createdAt: DateTime
  deleted: DateTime
  id: Int
  image: String
  license: License
  type: LicenseType
  updatedAt: DateTime
}

input SIABadgeMaxOrderByAggregateInput {
  account_id: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  image: SortOrder
  license: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

type SIABadgeMinAggregate {
  account_id: String
  createdAt: DateTime
  deleted: DateTime
  id: Int
  image: String
  license: License
  type: LicenseType
  updatedAt: DateTime
}

input SIABadgeMinOrderByAggregateInput {
  account_id: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  image: SortOrder
  license: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

input SIABadgeOrderByRelationAggregateInput {
  _count: SortOrder
}

enum SIABadgeOrderByRelevanceFieldEnum {
  account_id
  image
}

input SIABadgeOrderByRelevanceInput {
  fields: [SIABadgeOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input SIABadgeOrderByWithAggregationInput {
  _avg: SIABadgeAvgOrderByAggregateInput
  _count: SIABadgeCountOrderByAggregateInput
  _max: SIABadgeMaxOrderByAggregateInput
  _min: SIABadgeMinOrderByAggregateInput
  _sum: SIABadgeSumOrderByAggregateInput
  account_id: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  image: SortOrder
  license: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

input SIABadgeOrderByWithRelationAndSearchRelevanceInput {
  _relevance: SIABadgeOrderByRelevanceInput
  account: AccountOrderByWithRelationAndSearchRelevanceInput
  account_id: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  image: SortOrder
  license: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

enum SIABadgeScalarFieldEnum {
  account_id
  createdAt
  deleted
  id
  image
  license
  type
  updatedAt
}

input SIABadgeScalarWhereInput {
  AND: [SIABadgeScalarWhereInput!]
  NOT: [SIABadgeScalarWhereInput!]
  OR: [SIABadgeScalarWhereInput!]
  account_id: StringFilter
  createdAt: DateTimeFilter
  deleted: DateTimeNullableFilter
  id: IntFilter
  image: StringFilter
  license: EnumLicenseFilter
  type: EnumLicenseTypeFilter
  updatedAt: DateTimeFilter
}

input SIABadgeScalarWhereWithAggregatesInput {
  AND: [SIABadgeScalarWhereWithAggregatesInput!]
  NOT: [SIABadgeScalarWhereWithAggregatesInput!]
  OR: [SIABadgeScalarWhereWithAggregatesInput!]
  account_id: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deleted: DateTimeNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  image: StringWithAggregatesFilter
  license: EnumLicenseWithAggregatesFilter
  type: EnumLicenseTypeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type SIABadgeSumAggregate {
  id: Int
}

input SIABadgeSumOrderByAggregateInput {
  id: SortOrder
}

input SIABadgeUpdateInput {
  account: AccountUpdateOneRequiredWithoutSiaInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  license: EnumLicenseFieldUpdateOperationsInput
  type: EnumLicenseTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SIABadgeUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  license: EnumLicenseFieldUpdateOperationsInput
  type: EnumLicenseTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SIABadgeUpdateManyWithWhereWithoutAccountInput {
  data: SIABadgeUpdateManyMutationInput!
  where: SIABadgeScalarWhereInput!
}

input SIABadgeUpdateManyWithoutAccountInput {
  connect: [SIABadgeWhereUniqueInput!]
  connectOrCreate: [SIABadgeCreateOrConnectWithoutAccountInput!]
  create: [SIABadgeCreateWithoutAccountInput!]
  createMany: SIABadgeCreateManyAccountInputEnvelope
  delete: [SIABadgeWhereUniqueInput!]
  deleteMany: [SIABadgeScalarWhereInput!]
  disconnect: [SIABadgeWhereUniqueInput!]
  set: [SIABadgeWhereUniqueInput!]
  update: [SIABadgeUpdateWithWhereUniqueWithoutAccountInput!]
  updateMany: [SIABadgeUpdateManyWithWhereWithoutAccountInput!]
  upsert: [SIABadgeUpsertWithWhereUniqueWithoutAccountInput!]
}

input SIABadgeUpdateWithWhereUniqueWithoutAccountInput {
  data: SIABadgeUpdateWithoutAccountInput!
  where: SIABadgeWhereUniqueInput!
}

input SIABadgeUpdateWithoutAccountInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  license: EnumLicenseFieldUpdateOperationsInput
  type: EnumLicenseTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SIABadgeUpsertWithWhereUniqueWithoutAccountInput {
  create: SIABadgeCreateWithoutAccountInput!
  update: SIABadgeUpdateWithoutAccountInput!
  where: SIABadgeWhereUniqueInput!
}

input SIABadgeWhereInput {
  AND: [SIABadgeWhereInput!]
  NOT: [SIABadgeWhereInput!]
  OR: [SIABadgeWhereInput!]
  account: AccountRelationFilter
  account_id: StringFilter
  createdAt: DateTimeFilter
  deleted: DateTimeNullableFilter
  id: IntFilter
  image: StringFilter
  license: EnumLicenseFilter
  type: EnumLicenseTypeFilter
  updatedAt: DateTimeFilter
}

input SIABadgeWhereUniqueInput {
  id: Int
}

enum SortOrder {
  asc
  desc
}

type Status {
  _count: StatusCount
  account(
    cursor: StatusOnAccountWhereUniqueInput
    distinct: [StatusOnAccountScalarFieldEnum!]
    orderBy: [StatusOnAccountOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: StatusOnAccountWhereInput
  ): [StatusOnAccount!]!
  createdAt: DateTime!
  deleted: DateTime
  id: String!
  name: String!
  updatedAt: DateTime!
}

type StatusCount {
  account: Int!
}

type StatusCountAggregate {
  _all: Int!
  createdAt: Int!
  deleted: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
}

input StatusCountOrderByAggregateInput {
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input StatusCreateInput {
  account: StatusOnAccountCreateNestedManyWithoutStatusInput
  createdAt: DateTime
  deleted: DateTime
  id: String
  name: String!
  updatedAt: DateTime
}

input StatusCreateManyInput {
  createdAt: DateTime
  deleted: DateTime
  id: String
  name: String!
  updatedAt: DateTime
}

input StatusCreateNestedOneWithoutAccountInput {
  connect: StatusWhereUniqueInput
  connectOrCreate: StatusCreateOrConnectWithoutAccountInput
  create: StatusCreateWithoutAccountInput
}

input StatusCreateOrConnectWithoutAccountInput {
  create: StatusCreateWithoutAccountInput!
  where: StatusWhereUniqueInput!
}

input StatusCreateWithoutAccountInput {
  createdAt: DateTime
  deleted: DateTime
  id: String
  name: String!
  updatedAt: DateTime
}

type StatusGroupBy {
  _count: StatusCountAggregate
  _max: StatusMaxAggregate
  _min: StatusMinAggregate
  createdAt: DateTime!
  deleted: DateTime
  id: String!
  name: String!
  updatedAt: DateTime!
}

type StatusMaxAggregate {
  createdAt: DateTime
  deleted: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input StatusMaxOrderByAggregateInput {
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type StatusMinAggregate {
  createdAt: DateTime
  deleted: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input StatusMinOrderByAggregateInput {
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type StatusOnAccount {
  account: Account!
  accountId: String!
  createdAt: DateTime!
  deleted: DateTime
  status: Status!
  statusId: String!
  updatedAt: DateTime!
}

type StatusOnAccountCountAggregate {
  _all: Int!
  accountId: Int!
  createdAt: Int!
  deleted: Int!
  statusId: Int!
  updatedAt: Int!
}

input StatusOnAccountCountOrderByAggregateInput {
  accountId: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  statusId: SortOrder
  updatedAt: SortOrder
}

input StatusOnAccountCreateInput {
  account: AccountCreateNestedOneWithoutStatusInput!
  createdAt: DateTime
  deleted: DateTime
  status: StatusCreateNestedOneWithoutAccountInput!
  updatedAt: DateTime
}

input StatusOnAccountCreateManyAccountInput {
  createdAt: DateTime
  deleted: DateTime
  statusId: String!
  updatedAt: DateTime
}

input StatusOnAccountCreateManyAccountInputEnvelope {
  data: [StatusOnAccountCreateManyAccountInput!]!
  skipDuplicates: Boolean
}

input StatusOnAccountCreateManyInput {
  accountId: String!
  createdAt: DateTime
  deleted: DateTime
  statusId: String!
  updatedAt: DateTime
}

input StatusOnAccountCreateManyStatusInput {
  accountId: String!
  createdAt: DateTime
  deleted: DateTime
  updatedAt: DateTime
}

input StatusOnAccountCreateManyStatusInputEnvelope {
  data: [StatusOnAccountCreateManyStatusInput!]!
  skipDuplicates: Boolean
}

input StatusOnAccountCreateNestedManyWithoutAccountInput {
  connect: [StatusOnAccountWhereUniqueInput!]
  connectOrCreate: [StatusOnAccountCreateOrConnectWithoutAccountInput!]
  create: [StatusOnAccountCreateWithoutAccountInput!]
  createMany: StatusOnAccountCreateManyAccountInputEnvelope
}

input StatusOnAccountCreateNestedManyWithoutStatusInput {
  connect: [StatusOnAccountWhereUniqueInput!]
  connectOrCreate: [StatusOnAccountCreateOrConnectWithoutStatusInput!]
  create: [StatusOnAccountCreateWithoutStatusInput!]
  createMany: StatusOnAccountCreateManyStatusInputEnvelope
}

input StatusOnAccountCreateOrConnectWithoutAccountInput {
  create: StatusOnAccountCreateWithoutAccountInput!
  where: StatusOnAccountWhereUniqueInput!
}

input StatusOnAccountCreateOrConnectWithoutStatusInput {
  create: StatusOnAccountCreateWithoutStatusInput!
  where: StatusOnAccountWhereUniqueInput!
}

input StatusOnAccountCreateWithoutAccountInput {
  createdAt: DateTime
  deleted: DateTime
  status: StatusCreateNestedOneWithoutAccountInput!
  updatedAt: DateTime
}

input StatusOnAccountCreateWithoutStatusInput {
  account: AccountCreateNestedOneWithoutStatusInput!
  createdAt: DateTime
  deleted: DateTime
  updatedAt: DateTime
}

type StatusOnAccountGroupBy {
  _count: StatusOnAccountCountAggregate
  _max: StatusOnAccountMaxAggregate
  _min: StatusOnAccountMinAggregate
  accountId: String!
  createdAt: DateTime!
  deleted: DateTime
  statusId: String!
  updatedAt: DateTime!
}

input StatusOnAccountListRelationFilter {
  every: StatusOnAccountWhereInput
  none: StatusOnAccountWhereInput
  some: StatusOnAccountWhereInput
}

type StatusOnAccountMaxAggregate {
  accountId: String
  createdAt: DateTime
  deleted: DateTime
  statusId: String
  updatedAt: DateTime
}

input StatusOnAccountMaxOrderByAggregateInput {
  accountId: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  statusId: SortOrder
  updatedAt: SortOrder
}

type StatusOnAccountMinAggregate {
  accountId: String
  createdAt: DateTime
  deleted: DateTime
  statusId: String
  updatedAt: DateTime
}

input StatusOnAccountMinOrderByAggregateInput {
  accountId: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  statusId: SortOrder
  updatedAt: SortOrder
}

input StatusOnAccountOrderByRelationAggregateInput {
  _count: SortOrder
}

enum StatusOnAccountOrderByRelevanceFieldEnum {
  accountId
  statusId
}

input StatusOnAccountOrderByRelevanceInput {
  fields: [StatusOnAccountOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input StatusOnAccountOrderByWithAggregationInput {
  _count: StatusOnAccountCountOrderByAggregateInput
  _max: StatusOnAccountMaxOrderByAggregateInput
  _min: StatusOnAccountMinOrderByAggregateInput
  accountId: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  statusId: SortOrder
  updatedAt: SortOrder
}

input StatusOnAccountOrderByWithRelationAndSearchRelevanceInput {
  _relevance: StatusOnAccountOrderByRelevanceInput
  account: AccountOrderByWithRelationAndSearchRelevanceInput
  accountId: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  status: StatusOrderByWithRelationAndSearchRelevanceInput
  statusId: SortOrder
  updatedAt: SortOrder
}

enum StatusOnAccountScalarFieldEnum {
  accountId
  createdAt
  deleted
  statusId
  updatedAt
}

input StatusOnAccountScalarWhereInput {
  AND: [StatusOnAccountScalarWhereInput!]
  NOT: [StatusOnAccountScalarWhereInput!]
  OR: [StatusOnAccountScalarWhereInput!]
  accountId: StringFilter
  createdAt: DateTimeFilter
  deleted: DateTimeNullableFilter
  statusId: StringFilter
  updatedAt: DateTimeFilter
}

input StatusOnAccountScalarWhereWithAggregatesInput {
  AND: [StatusOnAccountScalarWhereWithAggregatesInput!]
  NOT: [StatusOnAccountScalarWhereWithAggregatesInput!]
  OR: [StatusOnAccountScalarWhereWithAggregatesInput!]
  accountId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deleted: DateTimeNullableWithAggregatesFilter
  statusId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input StatusOnAccountStatusIdAccountIdCompoundUniqueInput {
  accountId: String!
  statusId: String!
}

input StatusOnAccountUpdateInput {
  account: AccountUpdateOneRequiredWithoutStatusInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  status: StatusUpdateOneRequiredWithoutAccountInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StatusOnAccountUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StatusOnAccountUpdateManyWithWhereWithoutAccountInput {
  data: StatusOnAccountUpdateManyMutationInput!
  where: StatusOnAccountScalarWhereInput!
}

input StatusOnAccountUpdateManyWithWhereWithoutStatusInput {
  data: StatusOnAccountUpdateManyMutationInput!
  where: StatusOnAccountScalarWhereInput!
}

input StatusOnAccountUpdateManyWithoutAccountInput {
  connect: [StatusOnAccountWhereUniqueInput!]
  connectOrCreate: [StatusOnAccountCreateOrConnectWithoutAccountInput!]
  create: [StatusOnAccountCreateWithoutAccountInput!]
  createMany: StatusOnAccountCreateManyAccountInputEnvelope
  delete: [StatusOnAccountWhereUniqueInput!]
  deleteMany: [StatusOnAccountScalarWhereInput!]
  disconnect: [StatusOnAccountWhereUniqueInput!]
  set: [StatusOnAccountWhereUniqueInput!]
  update: [StatusOnAccountUpdateWithWhereUniqueWithoutAccountInput!]
  updateMany: [StatusOnAccountUpdateManyWithWhereWithoutAccountInput!]
  upsert: [StatusOnAccountUpsertWithWhereUniqueWithoutAccountInput!]
}

input StatusOnAccountUpdateManyWithoutStatusInput {
  connect: [StatusOnAccountWhereUniqueInput!]
  connectOrCreate: [StatusOnAccountCreateOrConnectWithoutStatusInput!]
  create: [StatusOnAccountCreateWithoutStatusInput!]
  createMany: StatusOnAccountCreateManyStatusInputEnvelope
  delete: [StatusOnAccountWhereUniqueInput!]
  deleteMany: [StatusOnAccountScalarWhereInput!]
  disconnect: [StatusOnAccountWhereUniqueInput!]
  set: [StatusOnAccountWhereUniqueInput!]
  update: [StatusOnAccountUpdateWithWhereUniqueWithoutStatusInput!]
  updateMany: [StatusOnAccountUpdateManyWithWhereWithoutStatusInput!]
  upsert: [StatusOnAccountUpsertWithWhereUniqueWithoutStatusInput!]
}

input StatusOnAccountUpdateWithWhereUniqueWithoutAccountInput {
  data: StatusOnAccountUpdateWithoutAccountInput!
  where: StatusOnAccountWhereUniqueInput!
}

input StatusOnAccountUpdateWithWhereUniqueWithoutStatusInput {
  data: StatusOnAccountUpdateWithoutStatusInput!
  where: StatusOnAccountWhereUniqueInput!
}

input StatusOnAccountUpdateWithoutAccountInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  status: StatusUpdateOneRequiredWithoutAccountInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StatusOnAccountUpdateWithoutStatusInput {
  account: AccountUpdateOneRequiredWithoutStatusInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StatusOnAccountUpsertWithWhereUniqueWithoutAccountInput {
  create: StatusOnAccountCreateWithoutAccountInput!
  update: StatusOnAccountUpdateWithoutAccountInput!
  where: StatusOnAccountWhereUniqueInput!
}

input StatusOnAccountUpsertWithWhereUniqueWithoutStatusInput {
  create: StatusOnAccountCreateWithoutStatusInput!
  update: StatusOnAccountUpdateWithoutStatusInput!
  where: StatusOnAccountWhereUniqueInput!
}

input StatusOnAccountWhereInput {
  AND: [StatusOnAccountWhereInput!]
  NOT: [StatusOnAccountWhereInput!]
  OR: [StatusOnAccountWhereInput!]
  account: AccountRelationFilter
  accountId: StringFilter
  createdAt: DateTimeFilter
  deleted: DateTimeNullableFilter
  status: StatusRelationFilter
  statusId: StringFilter
  updatedAt: DateTimeFilter
}

input StatusOnAccountWhereUniqueInput {
  statusId_accountId: StatusOnAccountStatusIdAccountIdCompoundUniqueInput
}

enum StatusOrderByRelevanceFieldEnum {
  id
  name
}

input StatusOrderByRelevanceInput {
  fields: [StatusOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input StatusOrderByWithAggregationInput {
  _count: StatusCountOrderByAggregateInput
  _max: StatusMaxOrderByAggregateInput
  _min: StatusMinOrderByAggregateInput
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input StatusOrderByWithRelationAndSearchRelevanceInput {
  _relevance: StatusOrderByRelevanceInput
  account: StatusOnAccountOrderByRelationAggregateInput
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input StatusRelationFilter {
  is: StatusWhereInput
  isNot: StatusWhereInput
}

enum StatusScalarFieldEnum {
  createdAt
  deleted
  id
  name
  updatedAt
}

input StatusScalarWhereWithAggregatesInput {
  AND: [StatusScalarWhereWithAggregatesInput!]
  NOT: [StatusScalarWhereWithAggregatesInput!]
  OR: [StatusScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  deleted: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input StatusUpdateInput {
  account: StatusOnAccountUpdateManyWithoutStatusInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StatusUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StatusUpdateOneRequiredWithoutAccountInput {
  connect: StatusWhereUniqueInput
  connectOrCreate: StatusCreateOrConnectWithoutAccountInput
  create: StatusCreateWithoutAccountInput
  update: StatusUpdateWithoutAccountInput
  upsert: StatusUpsertWithoutAccountInput
}

input StatusUpdateWithoutAccountInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StatusUpsertWithoutAccountInput {
  create: StatusCreateWithoutAccountInput!
  update: StatusUpdateWithoutAccountInput!
}

input StatusWhereInput {
  AND: [StatusWhereInput!]
  NOT: [StatusWhereInput!]
  OR: [StatusWhereInput!]
  account: StatusOnAccountListRelationFilter
  createdAt: DateTimeFilter
  deleted: DateTimeNullableFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input StatusWhereUniqueInput {
  id: String
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  search: String
  startsWith: String
}

type Subscription {
  _count: SubscriptionCount
  accounts(
    cursor: SubscriptionOnAccountWhereUniqueInput
    distinct: [SubscriptionOnAccountScalarFieldEnum!]
    orderBy: [SubscriptionOnAccountOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: SubscriptionOnAccountWhereInput
  ): [SubscriptionOnAccount!]!
  cost: String
  createdAt: DateTime!
  deleted: DateTime
  details: String
  id: String!
  name: String
  updatedAt: DateTime!
}

type SubscriptionCount {
  accounts: Int!
}

type SubscriptionCountAggregate {
  _all: Int!
  cost: Int!
  createdAt: Int!
  deleted: Int!
  details: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
}

input SubscriptionCountOrderByAggregateInput {
  cost: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  details: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input SubscriptionCreateInput {
  accounts: SubscriptionOnAccountCreateNestedManyWithoutSubscriptionInput
  cost: String
  createdAt: DateTime
  deleted: DateTime
  details: String
  id: String
  name: String
  updatedAt: DateTime
}

input SubscriptionCreateManyInput {
  cost: String
  createdAt: DateTime
  deleted: DateTime
  details: String
  id: String
  name: String
  updatedAt: DateTime
}

input SubscriptionCreateNestedOneWithoutAccountsInput {
  connect: SubscriptionWhereUniqueInput
  connectOrCreate: SubscriptionCreateOrConnectWithoutAccountsInput
  create: SubscriptionCreateWithoutAccountsInput
}

input SubscriptionCreateOrConnectWithoutAccountsInput {
  create: SubscriptionCreateWithoutAccountsInput!
  where: SubscriptionWhereUniqueInput!
}

input SubscriptionCreateWithoutAccountsInput {
  cost: String
  createdAt: DateTime
  deleted: DateTime
  details: String
  id: String
  name: String
  updatedAt: DateTime
}

type SubscriptionGroupBy {
  _count: SubscriptionCountAggregate
  _max: SubscriptionMaxAggregate
  _min: SubscriptionMinAggregate
  cost: String
  createdAt: DateTime!
  deleted: DateTime
  details: String
  id: String!
  name: String
  updatedAt: DateTime!
}

type SubscriptionMaxAggregate {
  cost: String
  createdAt: DateTime
  deleted: DateTime
  details: String
  id: String
  name: String
  updatedAt: DateTime
}

input SubscriptionMaxOrderByAggregateInput {
  cost: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  details: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type SubscriptionMinAggregate {
  cost: String
  createdAt: DateTime
  deleted: DateTime
  details: String
  id: String
  name: String
  updatedAt: DateTime
}

input SubscriptionMinOrderByAggregateInput {
  cost: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  details: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type SubscriptionOnAccount {
  account: Account!
  accountId: String!
  activated: DateTime
  active: Boolean!
  createdAt: DateTime!
  deactivated: DateTime
  deleted: DateTime
  startedAt: DateTime
  subscription: Subscription!
  subscriptionId: String!
  updatedAt: DateTime!
}

input SubscriptionOnAccountAccountIdSubscriptionIdCompoundUniqueInput {
  accountId: String!
  subscriptionId: String!
}

type SubscriptionOnAccountCountAggregate {
  _all: Int!
  accountId: Int!
  activated: Int!
  active: Int!
  createdAt: Int!
  deactivated: Int!
  deleted: Int!
  startedAt: Int!
  subscriptionId: Int!
  updatedAt: Int!
}

input SubscriptionOnAccountCountOrderByAggregateInput {
  accountId: SortOrder
  activated: SortOrder
  active: SortOrder
  createdAt: SortOrder
  deactivated: SortOrder
  deleted: SortOrder
  startedAt: SortOrder
  subscriptionId: SortOrder
  updatedAt: SortOrder
}

input SubscriptionOnAccountCreateInput {
  account: AccountCreateNestedOneWithoutSubscriptionInput!
  activated: DateTime
  active: Boolean
  createdAt: DateTime
  deactivated: DateTime
  deleted: DateTime
  startedAt: DateTime
  subscription: SubscriptionCreateNestedOneWithoutAccountsInput!
  updatedAt: DateTime
}

input SubscriptionOnAccountCreateManyAccountInput {
  activated: DateTime
  active: Boolean
  createdAt: DateTime
  deactivated: DateTime
  deleted: DateTime
  startedAt: DateTime
  subscriptionId: String!
  updatedAt: DateTime
}

input SubscriptionOnAccountCreateManyAccountInputEnvelope {
  data: [SubscriptionOnAccountCreateManyAccountInput!]!
  skipDuplicates: Boolean
}

input SubscriptionOnAccountCreateManyInput {
  accountId: String!
  activated: DateTime
  active: Boolean
  createdAt: DateTime
  deactivated: DateTime
  deleted: DateTime
  startedAt: DateTime
  subscriptionId: String!
  updatedAt: DateTime
}

input SubscriptionOnAccountCreateManySubscriptionInput {
  accountId: String!
  activated: DateTime
  active: Boolean
  createdAt: DateTime
  deactivated: DateTime
  deleted: DateTime
  startedAt: DateTime
  updatedAt: DateTime
}

input SubscriptionOnAccountCreateManySubscriptionInputEnvelope {
  data: [SubscriptionOnAccountCreateManySubscriptionInput!]!
  skipDuplicates: Boolean
}

input SubscriptionOnAccountCreateNestedManyWithoutAccountInput {
  connect: [SubscriptionOnAccountWhereUniqueInput!]
  connectOrCreate: [SubscriptionOnAccountCreateOrConnectWithoutAccountInput!]
  create: [SubscriptionOnAccountCreateWithoutAccountInput!]
  createMany: SubscriptionOnAccountCreateManyAccountInputEnvelope
}

input SubscriptionOnAccountCreateNestedManyWithoutSubscriptionInput {
  connect: [SubscriptionOnAccountWhereUniqueInput!]
  connectOrCreate: [SubscriptionOnAccountCreateOrConnectWithoutSubscriptionInput!]
  create: [SubscriptionOnAccountCreateWithoutSubscriptionInput!]
  createMany: SubscriptionOnAccountCreateManySubscriptionInputEnvelope
}

input SubscriptionOnAccountCreateOrConnectWithoutAccountInput {
  create: SubscriptionOnAccountCreateWithoutAccountInput!
  where: SubscriptionOnAccountWhereUniqueInput!
}

input SubscriptionOnAccountCreateOrConnectWithoutSubscriptionInput {
  create: SubscriptionOnAccountCreateWithoutSubscriptionInput!
  where: SubscriptionOnAccountWhereUniqueInput!
}

input SubscriptionOnAccountCreateWithoutAccountInput {
  activated: DateTime
  active: Boolean
  createdAt: DateTime
  deactivated: DateTime
  deleted: DateTime
  startedAt: DateTime
  subscription: SubscriptionCreateNestedOneWithoutAccountsInput!
  updatedAt: DateTime
}

input SubscriptionOnAccountCreateWithoutSubscriptionInput {
  account: AccountCreateNestedOneWithoutSubscriptionInput!
  activated: DateTime
  active: Boolean
  createdAt: DateTime
  deactivated: DateTime
  deleted: DateTime
  startedAt: DateTime
  updatedAt: DateTime
}

type SubscriptionOnAccountGroupBy {
  _count: SubscriptionOnAccountCountAggregate
  _max: SubscriptionOnAccountMaxAggregate
  _min: SubscriptionOnAccountMinAggregate
  accountId: String!
  activated: DateTime
  active: Boolean!
  createdAt: DateTime!
  deactivated: DateTime
  deleted: DateTime
  startedAt: DateTime
  subscriptionId: String!
  updatedAt: DateTime!
}

input SubscriptionOnAccountListRelationFilter {
  every: SubscriptionOnAccountWhereInput
  none: SubscriptionOnAccountWhereInput
  some: SubscriptionOnAccountWhereInput
}

type SubscriptionOnAccountMaxAggregate {
  accountId: String
  activated: DateTime
  active: Boolean
  createdAt: DateTime
  deactivated: DateTime
  deleted: DateTime
  startedAt: DateTime
  subscriptionId: String
  updatedAt: DateTime
}

input SubscriptionOnAccountMaxOrderByAggregateInput {
  accountId: SortOrder
  activated: SortOrder
  active: SortOrder
  createdAt: SortOrder
  deactivated: SortOrder
  deleted: SortOrder
  startedAt: SortOrder
  subscriptionId: SortOrder
  updatedAt: SortOrder
}

type SubscriptionOnAccountMinAggregate {
  accountId: String
  activated: DateTime
  active: Boolean
  createdAt: DateTime
  deactivated: DateTime
  deleted: DateTime
  startedAt: DateTime
  subscriptionId: String
  updatedAt: DateTime
}

input SubscriptionOnAccountMinOrderByAggregateInput {
  accountId: SortOrder
  activated: SortOrder
  active: SortOrder
  createdAt: SortOrder
  deactivated: SortOrder
  deleted: SortOrder
  startedAt: SortOrder
  subscriptionId: SortOrder
  updatedAt: SortOrder
}

input SubscriptionOnAccountOrderByRelationAggregateInput {
  _count: SortOrder
}

enum SubscriptionOnAccountOrderByRelevanceFieldEnum {
  accountId
  subscriptionId
}

input SubscriptionOnAccountOrderByRelevanceInput {
  fields: [SubscriptionOnAccountOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input SubscriptionOnAccountOrderByWithAggregationInput {
  _count: SubscriptionOnAccountCountOrderByAggregateInput
  _max: SubscriptionOnAccountMaxOrderByAggregateInput
  _min: SubscriptionOnAccountMinOrderByAggregateInput
  accountId: SortOrder
  activated: SortOrder
  active: SortOrder
  createdAt: SortOrder
  deactivated: SortOrder
  deleted: SortOrder
  startedAt: SortOrder
  subscriptionId: SortOrder
  updatedAt: SortOrder
}

input SubscriptionOnAccountOrderByWithRelationAndSearchRelevanceInput {
  _relevance: SubscriptionOnAccountOrderByRelevanceInput
  account: AccountOrderByWithRelationAndSearchRelevanceInput
  accountId: SortOrder
  activated: SortOrder
  active: SortOrder
  createdAt: SortOrder
  deactivated: SortOrder
  deleted: SortOrder
  startedAt: SortOrder
  subscription: SubscriptionOrderByWithRelationAndSearchRelevanceInput
  subscriptionId: SortOrder
  updatedAt: SortOrder
}

enum SubscriptionOnAccountScalarFieldEnum {
  accountId
  activated
  active
  createdAt
  deactivated
  deleted
  startedAt
  subscriptionId
  updatedAt
}

input SubscriptionOnAccountScalarWhereInput {
  AND: [SubscriptionOnAccountScalarWhereInput!]
  NOT: [SubscriptionOnAccountScalarWhereInput!]
  OR: [SubscriptionOnAccountScalarWhereInput!]
  accountId: StringFilter
  activated: DateTimeNullableFilter
  active: BoolFilter
  createdAt: DateTimeFilter
  deactivated: DateTimeNullableFilter
  deleted: DateTimeNullableFilter
  startedAt: DateTimeNullableFilter
  subscriptionId: StringFilter
  updatedAt: DateTimeFilter
}

input SubscriptionOnAccountScalarWhereWithAggregatesInput {
  AND: [SubscriptionOnAccountScalarWhereWithAggregatesInput!]
  NOT: [SubscriptionOnAccountScalarWhereWithAggregatesInput!]
  OR: [SubscriptionOnAccountScalarWhereWithAggregatesInput!]
  accountId: StringWithAggregatesFilter
  activated: DateTimeNullableWithAggregatesFilter
  active: BoolWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deactivated: DateTimeNullableWithAggregatesFilter
  deleted: DateTimeNullableWithAggregatesFilter
  startedAt: DateTimeNullableWithAggregatesFilter
  subscriptionId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input SubscriptionOnAccountUpdateInput {
  account: AccountUpdateOneRequiredWithoutSubscriptionInput
  activated: NullableDateTimeFieldUpdateOperationsInput
  active: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deactivated: NullableDateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  startedAt: NullableDateTimeFieldUpdateOperationsInput
  subscription: SubscriptionUpdateOneRequiredWithoutAccountsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubscriptionOnAccountUpdateManyMutationInput {
  activated: NullableDateTimeFieldUpdateOperationsInput
  active: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deactivated: NullableDateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  startedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubscriptionOnAccountUpdateManyWithWhereWithoutAccountInput {
  data: SubscriptionOnAccountUpdateManyMutationInput!
  where: SubscriptionOnAccountScalarWhereInput!
}

input SubscriptionOnAccountUpdateManyWithWhereWithoutSubscriptionInput {
  data: SubscriptionOnAccountUpdateManyMutationInput!
  where: SubscriptionOnAccountScalarWhereInput!
}

input SubscriptionOnAccountUpdateManyWithoutAccountInput {
  connect: [SubscriptionOnAccountWhereUniqueInput!]
  connectOrCreate: [SubscriptionOnAccountCreateOrConnectWithoutAccountInput!]
  create: [SubscriptionOnAccountCreateWithoutAccountInput!]
  createMany: SubscriptionOnAccountCreateManyAccountInputEnvelope
  delete: [SubscriptionOnAccountWhereUniqueInput!]
  deleteMany: [SubscriptionOnAccountScalarWhereInput!]
  disconnect: [SubscriptionOnAccountWhereUniqueInput!]
  set: [SubscriptionOnAccountWhereUniqueInput!]
  update: [SubscriptionOnAccountUpdateWithWhereUniqueWithoutAccountInput!]
  updateMany: [SubscriptionOnAccountUpdateManyWithWhereWithoutAccountInput!]
  upsert: [SubscriptionOnAccountUpsertWithWhereUniqueWithoutAccountInput!]
}

input SubscriptionOnAccountUpdateManyWithoutSubscriptionInput {
  connect: [SubscriptionOnAccountWhereUniqueInput!]
  connectOrCreate: [SubscriptionOnAccountCreateOrConnectWithoutSubscriptionInput!]
  create: [SubscriptionOnAccountCreateWithoutSubscriptionInput!]
  createMany: SubscriptionOnAccountCreateManySubscriptionInputEnvelope
  delete: [SubscriptionOnAccountWhereUniqueInput!]
  deleteMany: [SubscriptionOnAccountScalarWhereInput!]
  disconnect: [SubscriptionOnAccountWhereUniqueInput!]
  set: [SubscriptionOnAccountWhereUniqueInput!]
  update: [SubscriptionOnAccountUpdateWithWhereUniqueWithoutSubscriptionInput!]
  updateMany: [SubscriptionOnAccountUpdateManyWithWhereWithoutSubscriptionInput!]
  upsert: [SubscriptionOnAccountUpsertWithWhereUniqueWithoutSubscriptionInput!]
}

input SubscriptionOnAccountUpdateWithWhereUniqueWithoutAccountInput {
  data: SubscriptionOnAccountUpdateWithoutAccountInput!
  where: SubscriptionOnAccountWhereUniqueInput!
}

input SubscriptionOnAccountUpdateWithWhereUniqueWithoutSubscriptionInput {
  data: SubscriptionOnAccountUpdateWithoutSubscriptionInput!
  where: SubscriptionOnAccountWhereUniqueInput!
}

input SubscriptionOnAccountUpdateWithoutAccountInput {
  activated: NullableDateTimeFieldUpdateOperationsInput
  active: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deactivated: NullableDateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  startedAt: NullableDateTimeFieldUpdateOperationsInput
  subscription: SubscriptionUpdateOneRequiredWithoutAccountsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubscriptionOnAccountUpdateWithoutSubscriptionInput {
  account: AccountUpdateOneRequiredWithoutSubscriptionInput
  activated: NullableDateTimeFieldUpdateOperationsInput
  active: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deactivated: NullableDateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  startedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubscriptionOnAccountUpsertWithWhereUniqueWithoutAccountInput {
  create: SubscriptionOnAccountCreateWithoutAccountInput!
  update: SubscriptionOnAccountUpdateWithoutAccountInput!
  where: SubscriptionOnAccountWhereUniqueInput!
}

input SubscriptionOnAccountUpsertWithWhereUniqueWithoutSubscriptionInput {
  create: SubscriptionOnAccountCreateWithoutSubscriptionInput!
  update: SubscriptionOnAccountUpdateWithoutSubscriptionInput!
  where: SubscriptionOnAccountWhereUniqueInput!
}

input SubscriptionOnAccountWhereInput {
  AND: [SubscriptionOnAccountWhereInput!]
  NOT: [SubscriptionOnAccountWhereInput!]
  OR: [SubscriptionOnAccountWhereInput!]
  account: AccountRelationFilter
  accountId: StringFilter
  activated: DateTimeNullableFilter
  active: BoolFilter
  createdAt: DateTimeFilter
  deactivated: DateTimeNullableFilter
  deleted: DateTimeNullableFilter
  startedAt: DateTimeNullableFilter
  subscription: SubscriptionRelationFilter
  subscriptionId: StringFilter
  updatedAt: DateTimeFilter
}

input SubscriptionOnAccountWhereUniqueInput {
  accountId_subscriptionId: SubscriptionOnAccountAccountIdSubscriptionIdCompoundUniqueInput
}

enum SubscriptionOrderByRelevanceFieldEnum {
  cost
  details
  id
  name
}

input SubscriptionOrderByRelevanceInput {
  fields: [SubscriptionOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input SubscriptionOrderByWithAggregationInput {
  _count: SubscriptionCountOrderByAggregateInput
  _max: SubscriptionMaxOrderByAggregateInput
  _min: SubscriptionMinOrderByAggregateInput
  cost: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  details: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input SubscriptionOrderByWithRelationAndSearchRelevanceInput {
  _relevance: SubscriptionOrderByRelevanceInput
  accounts: SubscriptionOnAccountOrderByRelationAggregateInput
  cost: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  details: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input SubscriptionRelationFilter {
  is: SubscriptionWhereInput
  isNot: SubscriptionWhereInput
}

enum SubscriptionScalarFieldEnum {
  cost
  createdAt
  deleted
  details
  id
  name
  updatedAt
}

input SubscriptionScalarWhereWithAggregatesInput {
  AND: [SubscriptionScalarWhereWithAggregatesInput!]
  NOT: [SubscriptionScalarWhereWithAggregatesInput!]
  OR: [SubscriptionScalarWhereWithAggregatesInput!]
  cost: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  deleted: DateTimeNullableWithAggregatesFilter
  details: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input SubscriptionUpdateInput {
  accounts: SubscriptionOnAccountUpdateManyWithoutSubscriptionInput
  cost: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  details: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubscriptionUpdateManyMutationInput {
  cost: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  details: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubscriptionUpdateOneRequiredWithoutAccountsInput {
  connect: SubscriptionWhereUniqueInput
  connectOrCreate: SubscriptionCreateOrConnectWithoutAccountsInput
  create: SubscriptionCreateWithoutAccountsInput
  update: SubscriptionUpdateWithoutAccountsInput
  upsert: SubscriptionUpsertWithoutAccountsInput
}

input SubscriptionUpdateWithoutAccountsInput {
  cost: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  deleted: NullableDateTimeFieldUpdateOperationsInput
  details: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubscriptionUpsertWithoutAccountsInput {
  create: SubscriptionCreateWithoutAccountsInput!
  update: SubscriptionUpdateWithoutAccountsInput!
}

input SubscriptionWhereInput {
  AND: [SubscriptionWhereInput!]
  NOT: [SubscriptionWhereInput!]
  OR: [SubscriptionWhereInput!]
  accounts: SubscriptionOnAccountListRelationFilter
  cost: StringNullableFilter
  createdAt: DateTimeFilter
  deleted: DateTimeNullableFilter
  details: StringNullableFilter
  id: StringFilter
  name: StringNullableFilter
  updatedAt: DateTimeFilter
}

input SubscriptionWhereUniqueInput {
  id: String
  name: String
}

type SubuserOnAccount {
  account: Account!
  accountId: String!
  createdAt: DateTime!
  subuser: Account!
  subuserId: String!
  updatedAt: DateTime!
}

input SubuserOnAccountAccountIdSubuserIdCompoundUniqueInput {
  accountId: String!
  subuserId: String!
}

type SubuserOnAccountCountAggregate {
  _all: Int!
  accountId: Int!
  createdAt: Int!
  subuserId: Int!
  updatedAt: Int!
}

input SubuserOnAccountCountOrderByAggregateInput {
  accountId: SortOrder
  createdAt: SortOrder
  subuserId: SortOrder
  updatedAt: SortOrder
}

input SubuserOnAccountCreateInput {
  account: AccountCreateNestedOneWithoutAccessesInput!
  createdAt: DateTime
  subuser: AccountCreateNestedOneWithoutSubusersInput!
  updatedAt: DateTime
}

input SubuserOnAccountCreateManyAccountInput {
  createdAt: DateTime
  subuserId: String!
  updatedAt: DateTime
}

input SubuserOnAccountCreateManyAccountInputEnvelope {
  data: [SubuserOnAccountCreateManyAccountInput!]!
  skipDuplicates: Boolean
}

input SubuserOnAccountCreateManyInput {
  accountId: String!
  createdAt: DateTime
  subuserId: String!
  updatedAt: DateTime
}

input SubuserOnAccountCreateManySubuserInput {
  accountId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input SubuserOnAccountCreateManySubuserInputEnvelope {
  data: [SubuserOnAccountCreateManySubuserInput!]!
  skipDuplicates: Boolean
}

input SubuserOnAccountCreateNestedManyWithoutAccountInput {
  connect: [SubuserOnAccountWhereUniqueInput!]
  connectOrCreate: [SubuserOnAccountCreateOrConnectWithoutAccountInput!]
  create: [SubuserOnAccountCreateWithoutAccountInput!]
  createMany: SubuserOnAccountCreateManyAccountInputEnvelope
}

input SubuserOnAccountCreateNestedManyWithoutSubuserInput {
  connect: [SubuserOnAccountWhereUniqueInput!]
  connectOrCreate: [SubuserOnAccountCreateOrConnectWithoutSubuserInput!]
  create: [SubuserOnAccountCreateWithoutSubuserInput!]
  createMany: SubuserOnAccountCreateManySubuserInputEnvelope
}

input SubuserOnAccountCreateOrConnectWithoutAccountInput {
  create: SubuserOnAccountCreateWithoutAccountInput!
  where: SubuserOnAccountWhereUniqueInput!
}

input SubuserOnAccountCreateOrConnectWithoutSubuserInput {
  create: SubuserOnAccountCreateWithoutSubuserInput!
  where: SubuserOnAccountWhereUniqueInput!
}

input SubuserOnAccountCreateWithoutAccountInput {
  createdAt: DateTime
  subuser: AccountCreateNestedOneWithoutSubusersInput!
  updatedAt: DateTime
}

input SubuserOnAccountCreateWithoutSubuserInput {
  account: AccountCreateNestedOneWithoutAccessesInput!
  createdAt: DateTime
  updatedAt: DateTime
}

type SubuserOnAccountGroupBy {
  _count: SubuserOnAccountCountAggregate
  _max: SubuserOnAccountMaxAggregate
  _min: SubuserOnAccountMinAggregate
  accountId: String!
  createdAt: DateTime!
  subuserId: String!
  updatedAt: DateTime!
}

input SubuserOnAccountListRelationFilter {
  every: SubuserOnAccountWhereInput
  none: SubuserOnAccountWhereInput
  some: SubuserOnAccountWhereInput
}

type SubuserOnAccountMaxAggregate {
  accountId: String
  createdAt: DateTime
  subuserId: String
  updatedAt: DateTime
}

input SubuserOnAccountMaxOrderByAggregateInput {
  accountId: SortOrder
  createdAt: SortOrder
  subuserId: SortOrder
  updatedAt: SortOrder
}

type SubuserOnAccountMinAggregate {
  accountId: String
  createdAt: DateTime
  subuserId: String
  updatedAt: DateTime
}

input SubuserOnAccountMinOrderByAggregateInput {
  accountId: SortOrder
  createdAt: SortOrder
  subuserId: SortOrder
  updatedAt: SortOrder
}

input SubuserOnAccountOrderByRelationAggregateInput {
  _count: SortOrder
}

enum SubuserOnAccountOrderByRelevanceFieldEnum {
  accountId
  subuserId
}

input SubuserOnAccountOrderByRelevanceInput {
  fields: [SubuserOnAccountOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input SubuserOnAccountOrderByWithAggregationInput {
  _count: SubuserOnAccountCountOrderByAggregateInput
  _max: SubuserOnAccountMaxOrderByAggregateInput
  _min: SubuserOnAccountMinOrderByAggregateInput
  accountId: SortOrder
  createdAt: SortOrder
  subuserId: SortOrder
  updatedAt: SortOrder
}

input SubuserOnAccountOrderByWithRelationAndSearchRelevanceInput {
  _relevance: SubuserOnAccountOrderByRelevanceInput
  account: AccountOrderByWithRelationAndSearchRelevanceInput
  accountId: SortOrder
  createdAt: SortOrder
  subuser: AccountOrderByWithRelationAndSearchRelevanceInput
  subuserId: SortOrder
  updatedAt: SortOrder
}

enum SubuserOnAccountScalarFieldEnum {
  accountId
  createdAt
  subuserId
  updatedAt
}

input SubuserOnAccountScalarWhereInput {
  AND: [SubuserOnAccountScalarWhereInput!]
  NOT: [SubuserOnAccountScalarWhereInput!]
  OR: [SubuserOnAccountScalarWhereInput!]
  accountId: StringFilter
  createdAt: DateTimeFilter
  subuserId: StringFilter
  updatedAt: DateTimeFilter
}

input SubuserOnAccountScalarWhereWithAggregatesInput {
  AND: [SubuserOnAccountScalarWhereWithAggregatesInput!]
  NOT: [SubuserOnAccountScalarWhereWithAggregatesInput!]
  OR: [SubuserOnAccountScalarWhereWithAggregatesInput!]
  accountId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  subuserId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input SubuserOnAccountUpdateInput {
  account: AccountUpdateOneRequiredWithoutAccessesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  subuser: AccountUpdateOneRequiredWithoutSubusersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubuserOnAccountUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubuserOnAccountUpdateManyWithWhereWithoutAccountInput {
  data: SubuserOnAccountUpdateManyMutationInput!
  where: SubuserOnAccountScalarWhereInput!
}

input SubuserOnAccountUpdateManyWithWhereWithoutSubuserInput {
  data: SubuserOnAccountUpdateManyMutationInput!
  where: SubuserOnAccountScalarWhereInput!
}

input SubuserOnAccountUpdateManyWithoutAccountInput {
  connect: [SubuserOnAccountWhereUniqueInput!]
  connectOrCreate: [SubuserOnAccountCreateOrConnectWithoutAccountInput!]
  create: [SubuserOnAccountCreateWithoutAccountInput!]
  createMany: SubuserOnAccountCreateManyAccountInputEnvelope
  delete: [SubuserOnAccountWhereUniqueInput!]
  deleteMany: [SubuserOnAccountScalarWhereInput!]
  disconnect: [SubuserOnAccountWhereUniqueInput!]
  set: [SubuserOnAccountWhereUniqueInput!]
  update: [SubuserOnAccountUpdateWithWhereUniqueWithoutAccountInput!]
  updateMany: [SubuserOnAccountUpdateManyWithWhereWithoutAccountInput!]
  upsert: [SubuserOnAccountUpsertWithWhereUniqueWithoutAccountInput!]
}

input SubuserOnAccountUpdateManyWithoutSubuserInput {
  connect: [SubuserOnAccountWhereUniqueInput!]
  connectOrCreate: [SubuserOnAccountCreateOrConnectWithoutSubuserInput!]
  create: [SubuserOnAccountCreateWithoutSubuserInput!]
  createMany: SubuserOnAccountCreateManySubuserInputEnvelope
  delete: [SubuserOnAccountWhereUniqueInput!]
  deleteMany: [SubuserOnAccountScalarWhereInput!]
  disconnect: [SubuserOnAccountWhereUniqueInput!]
  set: [SubuserOnAccountWhereUniqueInput!]
  update: [SubuserOnAccountUpdateWithWhereUniqueWithoutSubuserInput!]
  updateMany: [SubuserOnAccountUpdateManyWithWhereWithoutSubuserInput!]
  upsert: [SubuserOnAccountUpsertWithWhereUniqueWithoutSubuserInput!]
}

input SubuserOnAccountUpdateWithWhereUniqueWithoutAccountInput {
  data: SubuserOnAccountUpdateWithoutAccountInput!
  where: SubuserOnAccountWhereUniqueInput!
}

input SubuserOnAccountUpdateWithWhereUniqueWithoutSubuserInput {
  data: SubuserOnAccountUpdateWithoutSubuserInput!
  where: SubuserOnAccountWhereUniqueInput!
}

input SubuserOnAccountUpdateWithoutAccountInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  subuser: AccountUpdateOneRequiredWithoutSubusersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubuserOnAccountUpdateWithoutSubuserInput {
  account: AccountUpdateOneRequiredWithoutAccessesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubuserOnAccountUpsertWithWhereUniqueWithoutAccountInput {
  create: SubuserOnAccountCreateWithoutAccountInput!
  update: SubuserOnAccountUpdateWithoutAccountInput!
  where: SubuserOnAccountWhereUniqueInput!
}

input SubuserOnAccountUpsertWithWhereUniqueWithoutSubuserInput {
  create: SubuserOnAccountCreateWithoutSubuserInput!
  update: SubuserOnAccountUpdateWithoutSubuserInput!
  where: SubuserOnAccountWhereUniqueInput!
}

input SubuserOnAccountWhereInput {
  AND: [SubuserOnAccountWhereInput!]
  NOT: [SubuserOnAccountWhereInput!]
  OR: [SubuserOnAccountWhereInput!]
  account: AccountRelationFilter
  accountId: StringFilter
  createdAt: DateTimeFilter
  subuser: AccountRelationFilter
  subuserId: StringFilter
  updatedAt: DateTimeFilter
}

input SubuserOnAccountWhereUniqueInput {
  accountId_subuserId: SubuserOnAccountAccountIdSubuserIdCompoundUniqueInput
}

enum Title {
  Dr
  Miss
  Mr
  Mrs
  Ms
}

type Token {
  account: Account!
  apiToken: String!
  createdAt: DateTime!
  expiry: DateTime!
  id: String!
  type: TokenType!
  updatedAt: DateTime!
  valid: Boolean!
  value: String!
}

type TokenCountAggregate {
  _all: Int!
  apiToken: Int!
  createdAt: Int!
  expiry: Int!
  id: Int!
  type: Int!
  updatedAt: Int!
  valid: Int!
  value: Int!
}

input TokenCountOrderByAggregateInput {
  apiToken: SortOrder
  createdAt: SortOrder
  expiry: SortOrder
  id: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  valid: SortOrder
  value: SortOrder
}

input TokenCreateInput {
  account: AccountCreateNestedOneWithoutApiTokenInput!
  createdAt: DateTime
  expiry: DateTime!
  id: String
  type: TokenType!
  updatedAt: DateTime
  valid: Boolean
  value: String!
}

input TokenCreateManyAccountInput {
  createdAt: DateTime
  expiry: DateTime!
  id: String
  type: TokenType!
  updatedAt: DateTime
  valid: Boolean
  value: String!
}

input TokenCreateManyAccountInputEnvelope {
  data: [TokenCreateManyAccountInput!]!
  skipDuplicates: Boolean
}

input TokenCreateManyInput {
  apiToken: String!
  createdAt: DateTime
  expiry: DateTime!
  id: String
  type: TokenType!
  updatedAt: DateTime
  valid: Boolean
  value: String!
}

input TokenCreateNestedManyWithoutAccountInput {
  connect: [TokenWhereUniqueInput!]
  connectOrCreate: [TokenCreateOrConnectWithoutAccountInput!]
  create: [TokenCreateWithoutAccountInput!]
  createMany: TokenCreateManyAccountInputEnvelope
}

input TokenCreateOrConnectWithoutAccountInput {
  create: TokenCreateWithoutAccountInput!
  where: TokenWhereUniqueInput!
}

input TokenCreateWithoutAccountInput {
  createdAt: DateTime
  expiry: DateTime!
  id: String
  type: TokenType!
  updatedAt: DateTime
  valid: Boolean
  value: String!
}

type TokenGroupBy {
  _count: TokenCountAggregate
  _max: TokenMaxAggregate
  _min: TokenMinAggregate
  apiToken: String!
  createdAt: DateTime!
  expiry: DateTime!
  id: String!
  type: TokenType!
  updatedAt: DateTime!
  valid: Boolean!
  value: String!
}

input TokenListRelationFilter {
  every: TokenWhereInput
  none: TokenWhereInput
  some: TokenWhereInput
}

type TokenMaxAggregate {
  apiToken: String
  createdAt: DateTime
  expiry: DateTime
  id: String
  type: TokenType
  updatedAt: DateTime
  valid: Boolean
  value: String
}

input TokenMaxOrderByAggregateInput {
  apiToken: SortOrder
  createdAt: SortOrder
  expiry: SortOrder
  id: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  valid: SortOrder
  value: SortOrder
}

type TokenMinAggregate {
  apiToken: String
  createdAt: DateTime
  expiry: DateTime
  id: String
  type: TokenType
  updatedAt: DateTime
  valid: Boolean
  value: String
}

input TokenMinOrderByAggregateInput {
  apiToken: SortOrder
  createdAt: SortOrder
  expiry: SortOrder
  id: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  valid: SortOrder
  value: SortOrder
}

input TokenOrderByRelationAggregateInput {
  _count: SortOrder
}

enum TokenOrderByRelevanceFieldEnum {
  apiToken
  id
  value
}

input TokenOrderByRelevanceInput {
  fields: [TokenOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input TokenOrderByWithAggregationInput {
  _count: TokenCountOrderByAggregateInput
  _max: TokenMaxOrderByAggregateInput
  _min: TokenMinOrderByAggregateInput
  apiToken: SortOrder
  createdAt: SortOrder
  expiry: SortOrder
  id: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  valid: SortOrder
  value: SortOrder
}

input TokenOrderByWithRelationAndSearchRelevanceInput {
  _relevance: TokenOrderByRelevanceInput
  account: AccountOrderByWithRelationAndSearchRelevanceInput
  apiToken: SortOrder
  createdAt: SortOrder
  expiry: SortOrder
  id: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  valid: SortOrder
  value: SortOrder
}

enum TokenScalarFieldEnum {
  apiToken
  createdAt
  expiry
  id
  type
  updatedAt
  valid
  value
}

input TokenScalarWhereInput {
  AND: [TokenScalarWhereInput!]
  NOT: [TokenScalarWhereInput!]
  OR: [TokenScalarWhereInput!]
  apiToken: StringFilter
  createdAt: DateTimeFilter
  expiry: DateTimeFilter
  id: StringFilter
  type: EnumTokenTypeFilter
  updatedAt: DateTimeFilter
  valid: BoolFilter
  value: StringFilter
}

input TokenScalarWhereWithAggregatesInput {
  AND: [TokenScalarWhereWithAggregatesInput!]
  NOT: [TokenScalarWhereWithAggregatesInput!]
  OR: [TokenScalarWhereWithAggregatesInput!]
  apiToken: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  expiry: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  type: EnumTokenTypeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  valid: BoolWithAggregatesFilter
  value: StringWithAggregatesFilter
}

enum TokenType {
  API
  PERSONAL
  SYSTEM
}

input TokenUpdateInput {
  account: AccountUpdateOneRequiredWithoutApiTokenInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expiry: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  type: EnumTokenTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  valid: BoolFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input TokenUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expiry: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  type: EnumTokenTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  valid: BoolFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input TokenUpdateManyWithWhereWithoutAccountInput {
  data: TokenUpdateManyMutationInput!
  where: TokenScalarWhereInput!
}

input TokenUpdateManyWithoutAccountInput {
  connect: [TokenWhereUniqueInput!]
  connectOrCreate: [TokenCreateOrConnectWithoutAccountInput!]
  create: [TokenCreateWithoutAccountInput!]
  createMany: TokenCreateManyAccountInputEnvelope
  delete: [TokenWhereUniqueInput!]
  deleteMany: [TokenScalarWhereInput!]
  disconnect: [TokenWhereUniqueInput!]
  set: [TokenWhereUniqueInput!]
  update: [TokenUpdateWithWhereUniqueWithoutAccountInput!]
  updateMany: [TokenUpdateManyWithWhereWithoutAccountInput!]
  upsert: [TokenUpsertWithWhereUniqueWithoutAccountInput!]
}

input TokenUpdateWithWhereUniqueWithoutAccountInput {
  data: TokenUpdateWithoutAccountInput!
  where: TokenWhereUniqueInput!
}

input TokenUpdateWithoutAccountInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expiry: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  type: EnumTokenTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  valid: BoolFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input TokenUpsertWithWhereUniqueWithoutAccountInput {
  create: TokenCreateWithoutAccountInput!
  update: TokenUpdateWithoutAccountInput!
  where: TokenWhereUniqueInput!
}

input TokenWhereInput {
  AND: [TokenWhereInput!]
  NOT: [TokenWhereInput!]
  OR: [TokenWhereInput!]
  account: AccountRelationFilter
  apiToken: StringFilter
  createdAt: DateTimeFilter
  expiry: DateTimeFilter
  id: StringFilter
  type: EnumTokenTypeFilter
  updatedAt: DateTimeFilter
  valid: BoolFilter
  value: StringFilter
}

input TokenWhereUniqueInput {
  id: String
  value: String
}

type Transaction {
  account: Account!
  accountId: String!
  createdAt: DateTime!
  data: JSON!
  deleted: DateTime
  id: String!
  updatedAt: DateTime!
}

type TransactionCountAggregate {
  _all: Int!
  accountId: Int!
  createdAt: Int!
  data: Int!
  deleted: Int!
  id: Int!
  updatedAt: Int!
}

input TransactionCountOrderByAggregateInput {
  accountId: SortOrder
  createdAt: SortOrder
  data: SortOrder
  deleted: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input TransactionCreateInput {
  account: AccountCreateNestedOneWithoutTransactionsInput!
  createdAt: DateTime
  data: JSON!
  deleted: DateTime
  id: String
  updatedAt: DateTime
}

input TransactionCreateManyAccountInput {
  createdAt: DateTime
  data: JSON!
  deleted: DateTime
  id: String
  updatedAt: DateTime
}

input TransactionCreateManyAccountInputEnvelope {
  data: [TransactionCreateManyAccountInput!]!
  skipDuplicates: Boolean
}

input TransactionCreateManyInput {
  accountId: String!
  createdAt: DateTime
  data: JSON!
  deleted: DateTime
  id: String
  updatedAt: DateTime
}

input TransactionCreateNestedManyWithoutAccountInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutAccountInput!]
  create: [TransactionCreateWithoutAccountInput!]
  createMany: TransactionCreateManyAccountInputEnvelope
}

input TransactionCreateOrConnectWithoutAccountInput {
  create: TransactionCreateWithoutAccountInput!
  where: TransactionWhereUniqueInput!
}

input TransactionCreateWithoutAccountInput {
  createdAt: DateTime
  data: JSON!
  deleted: DateTime
  id: String
  updatedAt: DateTime
}

type TransactionGroupBy {
  _count: TransactionCountAggregate
  _max: TransactionMaxAggregate
  _min: TransactionMinAggregate
  accountId: String!
  createdAt: DateTime!
  data: JSON!
  deleted: DateTime
  id: String!
  updatedAt: DateTime!
}

input TransactionListRelationFilter {
  every: TransactionWhereInput
  none: TransactionWhereInput
  some: TransactionWhereInput
}

type TransactionMaxAggregate {
  accountId: String
  createdAt: DateTime
  deleted: DateTime
  id: String
  updatedAt: DateTime
}

input TransactionMaxOrderByAggregateInput {
  accountId: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

type TransactionMinAggregate {
  accountId: String
  createdAt: DateTime
  deleted: DateTime
  id: String
  updatedAt: DateTime
}

input TransactionMinOrderByAggregateInput {
  accountId: SortOrder
  createdAt: SortOrder
  deleted: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input TransactionOrderByRelationAggregateInput {
  _count: SortOrder
}

enum TransactionOrderByRelevanceFieldEnum {
  accountId
  id
}

input TransactionOrderByRelevanceInput {
  fields: [TransactionOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input TransactionOrderByWithAggregationInput {
  _count: TransactionCountOrderByAggregateInput
  _max: TransactionMaxOrderByAggregateInput
  _min: TransactionMinOrderByAggregateInput
  accountId: SortOrder
  createdAt: SortOrder
  data: SortOrder
  deleted: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input TransactionOrderByWithRelationAndSearchRelevanceInput {
  _relevance: TransactionOrderByRelevanceInput
  account: AccountOrderByWithRelationAndSearchRelevanceInput
  accountId: SortOrder
  createdAt: SortOrder
  data: SortOrder
  deleted: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

enum TransactionScalarFieldEnum {
  accountId
  createdAt
  data
  deleted
  id
  updatedAt
}

input TransactionScalarWhereInput {
  AND: [TransactionScalarWhereInput!]
  NOT: [TransactionScalarWhereInput!]
  OR: [TransactionScalarWhereInput!]
  accountId: StringFilter
  createdAt: DateTimeFilter
  data: JsonFilter
  deleted: DateTimeNullableFilter
  id: StringFilter
  updatedAt: DateTimeFilter
}

input TransactionScalarWhereWithAggregatesInput {
  AND: [TransactionScalarWhereWithAggregatesInput!]
  NOT: [TransactionScalarWhereWithAggregatesInput!]
  OR: [TransactionScalarWhereWithAggregatesInput!]
  accountId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  data: JsonWithAggregatesFilter
  deleted: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input TransactionUpdateInput {
  account: AccountUpdateOneRequiredWithoutTransactionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  data: JSON
  deleted: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  data: JSON
  deleted: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionUpdateManyWithWhereWithoutAccountInput {
  data: TransactionUpdateManyMutationInput!
  where: TransactionScalarWhereInput!
}

input TransactionUpdateManyWithoutAccountInput {
  connect: [TransactionWhereUniqueInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutAccountInput!]
  create: [TransactionCreateWithoutAccountInput!]
  createMany: TransactionCreateManyAccountInputEnvelope
  delete: [TransactionWhereUniqueInput!]
  deleteMany: [TransactionScalarWhereInput!]
  disconnect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutAccountInput!]
  updateMany: [TransactionUpdateManyWithWhereWithoutAccountInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutAccountInput!]
}

input TransactionUpdateWithWhereUniqueWithoutAccountInput {
  data: TransactionUpdateWithoutAccountInput!
  where: TransactionWhereUniqueInput!
}

input TransactionUpdateWithoutAccountInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  data: JSON
  deleted: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TransactionUpsertWithWhereUniqueWithoutAccountInput {
  create: TransactionCreateWithoutAccountInput!
  update: TransactionUpdateWithoutAccountInput!
  where: TransactionWhereUniqueInput!
}

input TransactionWhereInput {
  AND: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  account: AccountRelationFilter
  accountId: StringFilter
  createdAt: DateTimeFilter
  data: JsonFilter
  deleted: DateTimeNullableFilter
  id: StringFilter
  updatedAt: DateTimeFilter
}

input TransactionWhereUniqueInput {
  id: String
}

type VenueStyle {
  _count: VenueStyleCount
  address(
    cursor: AddressWhereUniqueInput
    distinct: [AddressScalarFieldEnum!]
    orderBy: [AddressOrderByWithRelationAndSearchRelevanceInput!]
    skip: Int
    take: Int
    where: AddressWhereInput
  ): [Address!]!
  createdAt: DateTime!
  details: String
  id: String!
  name: String!
  updatedAt: DateTime!
}

type VenueStyleCount {
  address: Int!
}

type VenueStyleCountAggregate {
  _all: Int!
  createdAt: Int!
  details: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
}

input VenueStyleCountOrderByAggregateInput {
  createdAt: SortOrder
  details: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input VenueStyleCreateInput {
  address: AddressCreateNestedManyWithoutVenueStyleInput
  createdAt: DateTime
  details: String
  id: String
  name: String!
  updatedAt: DateTime
}

input VenueStyleCreateManyInput {
  createdAt: DateTime
  details: String
  id: String
  name: String!
  updatedAt: DateTime
}

input VenueStyleCreateNestedManyWithoutAddressInput {
  connect: [VenueStyleWhereUniqueInput!]
  connectOrCreate: [VenueStyleCreateOrConnectWithoutAddressInput!]
  create: [VenueStyleCreateWithoutAddressInput!]
}

input VenueStyleCreateOrConnectWithoutAddressInput {
  create: VenueStyleCreateWithoutAddressInput!
  where: VenueStyleWhereUniqueInput!
}

input VenueStyleCreateWithoutAddressInput {
  createdAt: DateTime
  details: String
  id: String
  name: String!
  updatedAt: DateTime
}

type VenueStyleGroupBy {
  _count: VenueStyleCountAggregate
  _max: VenueStyleMaxAggregate
  _min: VenueStyleMinAggregate
  createdAt: DateTime!
  details: String
  id: String!
  name: String!
  updatedAt: DateTime!
}

input VenueStyleListRelationFilter {
  every: VenueStyleWhereInput
  none: VenueStyleWhereInput
  some: VenueStyleWhereInput
}

type VenueStyleMaxAggregate {
  createdAt: DateTime
  details: String
  id: String
  name: String
  updatedAt: DateTime
}

input VenueStyleMaxOrderByAggregateInput {
  createdAt: SortOrder
  details: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type VenueStyleMinAggregate {
  createdAt: DateTime
  details: String
  id: String
  name: String
  updatedAt: DateTime
}

input VenueStyleMinOrderByAggregateInput {
  createdAt: SortOrder
  details: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input VenueStyleOrderByRelationAggregateInput {
  _count: SortOrder
}

enum VenueStyleOrderByRelevanceFieldEnum {
  details
  id
  name
}

input VenueStyleOrderByRelevanceInput {
  fields: [VenueStyleOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input VenueStyleOrderByWithAggregationInput {
  _count: VenueStyleCountOrderByAggregateInput
  _max: VenueStyleMaxOrderByAggregateInput
  _min: VenueStyleMinOrderByAggregateInput
  createdAt: SortOrder
  details: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input VenueStyleOrderByWithRelationAndSearchRelevanceInput {
  _relevance: VenueStyleOrderByRelevanceInput
  address: AddressOrderByRelationAggregateInput
  createdAt: SortOrder
  details: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

enum VenueStyleScalarFieldEnum {
  createdAt
  details
  id
  name
  updatedAt
}

input VenueStyleScalarWhereInput {
  AND: [VenueStyleScalarWhereInput!]
  NOT: [VenueStyleScalarWhereInput!]
  OR: [VenueStyleScalarWhereInput!]
  createdAt: DateTimeFilter
  details: StringNullableFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input VenueStyleScalarWhereWithAggregatesInput {
  AND: [VenueStyleScalarWhereWithAggregatesInput!]
  NOT: [VenueStyleScalarWhereWithAggregatesInput!]
  OR: [VenueStyleScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  details: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input VenueStyleUpdateInput {
  address: AddressUpdateManyWithoutVenueStyleInput
  createdAt: DateTimeFieldUpdateOperationsInput
  details: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VenueStyleUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  details: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VenueStyleUpdateManyWithWhereWithoutAddressInput {
  data: VenueStyleUpdateManyMutationInput!
  where: VenueStyleScalarWhereInput!
}

input VenueStyleUpdateManyWithoutAddressInput {
  connect: [VenueStyleWhereUniqueInput!]
  connectOrCreate: [VenueStyleCreateOrConnectWithoutAddressInput!]
  create: [VenueStyleCreateWithoutAddressInput!]
  delete: [VenueStyleWhereUniqueInput!]
  deleteMany: [VenueStyleScalarWhereInput!]
  disconnect: [VenueStyleWhereUniqueInput!]
  set: [VenueStyleWhereUniqueInput!]
  update: [VenueStyleUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [VenueStyleUpdateManyWithWhereWithoutAddressInput!]
  upsert: [VenueStyleUpsertWithWhereUniqueWithoutAddressInput!]
}

input VenueStyleUpdateWithWhereUniqueWithoutAddressInput {
  data: VenueStyleUpdateWithoutAddressInput!
  where: VenueStyleWhereUniqueInput!
}

input VenueStyleUpdateWithoutAddressInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  details: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VenueStyleUpsertWithWhereUniqueWithoutAddressInput {
  create: VenueStyleCreateWithoutAddressInput!
  update: VenueStyleUpdateWithoutAddressInput!
  where: VenueStyleWhereUniqueInput!
}

input VenueStyleWhereInput {
  AND: [VenueStyleWhereInput!]
  NOT: [VenueStyleWhereInput!]
  OR: [VenueStyleWhereInput!]
  address: AddressListRelationFilter
  createdAt: DateTimeFilter
  details: StringNullableFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input VenueStyleWhereUniqueInput {
  id: String
}

enum dnsType {
  CNAME
  TXT
}
