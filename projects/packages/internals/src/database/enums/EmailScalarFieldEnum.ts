import * as TypeGraphQL from "type-graphql";

export enum EmailScalarFieldEnum {
  id = "id",
  domainId = "domainId",
  email = "email",
  accountId = "accountId",
  verified = "verified",
  "public" = "public",
  primary = "primary",
  path = "path",
  copy = "copy",
  notifyFrom = "notifyFrom",
  imap_authUser = "imap_authUser",
  imap_authPass = "imap_authPass",
  imap_accessToken = "imap_accessToken",
  imap_authServer = "imap_authServer",
  imap_host = "imap_host",
  imap_port = "imap_port",
  imap_secure = "imap_secure",
  imap_tslRejectUnauthorized = "imap_tslRejectUnauthorized",
  imap_tslMinVersion = "imap_tslMinVersion",
  imap_resyncDelay = "imap_resyncDelay",
  smtp_authUser = "smtp_authUser",
  smtp_authPass = "smtp_authPass",
  smtp_accessToken = "smtp_accessToken",
  smtp_authServer = "smtp_authServer",
  smtp_host = "smtp_host",
  smtp_port = "smtp_port",
  smtp_secure = "smtp_secure",
  smtp_tslRejectUnauthorized = "smtp_tslRejectUnauthorized",
  smtp_tslMinVersion = "smtp_tslMinVersion",
  oauth2_authorize = "oauth2_authorize",
  oauth2_provider = "oauth2_provider",
  oauth2_authUser = "oauth2_authUser",
  oauth2_accessToken = "oauth2_accessToken",
  oauth2_refreshToken = "oauth2_refreshToken",
  oauth2_expires = "oauth2_expires",
  createdAt = "createdAt",
  updatedAt = "updatedAt",
  deleted = "deleted"
}
TypeGraphQL.registerEnumType(EmailScalarFieldEnum, {
  name: "EmailScalarFieldEnum",
  description: undefined,
});
