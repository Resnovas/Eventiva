import { ClassType } from 'type-graphql';
import * as crudResolvers from './resolvers/crud/resolvers-crud.index';
import * as argsTypes from './resolvers/crud/args.index';
import * as actionResolvers from './resolvers/crud/resolvers-actions.index';
import * as relationResolvers from './resolvers/relations/resolvers.index';
import * as models from './models';
import * as outputTypes from './resolvers/outputs';
import * as inputTypes from './resolvers/inputs';

const crudResolversMap = {
  Account: crudResolvers.AccountCrudResolver,
  Token: crudResolvers.TokenCrudResolver,
  SubuserOnAccount: crudResolvers.SubuserOnAccountCrudResolver,
  EmployersOnAccount: crudResolvers.EmployersOnAccountCrudResolver,
  ManagersOnAccount: crudResolvers.ManagersOnAccountCrudResolver,
  Address: crudResolvers.AddressCrudResolver,
  ContactAtAddress: crudResolvers.ContactAtAddressCrudResolver,
  VenueStyle: crudResolvers.VenueStyleCrudResolver,
  Email: crudResolvers.EmailCrudResolver,
  Application: crudResolvers.ApplicationCrudResolver,
  Domain: crudResolvers.DomainCrudResolver,
  Feature: crudResolvers.FeatureCrudResolver,
  FeatureOfRoom: crudResolvers.FeatureOfRoomCrudResolver,
  FeatureOfAddress: crudResolvers.FeatureOfAddressCrudResolver,
  Room: crudResolvers.RoomCrudResolver,
  Files: crudResolvers.FilesCrudResolver,
  RTW: crudResolvers.RTWCrudResolver,
  Phone: crudResolvers.PhoneCrudResolver,
  ArrangementOfRoom: crudResolvers.ArrangementOfRoomCrudResolver,
  Arrangement: crudResolvers.ArrangementCrudResolver,
  SIABadge: crudResolvers.SIABadgeCrudResolver,
  SIACheck: crudResolvers.SIACheckCrudResolver,
  StatusOnAccount: crudResolvers.StatusOnAccountCrudResolver,
  Status: crudResolvers.StatusCrudResolver,
  Subscription: crudResolvers.SubscriptionCrudResolver,
  SubscriptionOnAccount: crudResolvers.SubscriptionOnAccountCrudResolver,
  Transaction: crudResolvers.TransactionCrudResolver,
};
const actionResolversMap = {
  Account: {
    account: actionResolvers.FindUniqueAccountResolver,
    findFirstAccount: actionResolvers.FindFirstAccountResolver,
    accounts: actionResolvers.FindManyAccountResolver,
    createAccount: actionResolvers.CreateAccountResolver,
    createManyAccount: actionResolvers.CreateManyAccountResolver,
    deleteAccount: actionResolvers.DeleteAccountResolver,
    updateAccount: actionResolvers.UpdateAccountResolver,
    deleteManyAccount: actionResolvers.DeleteManyAccountResolver,
    updateManyAccount: actionResolvers.UpdateManyAccountResolver,
    upsertAccount: actionResolvers.UpsertAccountResolver,
    aggregateAccount: actionResolvers.AggregateAccountResolver,
    groupByAccount: actionResolvers.GroupByAccountResolver,
  },
  Token: {
    token: actionResolvers.FindUniqueTokenResolver,
    findFirstToken: actionResolvers.FindFirstTokenResolver,
    tokens: actionResolvers.FindManyTokenResolver,
    createToken: actionResolvers.CreateTokenResolver,
    createManyToken: actionResolvers.CreateManyTokenResolver,
    deleteToken: actionResolvers.DeleteTokenResolver,
    updateToken: actionResolvers.UpdateTokenResolver,
    deleteManyToken: actionResolvers.DeleteManyTokenResolver,
    updateManyToken: actionResolvers.UpdateManyTokenResolver,
    upsertToken: actionResolvers.UpsertTokenResolver,
    aggregateToken: actionResolvers.AggregateTokenResolver,
    groupByToken: actionResolvers.GroupByTokenResolver,
  },
  SubuserOnAccount: {
    subuserOnAccount: actionResolvers.FindUniqueSubuserOnAccountResolver,
    findFirstSubuserOnAccount:
      actionResolvers.FindFirstSubuserOnAccountResolver,
    subuserOnAccounts: actionResolvers.FindManySubuserOnAccountResolver,
    createSubuserOnAccount: actionResolvers.CreateSubuserOnAccountResolver,
    createManySubuserOnAccount:
      actionResolvers.CreateManySubuserOnAccountResolver,
    deleteSubuserOnAccount: actionResolvers.DeleteSubuserOnAccountResolver,
    updateSubuserOnAccount: actionResolvers.UpdateSubuserOnAccountResolver,
    deleteManySubuserOnAccount:
      actionResolvers.DeleteManySubuserOnAccountResolver,
    updateManySubuserOnAccount:
      actionResolvers.UpdateManySubuserOnAccountResolver,
    upsertSubuserOnAccount: actionResolvers.UpsertSubuserOnAccountResolver,
    aggregateSubuserOnAccount:
      actionResolvers.AggregateSubuserOnAccountResolver,
    groupBySubuserOnAccount: actionResolvers.GroupBySubuserOnAccountResolver,
  },
  EmployersOnAccount: {
    employersOnAccount: actionResolvers.FindUniqueEmployersOnAccountResolver,
    findFirstEmployersOnAccount:
      actionResolvers.FindFirstEmployersOnAccountResolver,
    employersOnAccounts: actionResolvers.FindManyEmployersOnAccountResolver,
    createEmployersOnAccount: actionResolvers.CreateEmployersOnAccountResolver,
    createManyEmployersOnAccount:
      actionResolvers.CreateManyEmployersOnAccountResolver,
    deleteEmployersOnAccount: actionResolvers.DeleteEmployersOnAccountResolver,
    updateEmployersOnAccount: actionResolvers.UpdateEmployersOnAccountResolver,
    deleteManyEmployersOnAccount:
      actionResolvers.DeleteManyEmployersOnAccountResolver,
    updateManyEmployersOnAccount:
      actionResolvers.UpdateManyEmployersOnAccountResolver,
    upsertEmployersOnAccount: actionResolvers.UpsertEmployersOnAccountResolver,
    aggregateEmployersOnAccount:
      actionResolvers.AggregateEmployersOnAccountResolver,
    groupByEmployersOnAccount:
      actionResolvers.GroupByEmployersOnAccountResolver,
  },
  ManagersOnAccount: {
    managersOnAccount: actionResolvers.FindUniqueManagersOnAccountResolver,
    findFirstManagersOnAccount:
      actionResolvers.FindFirstManagersOnAccountResolver,
    managersOnAccounts: actionResolvers.FindManyManagersOnAccountResolver,
    createManagersOnAccount: actionResolvers.CreateManagersOnAccountResolver,
    createManyManagersOnAccount:
      actionResolvers.CreateManyManagersOnAccountResolver,
    deleteManagersOnAccount: actionResolvers.DeleteManagersOnAccountResolver,
    updateManagersOnAccount: actionResolvers.UpdateManagersOnAccountResolver,
    deleteManyManagersOnAccount:
      actionResolvers.DeleteManyManagersOnAccountResolver,
    updateManyManagersOnAccount:
      actionResolvers.UpdateManyManagersOnAccountResolver,
    upsertManagersOnAccount: actionResolvers.UpsertManagersOnAccountResolver,
    aggregateManagersOnAccount:
      actionResolvers.AggregateManagersOnAccountResolver,
    groupByManagersOnAccount: actionResolvers.GroupByManagersOnAccountResolver,
  },
  Address: {
    address: actionResolvers.FindUniqueAddressResolver,
    findFirstAddress: actionResolvers.FindFirstAddressResolver,
    addresses: actionResolvers.FindManyAddressResolver,
    createAddress: actionResolvers.CreateAddressResolver,
    createManyAddress: actionResolvers.CreateManyAddressResolver,
    deleteAddress: actionResolvers.DeleteAddressResolver,
    updateAddress: actionResolvers.UpdateAddressResolver,
    deleteManyAddress: actionResolvers.DeleteManyAddressResolver,
    updateManyAddress: actionResolvers.UpdateManyAddressResolver,
    upsertAddress: actionResolvers.UpsertAddressResolver,
    aggregateAddress: actionResolvers.AggregateAddressResolver,
    groupByAddress: actionResolvers.GroupByAddressResolver,
  },
  ContactAtAddress: {
    contactAtAddress: actionResolvers.FindUniqueContactAtAddressResolver,
    findFirstContactAtAddress:
      actionResolvers.FindFirstContactAtAddressResolver,
    contactAtAddresses: actionResolvers.FindManyContactAtAddressResolver,
    createContactAtAddress: actionResolvers.CreateContactAtAddressResolver,
    createManyContactAtAddress:
      actionResolvers.CreateManyContactAtAddressResolver,
    deleteContactAtAddress: actionResolvers.DeleteContactAtAddressResolver,
    updateContactAtAddress: actionResolvers.UpdateContactAtAddressResolver,
    deleteManyContactAtAddress:
      actionResolvers.DeleteManyContactAtAddressResolver,
    updateManyContactAtAddress:
      actionResolvers.UpdateManyContactAtAddressResolver,
    upsertContactAtAddress: actionResolvers.UpsertContactAtAddressResolver,
    aggregateContactAtAddress:
      actionResolvers.AggregateContactAtAddressResolver,
    groupByContactAtAddress: actionResolvers.GroupByContactAtAddressResolver,
  },
  VenueStyle: {
    venueStyle: actionResolvers.FindUniqueVenueStyleResolver,
    findFirstVenueStyle: actionResolvers.FindFirstVenueStyleResolver,
    venueStyles: actionResolvers.FindManyVenueStyleResolver,
    createVenueStyle: actionResolvers.CreateVenueStyleResolver,
    createManyVenueStyle: actionResolvers.CreateManyVenueStyleResolver,
    deleteVenueStyle: actionResolvers.DeleteVenueStyleResolver,
    updateVenueStyle: actionResolvers.UpdateVenueStyleResolver,
    deleteManyVenueStyle: actionResolvers.DeleteManyVenueStyleResolver,
    updateManyVenueStyle: actionResolvers.UpdateManyVenueStyleResolver,
    upsertVenueStyle: actionResolvers.UpsertVenueStyleResolver,
    aggregateVenueStyle: actionResolvers.AggregateVenueStyleResolver,
    groupByVenueStyle: actionResolvers.GroupByVenueStyleResolver,
  },
  Email: {
    email: actionResolvers.FindUniqueEmailResolver,
    findFirstEmail: actionResolvers.FindFirstEmailResolver,
    emails: actionResolvers.FindManyEmailResolver,
    createEmail: actionResolvers.CreateEmailResolver,
    createManyEmail: actionResolvers.CreateManyEmailResolver,
    deleteEmail: actionResolvers.DeleteEmailResolver,
    updateEmail: actionResolvers.UpdateEmailResolver,
    deleteManyEmail: actionResolvers.DeleteManyEmailResolver,
    updateManyEmail: actionResolvers.UpdateManyEmailResolver,
    upsertEmail: actionResolvers.UpsertEmailResolver,
    aggregateEmail: actionResolvers.AggregateEmailResolver,
    groupByEmail: actionResolvers.GroupByEmailResolver,
  },
  Application: {
    application: actionResolvers.FindUniqueApplicationResolver,
    findFirstApplication: actionResolvers.FindFirstApplicationResolver,
    applications: actionResolvers.FindManyApplicationResolver,
    createApplication: actionResolvers.CreateApplicationResolver,
    createManyApplication: actionResolvers.CreateManyApplicationResolver,
    deleteApplication: actionResolvers.DeleteApplicationResolver,
    updateApplication: actionResolvers.UpdateApplicationResolver,
    deleteManyApplication: actionResolvers.DeleteManyApplicationResolver,
    updateManyApplication: actionResolvers.UpdateManyApplicationResolver,
    upsertApplication: actionResolvers.UpsertApplicationResolver,
    aggregateApplication: actionResolvers.AggregateApplicationResolver,
    groupByApplication: actionResolvers.GroupByApplicationResolver,
  },
  Domain: {
    domain: actionResolvers.FindUniqueDomainResolver,
    findFirstDomain: actionResolvers.FindFirstDomainResolver,
    domains: actionResolvers.FindManyDomainResolver,
    createDomain: actionResolvers.CreateDomainResolver,
    createManyDomain: actionResolvers.CreateManyDomainResolver,
    deleteDomain: actionResolvers.DeleteDomainResolver,
    updateDomain: actionResolvers.UpdateDomainResolver,
    deleteManyDomain: actionResolvers.DeleteManyDomainResolver,
    updateManyDomain: actionResolvers.UpdateManyDomainResolver,
    upsertDomain: actionResolvers.UpsertDomainResolver,
    aggregateDomain: actionResolvers.AggregateDomainResolver,
    groupByDomain: actionResolvers.GroupByDomainResolver,
  },
  Feature: {
    feature: actionResolvers.FindUniqueFeatureResolver,
    findFirstFeature: actionResolvers.FindFirstFeatureResolver,
    features: actionResolvers.FindManyFeatureResolver,
    createFeature: actionResolvers.CreateFeatureResolver,
    createManyFeature: actionResolvers.CreateManyFeatureResolver,
    deleteFeature: actionResolvers.DeleteFeatureResolver,
    updateFeature: actionResolvers.UpdateFeatureResolver,
    deleteManyFeature: actionResolvers.DeleteManyFeatureResolver,
    updateManyFeature: actionResolvers.UpdateManyFeatureResolver,
    upsertFeature: actionResolvers.UpsertFeatureResolver,
    aggregateFeature: actionResolvers.AggregateFeatureResolver,
    groupByFeature: actionResolvers.GroupByFeatureResolver,
  },
  FeatureOfRoom: {
    featureOfRoom: actionResolvers.FindUniqueFeatureOfRoomResolver,
    findFirstFeatureOfRoom: actionResolvers.FindFirstFeatureOfRoomResolver,
    featureOfRooms: actionResolvers.FindManyFeatureOfRoomResolver,
    createFeatureOfRoom: actionResolvers.CreateFeatureOfRoomResolver,
    createManyFeatureOfRoom: actionResolvers.CreateManyFeatureOfRoomResolver,
    deleteFeatureOfRoom: actionResolvers.DeleteFeatureOfRoomResolver,
    updateFeatureOfRoom: actionResolvers.UpdateFeatureOfRoomResolver,
    deleteManyFeatureOfRoom: actionResolvers.DeleteManyFeatureOfRoomResolver,
    updateManyFeatureOfRoom: actionResolvers.UpdateManyFeatureOfRoomResolver,
    upsertFeatureOfRoom: actionResolvers.UpsertFeatureOfRoomResolver,
    aggregateFeatureOfRoom: actionResolvers.AggregateFeatureOfRoomResolver,
    groupByFeatureOfRoom: actionResolvers.GroupByFeatureOfRoomResolver,
  },
  FeatureOfAddress: {
    featureOfAddress: actionResolvers.FindUniqueFeatureOfAddressResolver,
    findFirstFeatureOfAddress:
      actionResolvers.FindFirstFeatureOfAddressResolver,
    featureOfAddresses: actionResolvers.FindManyFeatureOfAddressResolver,
    createFeatureOfAddress: actionResolvers.CreateFeatureOfAddressResolver,
    createManyFeatureOfAddress:
      actionResolvers.CreateManyFeatureOfAddressResolver,
    deleteFeatureOfAddress: actionResolvers.DeleteFeatureOfAddressResolver,
    updateFeatureOfAddress: actionResolvers.UpdateFeatureOfAddressResolver,
    deleteManyFeatureOfAddress:
      actionResolvers.DeleteManyFeatureOfAddressResolver,
    updateManyFeatureOfAddress:
      actionResolvers.UpdateManyFeatureOfAddressResolver,
    upsertFeatureOfAddress: actionResolvers.UpsertFeatureOfAddressResolver,
    aggregateFeatureOfAddress:
      actionResolvers.AggregateFeatureOfAddressResolver,
    groupByFeatureOfAddress: actionResolvers.GroupByFeatureOfAddressResolver,
  },
  Room: {
    room: actionResolvers.FindUniqueRoomResolver,
    findFirstRoom: actionResolvers.FindFirstRoomResolver,
    rooms: actionResolvers.FindManyRoomResolver,
    createRoom: actionResolvers.CreateRoomResolver,
    createManyRoom: actionResolvers.CreateManyRoomResolver,
    deleteRoom: actionResolvers.DeleteRoomResolver,
    updateRoom: actionResolvers.UpdateRoomResolver,
    deleteManyRoom: actionResolvers.DeleteManyRoomResolver,
    updateManyRoom: actionResolvers.UpdateManyRoomResolver,
    upsertRoom: actionResolvers.UpsertRoomResolver,
    aggregateRoom: actionResolvers.AggregateRoomResolver,
    groupByRoom: actionResolvers.GroupByRoomResolver,
  },
  Files: {
    findUniqueFiles: actionResolvers.FindUniqueFilesResolver,
    findFirstFiles: actionResolvers.FindFirstFilesResolver,
    findManyFiles: actionResolvers.FindManyFilesResolver,
    createFiles: actionResolvers.CreateFilesResolver,
    createManyFiles: actionResolvers.CreateManyFilesResolver,
    deleteFiles: actionResolvers.DeleteFilesResolver,
    updateFiles: actionResolvers.UpdateFilesResolver,
    deleteManyFiles: actionResolvers.DeleteManyFilesResolver,
    updateManyFiles: actionResolvers.UpdateManyFilesResolver,
    upsertFiles: actionResolvers.UpsertFilesResolver,
    aggregateFiles: actionResolvers.AggregateFilesResolver,
    groupByFiles: actionResolvers.GroupByFilesResolver,
  },
  RTW: {
    rTW: actionResolvers.FindUniqueRTWResolver,
    findFirstRTW: actionResolvers.FindFirstRTWResolver,
    rTWS: actionResolvers.FindManyRTWResolver,
    createRTW: actionResolvers.CreateRTWResolver,
    createManyRTW: actionResolvers.CreateManyRTWResolver,
    deleteRTW: actionResolvers.DeleteRTWResolver,
    updateRTW: actionResolvers.UpdateRTWResolver,
    deleteManyRTW: actionResolvers.DeleteManyRTWResolver,
    updateManyRTW: actionResolvers.UpdateManyRTWResolver,
    upsertRTW: actionResolvers.UpsertRTWResolver,
    aggregateRTW: actionResolvers.AggregateRTWResolver,
    groupByRTW: actionResolvers.GroupByRTWResolver,
  },
  Phone: {
    phone: actionResolvers.FindUniquePhoneResolver,
    findFirstPhone: actionResolvers.FindFirstPhoneResolver,
    phones: actionResolvers.FindManyPhoneResolver,
    createPhone: actionResolvers.CreatePhoneResolver,
    createManyPhone: actionResolvers.CreateManyPhoneResolver,
    deletePhone: actionResolvers.DeletePhoneResolver,
    updatePhone: actionResolvers.UpdatePhoneResolver,
    deleteManyPhone: actionResolvers.DeleteManyPhoneResolver,
    updateManyPhone: actionResolvers.UpdateManyPhoneResolver,
    upsertPhone: actionResolvers.UpsertPhoneResolver,
    aggregatePhone: actionResolvers.AggregatePhoneResolver,
    groupByPhone: actionResolvers.GroupByPhoneResolver,
  },
  ArrangementOfRoom: {
    arrangementOfRoom: actionResolvers.FindUniqueArrangementOfRoomResolver,
    findFirstArrangementOfRoom:
      actionResolvers.FindFirstArrangementOfRoomResolver,
    arrangementOfRooms: actionResolvers.FindManyArrangementOfRoomResolver,
    createArrangementOfRoom: actionResolvers.CreateArrangementOfRoomResolver,
    createManyArrangementOfRoom:
      actionResolvers.CreateManyArrangementOfRoomResolver,
    deleteArrangementOfRoom: actionResolvers.DeleteArrangementOfRoomResolver,
    updateArrangementOfRoom: actionResolvers.UpdateArrangementOfRoomResolver,
    deleteManyArrangementOfRoom:
      actionResolvers.DeleteManyArrangementOfRoomResolver,
    updateManyArrangementOfRoom:
      actionResolvers.UpdateManyArrangementOfRoomResolver,
    upsertArrangementOfRoom: actionResolvers.UpsertArrangementOfRoomResolver,
    aggregateArrangementOfRoom:
      actionResolvers.AggregateArrangementOfRoomResolver,
    groupByArrangementOfRoom: actionResolvers.GroupByArrangementOfRoomResolver,
  },
  Arrangement: {
    arrangement: actionResolvers.FindUniqueArrangementResolver,
    findFirstArrangement: actionResolvers.FindFirstArrangementResolver,
    arrangements: actionResolvers.FindManyArrangementResolver,
    createArrangement: actionResolvers.CreateArrangementResolver,
    createManyArrangement: actionResolvers.CreateManyArrangementResolver,
    deleteArrangement: actionResolvers.DeleteArrangementResolver,
    updateArrangement: actionResolvers.UpdateArrangementResolver,
    deleteManyArrangement: actionResolvers.DeleteManyArrangementResolver,
    updateManyArrangement: actionResolvers.UpdateManyArrangementResolver,
    upsertArrangement: actionResolvers.UpsertArrangementResolver,
    aggregateArrangement: actionResolvers.AggregateArrangementResolver,
    groupByArrangement: actionResolvers.GroupByArrangementResolver,
  },
  SIABadge: {
    sIABadge: actionResolvers.FindUniqueSIABadgeResolver,
    findFirstSIABadge: actionResolvers.FindFirstSIABadgeResolver,
    sIABadges: actionResolvers.FindManySIABadgeResolver,
    createSIABadge: actionResolvers.CreateSIABadgeResolver,
    createManySIABadge: actionResolvers.CreateManySIABadgeResolver,
    deleteSIABadge: actionResolvers.DeleteSIABadgeResolver,
    updateSIABadge: actionResolvers.UpdateSIABadgeResolver,
    deleteManySIABadge: actionResolvers.DeleteManySIABadgeResolver,
    updateManySIABadge: actionResolvers.UpdateManySIABadgeResolver,
    upsertSIABadge: actionResolvers.UpsertSIABadgeResolver,
    aggregateSIABadge: actionResolvers.AggregateSIABadgeResolver,
    groupBySIABadge: actionResolvers.GroupBySIABadgeResolver,
  },
  SIACheck: {
    sIACheck: actionResolvers.FindUniqueSIACheckResolver,
    findFirstSIACheck: actionResolvers.FindFirstSIACheckResolver,
    sIAChecks: actionResolvers.FindManySIACheckResolver,
    createSIACheck: actionResolvers.CreateSIACheckResolver,
    createManySIACheck: actionResolvers.CreateManySIACheckResolver,
    deleteSIACheck: actionResolvers.DeleteSIACheckResolver,
    updateSIACheck: actionResolvers.UpdateSIACheckResolver,
    deleteManySIACheck: actionResolvers.DeleteManySIACheckResolver,
    updateManySIACheck: actionResolvers.UpdateManySIACheckResolver,
    upsertSIACheck: actionResolvers.UpsertSIACheckResolver,
    aggregateSIACheck: actionResolvers.AggregateSIACheckResolver,
    groupBySIACheck: actionResolvers.GroupBySIACheckResolver,
  },
  StatusOnAccount: {
    statusOnAccount: actionResolvers.FindUniqueStatusOnAccountResolver,
    findFirstStatusOnAccount: actionResolvers.FindFirstStatusOnAccountResolver,
    statusOnAccounts: actionResolvers.FindManyStatusOnAccountResolver,
    createStatusOnAccount: actionResolvers.CreateStatusOnAccountResolver,
    createManyStatusOnAccount:
      actionResolvers.CreateManyStatusOnAccountResolver,
    deleteStatusOnAccount: actionResolvers.DeleteStatusOnAccountResolver,
    updateStatusOnAccount: actionResolvers.UpdateStatusOnAccountResolver,
    deleteManyStatusOnAccount:
      actionResolvers.DeleteManyStatusOnAccountResolver,
    updateManyStatusOnAccount:
      actionResolvers.UpdateManyStatusOnAccountResolver,
    upsertStatusOnAccount: actionResolvers.UpsertStatusOnAccountResolver,
    aggregateStatusOnAccount: actionResolvers.AggregateStatusOnAccountResolver,
    groupByStatusOnAccount: actionResolvers.GroupByStatusOnAccountResolver,
  },
  Status: {
    status: actionResolvers.FindUniqueStatusResolver,
    findFirstStatus: actionResolvers.FindFirstStatusResolver,
    statuses: actionResolvers.FindManyStatusResolver,
    createStatus: actionResolvers.CreateStatusResolver,
    createManyStatus: actionResolvers.CreateManyStatusResolver,
    deleteStatus: actionResolvers.DeleteStatusResolver,
    updateStatus: actionResolvers.UpdateStatusResolver,
    deleteManyStatus: actionResolvers.DeleteManyStatusResolver,
    updateManyStatus: actionResolvers.UpdateManyStatusResolver,
    upsertStatus: actionResolvers.UpsertStatusResolver,
    aggregateStatus: actionResolvers.AggregateStatusResolver,
    groupByStatus: actionResolvers.GroupByStatusResolver,
  },
  Subscription: {
    subscription: actionResolvers.FindUniqueSubscriptionResolver,
    findFirstSubscription: actionResolvers.FindFirstSubscriptionResolver,
    subscriptions: actionResolvers.FindManySubscriptionResolver,
    createSubscription: actionResolvers.CreateSubscriptionResolver,
    createManySubscription: actionResolvers.CreateManySubscriptionResolver,
    deleteSubscription: actionResolvers.DeleteSubscriptionResolver,
    updateSubscription: actionResolvers.UpdateSubscriptionResolver,
    deleteManySubscription: actionResolvers.DeleteManySubscriptionResolver,
    updateManySubscription: actionResolvers.UpdateManySubscriptionResolver,
    upsertSubscription: actionResolvers.UpsertSubscriptionResolver,
    aggregateSubscription: actionResolvers.AggregateSubscriptionResolver,
    groupBySubscription: actionResolvers.GroupBySubscriptionResolver,
  },
  SubscriptionOnAccount: {
    subscriptionOnAccount:
      actionResolvers.FindUniqueSubscriptionOnAccountResolver,
    findFirstSubscriptionOnAccount:
      actionResolvers.FindFirstSubscriptionOnAccountResolver,
    subscriptionOnAccounts:
      actionResolvers.FindManySubscriptionOnAccountResolver,
    createSubscriptionOnAccount:
      actionResolvers.CreateSubscriptionOnAccountResolver,
    createManySubscriptionOnAccount:
      actionResolvers.CreateManySubscriptionOnAccountResolver,
    deleteSubscriptionOnAccount:
      actionResolvers.DeleteSubscriptionOnAccountResolver,
    updateSubscriptionOnAccount:
      actionResolvers.UpdateSubscriptionOnAccountResolver,
    deleteManySubscriptionOnAccount:
      actionResolvers.DeleteManySubscriptionOnAccountResolver,
    updateManySubscriptionOnAccount:
      actionResolvers.UpdateManySubscriptionOnAccountResolver,
    upsertSubscriptionOnAccount:
      actionResolvers.UpsertSubscriptionOnAccountResolver,
    aggregateSubscriptionOnAccount:
      actionResolvers.AggregateSubscriptionOnAccountResolver,
    groupBySubscriptionOnAccount:
      actionResolvers.GroupBySubscriptionOnAccountResolver,
  },
  Transaction: {
    transaction: actionResolvers.FindUniqueTransactionResolver,
    findFirstTransaction: actionResolvers.FindFirstTransactionResolver,
    transactions: actionResolvers.FindManyTransactionResolver,
    createTransaction: actionResolvers.CreateTransactionResolver,
    createManyTransaction: actionResolvers.CreateManyTransactionResolver,
    deleteTransaction: actionResolvers.DeleteTransactionResolver,
    updateTransaction: actionResolvers.UpdateTransactionResolver,
    deleteManyTransaction: actionResolvers.DeleteManyTransactionResolver,
    updateManyTransaction: actionResolvers.UpdateManyTransactionResolver,
    upsertTransaction: actionResolvers.UpsertTransactionResolver,
    aggregateTransaction: actionResolvers.AggregateTransactionResolver,
    groupByTransaction: actionResolvers.GroupByTransactionResolver,
  },
};
const crudResolversInfo = {
  Account: [
    'account',
    'findFirstAccount',
    'accounts',
    'createAccount',
    'createManyAccount',
    'deleteAccount',
    'updateAccount',
    'deleteManyAccount',
    'updateManyAccount',
    'upsertAccount',
    'aggregateAccount',
    'groupByAccount',
  ],
  Token: [
    'token',
    'findFirstToken',
    'tokens',
    'createToken',
    'createManyToken',
    'deleteToken',
    'updateToken',
    'deleteManyToken',
    'updateManyToken',
    'upsertToken',
    'aggregateToken',
    'groupByToken',
  ],
  SubuserOnAccount: [
    'subuserOnAccount',
    'findFirstSubuserOnAccount',
    'subuserOnAccounts',
    'createSubuserOnAccount',
    'createManySubuserOnAccount',
    'deleteSubuserOnAccount',
    'updateSubuserOnAccount',
    'deleteManySubuserOnAccount',
    'updateManySubuserOnAccount',
    'upsertSubuserOnAccount',
    'aggregateSubuserOnAccount',
    'groupBySubuserOnAccount',
  ],
  EmployersOnAccount: [
    'employersOnAccount',
    'findFirstEmployersOnAccount',
    'employersOnAccounts',
    'createEmployersOnAccount',
    'createManyEmployersOnAccount',
    'deleteEmployersOnAccount',
    'updateEmployersOnAccount',
    'deleteManyEmployersOnAccount',
    'updateManyEmployersOnAccount',
    'upsertEmployersOnAccount',
    'aggregateEmployersOnAccount',
    'groupByEmployersOnAccount',
  ],
  ManagersOnAccount: [
    'managersOnAccount',
    'findFirstManagersOnAccount',
    'managersOnAccounts',
    'createManagersOnAccount',
    'createManyManagersOnAccount',
    'deleteManagersOnAccount',
    'updateManagersOnAccount',
    'deleteManyManagersOnAccount',
    'updateManyManagersOnAccount',
    'upsertManagersOnAccount',
    'aggregateManagersOnAccount',
    'groupByManagersOnAccount',
  ],
  Address: [
    'address',
    'findFirstAddress',
    'addresses',
    'createAddress',
    'createManyAddress',
    'deleteAddress',
    'updateAddress',
    'deleteManyAddress',
    'updateManyAddress',
    'upsertAddress',
    'aggregateAddress',
    'groupByAddress',
  ],
  ContactAtAddress: [
    'contactAtAddress',
    'findFirstContactAtAddress',
    'contactAtAddresses',
    'createContactAtAddress',
    'createManyContactAtAddress',
    'deleteContactAtAddress',
    'updateContactAtAddress',
    'deleteManyContactAtAddress',
    'updateManyContactAtAddress',
    'upsertContactAtAddress',
    'aggregateContactAtAddress',
    'groupByContactAtAddress',
  ],
  VenueStyle: [
    'venueStyle',
    'findFirstVenueStyle',
    'venueStyles',
    'createVenueStyle',
    'createManyVenueStyle',
    'deleteVenueStyle',
    'updateVenueStyle',
    'deleteManyVenueStyle',
    'updateManyVenueStyle',
    'upsertVenueStyle',
    'aggregateVenueStyle',
    'groupByVenueStyle',
  ],
  Email: [
    'email',
    'findFirstEmail',
    'emails',
    'createEmail',
    'createManyEmail',
    'deleteEmail',
    'updateEmail',
    'deleteManyEmail',
    'updateManyEmail',
    'upsertEmail',
    'aggregateEmail',
    'groupByEmail',
  ],
  Application: [
    'application',
    'findFirstApplication',
    'applications',
    'createApplication',
    'createManyApplication',
    'deleteApplication',
    'updateApplication',
    'deleteManyApplication',
    'updateManyApplication',
    'upsertApplication',
    'aggregateApplication',
    'groupByApplication',
  ],
  Domain: [
    'domain',
    'findFirstDomain',
    'domains',
    'createDomain',
    'createManyDomain',
    'deleteDomain',
    'updateDomain',
    'deleteManyDomain',
    'updateManyDomain',
    'upsertDomain',
    'aggregateDomain',
    'groupByDomain',
  ],
  Feature: [
    'feature',
    'findFirstFeature',
    'features',
    'createFeature',
    'createManyFeature',
    'deleteFeature',
    'updateFeature',
    'deleteManyFeature',
    'updateManyFeature',
    'upsertFeature',
    'aggregateFeature',
    'groupByFeature',
  ],
  FeatureOfRoom: [
    'featureOfRoom',
    'findFirstFeatureOfRoom',
    'featureOfRooms',
    'createFeatureOfRoom',
    'createManyFeatureOfRoom',
    'deleteFeatureOfRoom',
    'updateFeatureOfRoom',
    'deleteManyFeatureOfRoom',
    'updateManyFeatureOfRoom',
    'upsertFeatureOfRoom',
    'aggregateFeatureOfRoom',
    'groupByFeatureOfRoom',
  ],
  FeatureOfAddress: [
    'featureOfAddress',
    'findFirstFeatureOfAddress',
    'featureOfAddresses',
    'createFeatureOfAddress',
    'createManyFeatureOfAddress',
    'deleteFeatureOfAddress',
    'updateFeatureOfAddress',
    'deleteManyFeatureOfAddress',
    'updateManyFeatureOfAddress',
    'upsertFeatureOfAddress',
    'aggregateFeatureOfAddress',
    'groupByFeatureOfAddress',
  ],
  Room: [
    'room',
    'findFirstRoom',
    'rooms',
    'createRoom',
    'createManyRoom',
    'deleteRoom',
    'updateRoom',
    'deleteManyRoom',
    'updateManyRoom',
    'upsertRoom',
    'aggregateRoom',
    'groupByRoom',
  ],
  Files: [
    'findUniqueFiles',
    'findFirstFiles',
    'findManyFiles',
    'createFiles',
    'createManyFiles',
    'deleteFiles',
    'updateFiles',
    'deleteManyFiles',
    'updateManyFiles',
    'upsertFiles',
    'aggregateFiles',
    'groupByFiles',
  ],
  RTW: [
    'rTW',
    'findFirstRTW',
    'rTWS',
    'createRTW',
    'createManyRTW',
    'deleteRTW',
    'updateRTW',
    'deleteManyRTW',
    'updateManyRTW',
    'upsertRTW',
    'aggregateRTW',
    'groupByRTW',
  ],
  Phone: [
    'phone',
    'findFirstPhone',
    'phones',
    'createPhone',
    'createManyPhone',
    'deletePhone',
    'updatePhone',
    'deleteManyPhone',
    'updateManyPhone',
    'upsertPhone',
    'aggregatePhone',
    'groupByPhone',
  ],
  ArrangementOfRoom: [
    'arrangementOfRoom',
    'findFirstArrangementOfRoom',
    'arrangementOfRooms',
    'createArrangementOfRoom',
    'createManyArrangementOfRoom',
    'deleteArrangementOfRoom',
    'updateArrangementOfRoom',
    'deleteManyArrangementOfRoom',
    'updateManyArrangementOfRoom',
    'upsertArrangementOfRoom',
    'aggregateArrangementOfRoom',
    'groupByArrangementOfRoom',
  ],
  Arrangement: [
    'arrangement',
    'findFirstArrangement',
    'arrangements',
    'createArrangement',
    'createManyArrangement',
    'deleteArrangement',
    'updateArrangement',
    'deleteManyArrangement',
    'updateManyArrangement',
    'upsertArrangement',
    'aggregateArrangement',
    'groupByArrangement',
  ],
  SIABadge: [
    'sIABadge',
    'findFirstSIABadge',
    'sIABadges',
    'createSIABadge',
    'createManySIABadge',
    'deleteSIABadge',
    'updateSIABadge',
    'deleteManySIABadge',
    'updateManySIABadge',
    'upsertSIABadge',
    'aggregateSIABadge',
    'groupBySIABadge',
  ],
  SIACheck: [
    'sIACheck',
    'findFirstSIACheck',
    'sIAChecks',
    'createSIACheck',
    'createManySIACheck',
    'deleteSIACheck',
    'updateSIACheck',
    'deleteManySIACheck',
    'updateManySIACheck',
    'upsertSIACheck',
    'aggregateSIACheck',
    'groupBySIACheck',
  ],
  StatusOnAccount: [
    'statusOnAccount',
    'findFirstStatusOnAccount',
    'statusOnAccounts',
    'createStatusOnAccount',
    'createManyStatusOnAccount',
    'deleteStatusOnAccount',
    'updateStatusOnAccount',
    'deleteManyStatusOnAccount',
    'updateManyStatusOnAccount',
    'upsertStatusOnAccount',
    'aggregateStatusOnAccount',
    'groupByStatusOnAccount',
  ],
  Status: [
    'status',
    'findFirstStatus',
    'statuses',
    'createStatus',
    'createManyStatus',
    'deleteStatus',
    'updateStatus',
    'deleteManyStatus',
    'updateManyStatus',
    'upsertStatus',
    'aggregateStatus',
    'groupByStatus',
  ],
  Subscription: [
    'subscription',
    'findFirstSubscription',
    'subscriptions',
    'createSubscription',
    'createManySubscription',
    'deleteSubscription',
    'updateSubscription',
    'deleteManySubscription',
    'updateManySubscription',
    'upsertSubscription',
    'aggregateSubscription',
    'groupBySubscription',
  ],
  SubscriptionOnAccount: [
    'subscriptionOnAccount',
    'findFirstSubscriptionOnAccount',
    'subscriptionOnAccounts',
    'createSubscriptionOnAccount',
    'createManySubscriptionOnAccount',
    'deleteSubscriptionOnAccount',
    'updateSubscriptionOnAccount',
    'deleteManySubscriptionOnAccount',
    'updateManySubscriptionOnAccount',
    'upsertSubscriptionOnAccount',
    'aggregateSubscriptionOnAccount',
    'groupBySubscriptionOnAccount',
  ],
  Transaction: [
    'transaction',
    'findFirstTransaction',
    'transactions',
    'createTransaction',
    'createManyTransaction',
    'deleteTransaction',
    'updateTransaction',
    'deleteManyTransaction',
    'updateManyTransaction',
    'upsertTransaction',
    'aggregateTransaction',
    'groupByTransaction',
  ],
};
const argsInfo = {
  FindUniqueAccountArgs: ['where'],
  FindFirstAccountArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyAccountArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  CreateAccountArgs: ['data'],
  CreateManyAccountArgs: ['data', 'skipDuplicates'],
  DeleteAccountArgs: ['where'],
  UpdateAccountArgs: ['data', 'where'],
  DeleteManyAccountArgs: ['where'],
  UpdateManyAccountArgs: ['data', 'where'],
  UpsertAccountArgs: ['where', 'create', 'update'],
  AggregateAccountArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  GroupByAccountArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
  FindUniqueTokenArgs: ['where'],
  FindFirstTokenArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyTokenArgs: ['where', 'orderBy', 'cursor', 'take', 'skip', 'distinct'],
  CreateTokenArgs: ['data'],
  CreateManyTokenArgs: ['data', 'skipDuplicates'],
  DeleteTokenArgs: ['where'],
  UpdateTokenArgs: ['data', 'where'],
  DeleteManyTokenArgs: ['where'],
  UpdateManyTokenArgs: ['data', 'where'],
  UpsertTokenArgs: ['where', 'create', 'update'],
  AggregateTokenArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  GroupByTokenArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
  FindUniqueSubuserOnAccountArgs: ['where'],
  FindFirstSubuserOnAccountArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManySubuserOnAccountArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  CreateSubuserOnAccountArgs: ['data'],
  CreateManySubuserOnAccountArgs: ['data', 'skipDuplicates'],
  DeleteSubuserOnAccountArgs: ['where'],
  UpdateSubuserOnAccountArgs: ['data', 'where'],
  DeleteManySubuserOnAccountArgs: ['where'],
  UpdateManySubuserOnAccountArgs: ['data', 'where'],
  UpsertSubuserOnAccountArgs: ['where', 'create', 'update'],
  AggregateSubuserOnAccountArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  GroupBySubuserOnAccountArgs: [
    'where',
    'orderBy',
    'by',
    'having',
    'take',
    'skip',
  ],
  FindUniqueEmployersOnAccountArgs: ['where'],
  FindFirstEmployersOnAccountArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyEmployersOnAccountArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  CreateEmployersOnAccountArgs: ['data'],
  CreateManyEmployersOnAccountArgs: ['data', 'skipDuplicates'],
  DeleteEmployersOnAccountArgs: ['where'],
  UpdateEmployersOnAccountArgs: ['data', 'where'],
  DeleteManyEmployersOnAccountArgs: ['where'],
  UpdateManyEmployersOnAccountArgs: ['data', 'where'],
  UpsertEmployersOnAccountArgs: ['where', 'create', 'update'],
  AggregateEmployersOnAccountArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
  ],
  GroupByEmployersOnAccountArgs: [
    'where',
    'orderBy',
    'by',
    'having',
    'take',
    'skip',
  ],
  FindUniqueManagersOnAccountArgs: ['where'],
  FindFirstManagersOnAccountArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyManagersOnAccountArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  CreateManagersOnAccountArgs: ['data'],
  CreateManyManagersOnAccountArgs: ['data', 'skipDuplicates'],
  DeleteManagersOnAccountArgs: ['where'],
  UpdateManagersOnAccountArgs: ['data', 'where'],
  DeleteManyManagersOnAccountArgs: ['where'],
  UpdateManyManagersOnAccountArgs: ['data', 'where'],
  UpsertManagersOnAccountArgs: ['where', 'create', 'update'],
  AggregateManagersOnAccountArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
  ],
  GroupByManagersOnAccountArgs: [
    'where',
    'orderBy',
    'by',
    'having',
    'take',
    'skip',
  ],
  FindUniqueAddressArgs: ['where'],
  FindFirstAddressArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyAddressArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  CreateAddressArgs: ['data'],
  CreateManyAddressArgs: ['data', 'skipDuplicates'],
  DeleteAddressArgs: ['where'],
  UpdateAddressArgs: ['data', 'where'],
  DeleteManyAddressArgs: ['where'],
  UpdateManyAddressArgs: ['data', 'where'],
  UpsertAddressArgs: ['where', 'create', 'update'],
  AggregateAddressArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  GroupByAddressArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
  FindUniqueContactAtAddressArgs: ['where'],
  FindFirstContactAtAddressArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyContactAtAddressArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  CreateContactAtAddressArgs: ['data'],
  CreateManyContactAtAddressArgs: ['data', 'skipDuplicates'],
  DeleteContactAtAddressArgs: ['where'],
  UpdateContactAtAddressArgs: ['data', 'where'],
  DeleteManyContactAtAddressArgs: ['where'],
  UpdateManyContactAtAddressArgs: ['data', 'where'],
  UpsertContactAtAddressArgs: ['where', 'create', 'update'],
  AggregateContactAtAddressArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  GroupByContactAtAddressArgs: [
    'where',
    'orderBy',
    'by',
    'having',
    'take',
    'skip',
  ],
  FindUniqueVenueStyleArgs: ['where'],
  FindFirstVenueStyleArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyVenueStyleArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  CreateVenueStyleArgs: ['data'],
  CreateManyVenueStyleArgs: ['data', 'skipDuplicates'],
  DeleteVenueStyleArgs: ['where'],
  UpdateVenueStyleArgs: ['data', 'where'],
  DeleteManyVenueStyleArgs: ['where'],
  UpdateManyVenueStyleArgs: ['data', 'where'],
  UpsertVenueStyleArgs: ['where', 'create', 'update'],
  AggregateVenueStyleArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  GroupByVenueStyleArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
  FindUniqueEmailArgs: ['where'],
  FindFirstEmailArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyEmailArgs: ['where', 'orderBy', 'cursor', 'take', 'skip', 'distinct'],
  CreateEmailArgs: ['data'],
  CreateManyEmailArgs: ['data', 'skipDuplicates'],
  DeleteEmailArgs: ['where'],
  UpdateEmailArgs: ['data', 'where'],
  DeleteManyEmailArgs: ['where'],
  UpdateManyEmailArgs: ['data', 'where'],
  UpsertEmailArgs: ['where', 'create', 'update'],
  AggregateEmailArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  GroupByEmailArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
  FindUniqueApplicationArgs: ['where'],
  FindFirstApplicationArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyApplicationArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  CreateApplicationArgs: ['data'],
  CreateManyApplicationArgs: ['data', 'skipDuplicates'],
  DeleteApplicationArgs: ['where'],
  UpdateApplicationArgs: ['data', 'where'],
  DeleteManyApplicationArgs: ['where'],
  UpdateManyApplicationArgs: ['data', 'where'],
  UpsertApplicationArgs: ['where', 'create', 'update'],
  AggregateApplicationArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  GroupByApplicationArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
  FindUniqueDomainArgs: ['where'],
  FindFirstDomainArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyDomainArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  CreateDomainArgs: ['data'],
  CreateManyDomainArgs: ['data', 'skipDuplicates'],
  DeleteDomainArgs: ['where'],
  UpdateDomainArgs: ['data', 'where'],
  DeleteManyDomainArgs: ['where'],
  UpdateManyDomainArgs: ['data', 'where'],
  UpsertDomainArgs: ['where', 'create', 'update'],
  AggregateDomainArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  GroupByDomainArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
  FindUniqueFeatureArgs: ['where'],
  FindFirstFeatureArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyFeatureArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  CreateFeatureArgs: ['data'],
  CreateManyFeatureArgs: ['data', 'skipDuplicates'],
  DeleteFeatureArgs: ['where'],
  UpdateFeatureArgs: ['data', 'where'],
  DeleteManyFeatureArgs: ['where'],
  UpdateManyFeatureArgs: ['data', 'where'],
  UpsertFeatureArgs: ['where', 'create', 'update'],
  AggregateFeatureArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  GroupByFeatureArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
  FindUniqueFeatureOfRoomArgs: ['where'],
  FindFirstFeatureOfRoomArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyFeatureOfRoomArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  CreateFeatureOfRoomArgs: ['data'],
  CreateManyFeatureOfRoomArgs: ['data', 'skipDuplicates'],
  DeleteFeatureOfRoomArgs: ['where'],
  UpdateFeatureOfRoomArgs: ['data', 'where'],
  DeleteManyFeatureOfRoomArgs: ['where'],
  UpdateManyFeatureOfRoomArgs: ['data', 'where'],
  UpsertFeatureOfRoomArgs: ['where', 'create', 'update'],
  AggregateFeatureOfRoomArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  GroupByFeatureOfRoomArgs: [
    'where',
    'orderBy',
    'by',
    'having',
    'take',
    'skip',
  ],
  FindUniqueFeatureOfAddressArgs: ['where'],
  FindFirstFeatureOfAddressArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyFeatureOfAddressArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  CreateFeatureOfAddressArgs: ['data'],
  CreateManyFeatureOfAddressArgs: ['data', 'skipDuplicates'],
  DeleteFeatureOfAddressArgs: ['where'],
  UpdateFeatureOfAddressArgs: ['data', 'where'],
  DeleteManyFeatureOfAddressArgs: ['where'],
  UpdateManyFeatureOfAddressArgs: ['data', 'where'],
  UpsertFeatureOfAddressArgs: ['where', 'create', 'update'],
  AggregateFeatureOfAddressArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  GroupByFeatureOfAddressArgs: [
    'where',
    'orderBy',
    'by',
    'having',
    'take',
    'skip',
  ],
  FindUniqueRoomArgs: ['where'],
  FindFirstRoomArgs: ['where', 'orderBy', 'cursor', 'take', 'skip', 'distinct'],
  FindManyRoomArgs: ['where', 'orderBy', 'cursor', 'take', 'skip', 'distinct'],
  CreateRoomArgs: ['data'],
  CreateManyRoomArgs: ['data', 'skipDuplicates'],
  DeleteRoomArgs: ['where'],
  UpdateRoomArgs: ['data', 'where'],
  DeleteManyRoomArgs: ['where'],
  UpdateManyRoomArgs: ['data', 'where'],
  UpsertRoomArgs: ['where', 'create', 'update'],
  AggregateRoomArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  GroupByRoomArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
  FindUniqueFilesArgs: ['where'],
  FindFirstFilesArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyFilesArgs: ['where', 'orderBy', 'cursor', 'take', 'skip', 'distinct'],
  CreateFilesArgs: ['data'],
  CreateManyFilesArgs: ['data', 'skipDuplicates'],
  DeleteFilesArgs: ['where'],
  UpdateFilesArgs: ['data', 'where'],
  DeleteManyFilesArgs: ['where'],
  UpdateManyFilesArgs: ['data', 'where'],
  UpsertFilesArgs: ['where', 'create', 'update'],
  AggregateFilesArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  GroupByFilesArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
  FindUniqueRTWArgs: ['where'],
  FindFirstRTWArgs: ['where', 'orderBy', 'cursor', 'take', 'skip', 'distinct'],
  FindManyRTWArgs: ['where', 'orderBy', 'cursor', 'take', 'skip', 'distinct'],
  CreateRTWArgs: ['data'],
  CreateManyRTWArgs: ['data', 'skipDuplicates'],
  DeleteRTWArgs: ['where'],
  UpdateRTWArgs: ['data', 'where'],
  DeleteManyRTWArgs: ['where'],
  UpdateManyRTWArgs: ['data', 'where'],
  UpsertRTWArgs: ['where', 'create', 'update'],
  AggregateRTWArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  GroupByRTWArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
  FindUniquePhoneArgs: ['where'],
  FindFirstPhoneArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyPhoneArgs: ['where', 'orderBy', 'cursor', 'take', 'skip', 'distinct'],
  CreatePhoneArgs: ['data'],
  CreateManyPhoneArgs: ['data', 'skipDuplicates'],
  DeletePhoneArgs: ['where'],
  UpdatePhoneArgs: ['data', 'where'],
  DeleteManyPhoneArgs: ['where'],
  UpdateManyPhoneArgs: ['data', 'where'],
  UpsertPhoneArgs: ['where', 'create', 'update'],
  AggregatePhoneArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  GroupByPhoneArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
  FindUniqueArrangementOfRoomArgs: ['where'],
  FindFirstArrangementOfRoomArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyArrangementOfRoomArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  CreateArrangementOfRoomArgs: ['data'],
  CreateManyArrangementOfRoomArgs: ['data', 'skipDuplicates'],
  DeleteArrangementOfRoomArgs: ['where'],
  UpdateArrangementOfRoomArgs: ['data', 'where'],
  DeleteManyArrangementOfRoomArgs: ['where'],
  UpdateManyArrangementOfRoomArgs: ['data', 'where'],
  UpsertArrangementOfRoomArgs: ['where', 'create', 'update'],
  AggregateArrangementOfRoomArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
  ],
  GroupByArrangementOfRoomArgs: [
    'where',
    'orderBy',
    'by',
    'having',
    'take',
    'skip',
  ],
  FindUniqueArrangementArgs: ['where'],
  FindFirstArrangementArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyArrangementArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  CreateArrangementArgs: ['data'],
  CreateManyArrangementArgs: ['data', 'skipDuplicates'],
  DeleteArrangementArgs: ['where'],
  UpdateArrangementArgs: ['data', 'where'],
  DeleteManyArrangementArgs: ['where'],
  UpdateManyArrangementArgs: ['data', 'where'],
  UpsertArrangementArgs: ['where', 'create', 'update'],
  AggregateArrangementArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  GroupByArrangementArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
  FindUniqueSIABadgeArgs: ['where'],
  FindFirstSIABadgeArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManySIABadgeArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  CreateSIABadgeArgs: ['data'],
  CreateManySIABadgeArgs: ['data', 'skipDuplicates'],
  DeleteSIABadgeArgs: ['where'],
  UpdateSIABadgeArgs: ['data', 'where'],
  DeleteManySIABadgeArgs: ['where'],
  UpdateManySIABadgeArgs: ['data', 'where'],
  UpsertSIABadgeArgs: ['where', 'create', 'update'],
  AggregateSIABadgeArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  GroupBySIABadgeArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
  FindUniqueSIACheckArgs: ['where'],
  FindFirstSIACheckArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManySIACheckArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  CreateSIACheckArgs: ['data'],
  CreateManySIACheckArgs: ['data', 'skipDuplicates'],
  DeleteSIACheckArgs: ['where'],
  UpdateSIACheckArgs: ['data', 'where'],
  DeleteManySIACheckArgs: ['where'],
  UpdateManySIACheckArgs: ['data', 'where'],
  UpsertSIACheckArgs: ['where', 'create', 'update'],
  AggregateSIACheckArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  GroupBySIACheckArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
  FindUniqueStatusOnAccountArgs: ['where'],
  FindFirstStatusOnAccountArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyStatusOnAccountArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  CreateStatusOnAccountArgs: ['data'],
  CreateManyStatusOnAccountArgs: ['data', 'skipDuplicates'],
  DeleteStatusOnAccountArgs: ['where'],
  UpdateStatusOnAccountArgs: ['data', 'where'],
  DeleteManyStatusOnAccountArgs: ['where'],
  UpdateManyStatusOnAccountArgs: ['data', 'where'],
  UpsertStatusOnAccountArgs: ['where', 'create', 'update'],
  AggregateStatusOnAccountArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  GroupByStatusOnAccountArgs: [
    'where',
    'orderBy',
    'by',
    'having',
    'take',
    'skip',
  ],
  FindUniqueStatusArgs: ['where'],
  FindFirstStatusArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyStatusArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  CreateStatusArgs: ['data'],
  CreateManyStatusArgs: ['data', 'skipDuplicates'],
  DeleteStatusArgs: ['where'],
  UpdateStatusArgs: ['data', 'where'],
  DeleteManyStatusArgs: ['where'],
  UpdateManyStatusArgs: ['data', 'where'],
  UpsertStatusArgs: ['where', 'create', 'update'],
  AggregateStatusArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  GroupByStatusArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
  FindUniqueSubscriptionArgs: ['where'],
  FindFirstSubscriptionArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManySubscriptionArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  CreateSubscriptionArgs: ['data'],
  CreateManySubscriptionArgs: ['data', 'skipDuplicates'],
  DeleteSubscriptionArgs: ['where'],
  UpdateSubscriptionArgs: ['data', 'where'],
  DeleteManySubscriptionArgs: ['where'],
  UpdateManySubscriptionArgs: ['data', 'where'],
  UpsertSubscriptionArgs: ['where', 'create', 'update'],
  AggregateSubscriptionArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  GroupBySubscriptionArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
  FindUniqueSubscriptionOnAccountArgs: ['where'],
  FindFirstSubscriptionOnAccountArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManySubscriptionOnAccountArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  CreateSubscriptionOnAccountArgs: ['data'],
  CreateManySubscriptionOnAccountArgs: ['data', 'skipDuplicates'],
  DeleteSubscriptionOnAccountArgs: ['where'],
  UpdateSubscriptionOnAccountArgs: ['data', 'where'],
  DeleteManySubscriptionOnAccountArgs: ['where'],
  UpdateManySubscriptionOnAccountArgs: ['data', 'where'],
  UpsertSubscriptionOnAccountArgs: ['where', 'create', 'update'],
  AggregateSubscriptionOnAccountArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
  ],
  GroupBySubscriptionOnAccountArgs: [
    'where',
    'orderBy',
    'by',
    'having',
    'take',
    'skip',
  ],
  FindUniqueTransactionArgs: ['where'],
  FindFirstTransactionArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  FindManyTransactionArgs: [
    'where',
    'orderBy',
    'cursor',
    'take',
    'skip',
    'distinct',
  ],
  CreateTransactionArgs: ['data'],
  CreateManyTransactionArgs: ['data', 'skipDuplicates'],
  DeleteTransactionArgs: ['where'],
  UpdateTransactionArgs: ['data', 'where'],
  DeleteManyTransactionArgs: ['where'],
  UpdateManyTransactionArgs: ['data', 'where'],
  UpsertTransactionArgs: ['where', 'create', 'update'],
  AggregateTransactionArgs: ['where', 'orderBy', 'cursor', 'take', 'skip'],
  GroupByTransactionArgs: ['where', 'orderBy', 'by', 'having', 'take', 'skip'],
};

type ResolverModelNames = keyof typeof crudResolversMap;

type ModelResolverActionNames<TModel extends ResolverModelNames> =
  keyof typeof crudResolversMap[TModel]['prototype'];

export type ResolverActionsConfig<TModel extends ResolverModelNames> = Partial<
  Record<ModelResolverActionNames<TModel> | '_all', MethodDecorator[]>
>;

export type ResolversEnhanceMap = {
  [TModel in ResolverModelNames]?: ResolverActionsConfig<TModel>;
};

export function applyResolversEnhanceMap(
  resolversEnhanceMap: ResolversEnhanceMap
) {
  for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
    const modelName =
      resolversEnhanceMapKey as keyof typeof resolversEnhanceMap;
    const crudTarget = crudResolversMap[modelName].prototype;
    const resolverActionsConfig = resolversEnhanceMap[modelName]!;
    const actionResolversConfig = actionResolversMap[modelName];
    if (resolverActionsConfig._all) {
      const allActionsDecorators = resolverActionsConfig._all;
      const resolverActionNames =
        crudResolversInfo[modelName as keyof typeof crudResolversInfo];
      for (const resolverActionName of resolverActionNames) {
        const actionTarget = (
          actionResolversConfig[
            resolverActionName as keyof typeof actionResolversConfig
          ] as Function
        ).prototype;
        for (const allActionsDecorator of allActionsDecorators) {
          allActionsDecorator(
            crudTarget,
            resolverActionName,
            Object.getOwnPropertyDescriptor(crudTarget, resolverActionName)!
          );
          allActionsDecorator(
            actionTarget,
            resolverActionName,
            Object.getOwnPropertyDescriptor(actionTarget, resolverActionName)!
          );
        }
      }
    }
    const resolverActionsToApply = Object.keys(resolverActionsConfig).filter(
      (it) => it !== '_all'
    );
    for (const resolverActionName of resolverActionsToApply) {
      const decorators = resolverActionsConfig[
        resolverActionName as keyof typeof resolverActionsConfig
      ] as MethodDecorator[];
      const actionTarget = (
        actionResolversConfig[
          resolverActionName as keyof typeof actionResolversConfig
        ] as Function
      ).prototype;
      for (const decorator of decorators) {
        decorator(
          crudTarget,
          resolverActionName,
          Object.getOwnPropertyDescriptor(crudTarget, resolverActionName)!
        );
        decorator(
          actionTarget,
          resolverActionName,
          Object.getOwnPropertyDescriptor(actionTarget, resolverActionName)!
        );
      }
    }
  }
}

type ArgsTypesNames = keyof typeof argsTypes;

type ArgFieldNames<TArgsType extends ArgsTypesNames> = Exclude<
  keyof typeof argsTypes[TArgsType]['prototype'],
  number | symbol
>;

type ArgFieldsConfig<TArgsType extends ArgsTypesNames> = FieldsConfig<
  ArgFieldNames<TArgsType>
>;

export type ArgConfig<TArgsType extends ArgsTypesNames> = {
  class?: ClassDecorator[];
  fields?: ArgFieldsConfig<TArgsType>;
};

export type ArgsTypesEnhanceMap = {
  [TArgsType in ArgsTypesNames]?: ArgConfig<TArgsType>;
};

export function applyArgsTypesEnhanceMap(
  argsTypesEnhanceMap: ArgsTypesEnhanceMap
) {
  for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
    const argsTypeName =
      argsTypesEnhanceMapKey as keyof typeof argsTypesEnhanceMap;
    const typeConfig = argsTypesEnhanceMap[argsTypeName]!;
    const typeClass = argsTypes[argsTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      argsInfo[argsTypeName as keyof typeof argsInfo]
    );
  }
}

const relationResolversMap = {
  Account: relationResolvers.AccountRelationsResolver,
  Token: relationResolvers.TokenRelationsResolver,
  SubuserOnAccount: relationResolvers.SubuserOnAccountRelationsResolver,
  EmployersOnAccount: relationResolvers.EmployersOnAccountRelationsResolver,
  ManagersOnAccount: relationResolvers.ManagersOnAccountRelationsResolver,
  Address: relationResolvers.AddressRelationsResolver,
  ContactAtAddress: relationResolvers.ContactAtAddressRelationsResolver,
  VenueStyle: relationResolvers.VenueStyleRelationsResolver,
  Email: relationResolvers.EmailRelationsResolver,
  Application: relationResolvers.ApplicationRelationsResolver,
  Domain: relationResolvers.DomainRelationsResolver,
  Feature: relationResolvers.FeatureRelationsResolver,
  FeatureOfRoom: relationResolvers.FeatureOfRoomRelationsResolver,
  FeatureOfAddress: relationResolvers.FeatureOfAddressRelationsResolver,
  Room: relationResolvers.RoomRelationsResolver,
  Files: relationResolvers.FilesRelationsResolver,
  RTW: relationResolvers.RTWRelationsResolver,
  Phone: relationResolvers.PhoneRelationsResolver,
  ArrangementOfRoom: relationResolvers.ArrangementOfRoomRelationsResolver,
  Arrangement: relationResolvers.ArrangementRelationsResolver,
  SIABadge: relationResolvers.SIABadgeRelationsResolver,
  SIACheck: relationResolvers.SIACheckRelationsResolver,
  StatusOnAccount: relationResolvers.StatusOnAccountRelationsResolver,
  Status: relationResolvers.StatusRelationsResolver,
  Subscription: relationResolvers.SubscriptionRelationsResolver,
  SubscriptionOnAccount:
    relationResolvers.SubscriptionOnAccountRelationsResolver,
  Transaction: relationResolvers.TransactionRelationsResolver,
};
const relationResolversInfo = {
  Account: [
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  Token: ['account'],
  SubuserOnAccount: ['account', 'subuser'],
  EmployersOnAccount: ['account', 'employer'],
  ManagersOnAccount: ['account', 'managers'],
  Address: [
    'account',
    'contacts',
    'venueStyle',
    'primaryAccount',
    'featuresOfBuisness',
    'phones',
    'rooms',
  ],
  ContactAtAddress: ['account', 'address', 'email'],
  VenueStyle: ['address'],
  Email: ['associatedContact', 'domain', 'account'],
  Application: ['account'],
  Domain: ['linkedEmails'],
  Feature: ['featureOfRoom', 'featureOfAddress'],
  FeatureOfRoom: ['feature', 'room'],
  FeatureOfAddress: ['feature', 'address'],
  Room: ['featuresOfRoom', 'address', 'arrangements'],
  Files: ['rtw', 'account'],
  RTW: ['files', 'account'],
  Phone: ['account', 'address'],
  ArrangementOfRoom: ['arrangement', 'room'],
  Arrangement: ['room'],
  SIABadge: ['siaChecks', 'account'],
  SIACheck: ['badge', 'transactions'],
  StatusOnAccount: ['status', 'account'],
  Status: ['account'],
  Subscription: ['accounts'],
  SubscriptionOnAccount: ['subscription', 'account'],
  Transaction: ['account', 'SIACheck'],
};

type RelationResolverModelNames = keyof typeof relationResolversMap;

type RelationResolverActionNames<TModel extends RelationResolverModelNames> =
  keyof typeof relationResolversMap[TModel]['prototype'];

export type RelationResolverActionsConfig<
  TModel extends RelationResolverModelNames
> = Partial<
  Record<RelationResolverActionNames<TModel> | '_all', MethodDecorator[]>
>;

export type RelationResolversEnhanceMap = {
  [TModel in RelationResolverModelNames]?: RelationResolverActionsConfig<TModel>;
};

export function applyRelationResolversEnhanceMap(
  relationResolversEnhanceMap: RelationResolversEnhanceMap
) {
  for (const relationResolversEnhanceMapKey of Object.keys(
    relationResolversEnhanceMap
  )) {
    const modelName =
      relationResolversEnhanceMapKey as keyof typeof relationResolversEnhanceMap;
    const relationResolverTarget = relationResolversMap[modelName].prototype;
    const relationResolverActionsConfig =
      relationResolversEnhanceMap[modelName]!;
    if (relationResolverActionsConfig._all) {
      const allActionsDecorators = relationResolverActionsConfig._all;
      const relationResolverActionNames =
        relationResolversInfo[modelName as keyof typeof relationResolversInfo];
      for (const relationResolverActionName of relationResolverActionNames) {
        for (const allActionsDecorator of allActionsDecorators) {
          allActionsDecorator(
            relationResolverTarget,
            relationResolverActionName,
            Object.getOwnPropertyDescriptor(
              relationResolverTarget,
              relationResolverActionName
            )!
          );
        }
      }
    }
    const relationResolverActionsToApply = Object.keys(
      relationResolverActionsConfig
    ).filter((it) => it !== '_all');
    for (const relationResolverActionName of relationResolverActionsToApply) {
      const decorators = relationResolverActionsConfig[
        relationResolverActionName as keyof typeof relationResolverActionsConfig
      ] as MethodDecorator[];
      for (const decorator of decorators) {
        decorator(
          relationResolverTarget,
          relationResolverActionName,
          Object.getOwnPropertyDescriptor(
            relationResolverTarget,
            relationResolverActionName
          )!
        );
      }
    }
  }
}

type TypeConfig = {
  class?: ClassDecorator[];
  fields?: FieldsConfig;
};

type FieldsConfig<TTypeKeys extends string = string> = Partial<
  Record<TTypeKeys | '_all', PropertyDecorator[]>
>;

function applyTypeClassEnhanceConfig<
  TEnhanceConfig extends TypeConfig,
  TType extends object
>(
  enhanceConfig: TEnhanceConfig,
  typeClass: ClassType<TType>,
  typePrototype: TType,
  typeFieldNames: string[]
) {
  if (enhanceConfig.class) {
    for (const decorator of enhanceConfig.class) {
      decorator(typeClass);
    }
  }
  if (enhanceConfig.fields) {
    if (enhanceConfig.fields._all) {
      const allFieldsDecorators = enhanceConfig.fields._all;
      for (const typeFieldName of typeFieldNames) {
        for (const allFieldsDecorator of allFieldsDecorators) {
          allFieldsDecorator(typePrototype, typeFieldName);
        }
      }
    }
    const configFieldsToApply = Object.keys(enhanceConfig.fields).filter(
      (it) => it !== '_all'
    );
    for (const typeFieldName of configFieldsToApply) {
      const fieldDecorators = enhanceConfig.fields[typeFieldName]!;
      for (const fieldDecorator of fieldDecorators) {
        fieldDecorator(typePrototype, typeFieldName);
      }
    }
  }
}

const modelsInfo = {
  Account: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
  ],
  Token: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'value',
    'valid',
    'expiry',
    'apiToken',
  ],
  SubuserOnAccount: ['accountId', 'subuserId', 'createdAt', 'updatedAt'],
  EmployersOnAccount: ['accountId', 'employerId', 'createdAt', 'updatedAt'],
  ManagersOnAccount: ['accountId', 'managersId', 'createdAt', 'updatedAt'],
  Address: [
    'id',
    'createdAt',
    'updatedAt',
    'accountId',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'hoursOfOperation',
    'features',
    'details',
    'public',
    'primaryaccountId',
    'deleted',
  ],
  ContactAtAddress: [
    'accountId',
    'addressId',
    'jobTitle',
    'phone',
    'emailId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  VenueStyle: ['id', 'createdAt', 'updatedAt', 'name', 'details'],
  Email: [
    'id',
    'domainId',
    'email',
    'accountId',
    'verified',
    'public',
    'primary',
    'path',
    'copy',
    'notifyFrom',
    'imap_authUser',
    'imap_authPass',
    'imap_accessToken',
    'imap_authServer',
    'imap_host',
    'imap_port',
    'imap_secure',
    'imap_tslRejectUnauthorized',
    'imap_tslMinVersion',
    'imap_resyncDelay',
    'smtp_authUser',
    'smtp_authPass',
    'smtp_accessToken',
    'smtp_authServer',
    'smtp_host',
    'smtp_port',
    'smtp_secure',
    'smtp_tslRejectUnauthorized',
    'smtp_tslMinVersion',
    'oauth2_authorize',
    'oauth2_provider',
    'oauth2_authUser',
    'oauth2_accessToken',
    'oauth2_refreshToken',
    'oauth2_expires',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  Application: ['id', 'name', 'accountId', 'createdAt', 'updatedAt', 'deleted'],
  Domain: [
    'id',
    'domain',
    'verified',
    'dnsType',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  Feature: ['id', 'name', 'type', 'createdAt', 'updatedAt', 'deleted'],
  FeatureOfRoom: [
    'roomId',
    'featureId',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureOfAddress: [
    'addressId',
    'featureId',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  Room: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'addressId',
    'name',
    'floor',
    'building',
    'accessibility',
    'checkin',
    'checkout',
    'length',
    'width',
    'height',
  ],
  Files: ['id', 'name', 'rtwId', 'createdAt', 'updatedAt', 'deleted'],
  RTW: [
    'id',
    'name',
    'active',
    'startDate',
    'endDate',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  Phone: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'accountId',
    'addressId',
    'phone',
    'public',
  ],
  ArrangementOfRoom: [
    'roomId',
    'arrangementId',
    'capacity',
    'details',
    'createdAt',
    'updatedAt',
  ],
  Arrangement: ['id', 'createdAt', 'updatedAt', 'name', 'icon', 'details'],
  SIABadge: [
    'id',
    'licenseSector',
    'type',
    'licenseExplanation',
    'additionalTerms',
    'createdAt',
    'active',
    'expiry',
    'updatedAt',
    'deleted',
    'account_id',
  ],
  SIACheck: [
    'id',
    'sia_id',
    'status',
    'AuthUrl',
    'pubUrl',
    'createdAt',
    'updatedAt',
    'deleted',
    'error',
    'transactionId',
  ],
  StatusOnAccount: [
    'statusId',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  Status: ['id', 'name', 'createdAt', 'updatedAt', 'deleted'],
  Subscription: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'cost',
    'details',
  ],
  SubscriptionOnAccount: [
    'subscriptionId',
    'accountId',
    'active',
    'deactivated',
    'activated',
    'startedAt',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  Transaction: ['id', 'createdAt', 'updatedAt', 'deleted', 'accountId', 'data'],
};

type ModelNames = keyof typeof models;

type ModelFieldNames<TModel extends ModelNames> = Exclude<
  keyof typeof models[TModel]['prototype'],
  number | symbol
>;

type ModelFieldsConfig<TModel extends ModelNames> = FieldsConfig<
  ModelFieldNames<TModel>
>;

export type ModelConfig<TModel extends ModelNames> = {
  class?: ClassDecorator[];
  fields?: ModelFieldsConfig<TModel>;
};

export type ModelsEnhanceMap = {
  [TModel in ModelNames]?: ModelConfig<TModel>;
};

export function applyModelsEnhanceMap(modelsEnhanceMap: ModelsEnhanceMap) {
  for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
    const modelName = modelsEnhanceMapKey as keyof typeof modelsEnhanceMap;
    const modelConfig = modelsEnhanceMap[modelName]!;
    const modelClass = models[modelName];
    const modelTarget = modelClass.prototype;
    applyTypeClassEnhanceConfig(
      modelConfig,
      modelClass,
      modelTarget,
      modelsInfo[modelName as keyof typeof modelsInfo]
    );
  }
}

const outputsInfo = {
  AggregateAccount: ['_count', '_min', '_max'],
  AccountGroupBy: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    '_count',
    '_min',
    '_max',
  ],
  AggregateToken: ['_count', '_min', '_max'],
  TokenGroupBy: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'value',
    'valid',
    'expiry',
    'apiToken',
    '_count',
    '_min',
    '_max',
  ],
  AggregateSubuserOnAccount: ['_count', '_min', '_max'],
  SubuserOnAccountGroupBy: [
    'accountId',
    'subuserId',
    'createdAt',
    'updatedAt',
    '_count',
    '_min',
    '_max',
  ],
  AggregateEmployersOnAccount: ['_count', '_min', '_max'],
  EmployersOnAccountGroupBy: [
    'accountId',
    'employerId',
    'createdAt',
    'updatedAt',
    '_count',
    '_min',
    '_max',
  ],
  AggregateManagersOnAccount: ['_count', '_min', '_max'],
  ManagersOnAccountGroupBy: [
    'accountId',
    'managersId',
    'createdAt',
    'updatedAt',
    '_count',
    '_min',
    '_max',
  ],
  AggregateAddress: ['_count', '_min', '_max'],
  AddressGroupBy: [
    'id',
    'createdAt',
    'updatedAt',
    'accountId',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'hoursOfOperation',
    'features',
    'details',
    'public',
    'primaryaccountId',
    'deleted',
    '_count',
    '_min',
    '_max',
  ],
  AggregateContactAtAddress: ['_count', '_min', '_max'],
  ContactAtAddressGroupBy: [
    'accountId',
    'addressId',
    'jobTitle',
    'phone',
    'emailId',
    'createdAt',
    'updatedAt',
    'deleted',
    '_count',
    '_min',
    '_max',
  ],
  AggregateVenueStyle: ['_count', '_min', '_max'],
  VenueStyleGroupBy: [
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'details',
    '_count',
    '_min',
    '_max',
  ],
  AggregateEmail: ['_count', '_avg', '_sum', '_min', '_max'],
  EmailGroupBy: [
    'id',
    'domainId',
    'email',
    'accountId',
    'verified',
    'public',
    'primary',
    'path',
    'copy',
    'notifyFrom',
    'imap_authUser',
    'imap_authPass',
    'imap_accessToken',
    'imap_authServer',
    'imap_host',
    'imap_port',
    'imap_secure',
    'imap_tslRejectUnauthorized',
    'imap_tslMinVersion',
    'imap_resyncDelay',
    'smtp_authUser',
    'smtp_authPass',
    'smtp_accessToken',
    'smtp_authServer',
    'smtp_host',
    'smtp_port',
    'smtp_secure',
    'smtp_tslRejectUnauthorized',
    'smtp_tslMinVersion',
    'oauth2_authorize',
    'oauth2_provider',
    'oauth2_authUser',
    'oauth2_accessToken',
    'oauth2_refreshToken',
    'oauth2_expires',
    'createdAt',
    'updatedAt',
    'deleted',
    '_count',
    '_avg',
    '_sum',
    '_min',
    '_max',
  ],
  AggregateApplication: ['_count', '_min', '_max'],
  ApplicationGroupBy: [
    'id',
    'name',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
    '_count',
    '_min',
    '_max',
  ],
  AggregateDomain: ['_count', '_min', '_max'],
  DomainGroupBy: [
    'id',
    'domain',
    'verified',
    'dnsType',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
    '_count',
    '_min',
    '_max',
  ],
  AggregateFeature: ['_count', '_min', '_max'],
  FeatureGroupBy: [
    'id',
    'name',
    'type',
    'createdAt',
    'updatedAt',
    'deleted',
    '_count',
    '_min',
    '_max',
  ],
  AggregateFeatureOfRoom: ['_count', '_min', '_max'],
  FeatureOfRoomGroupBy: [
    'roomId',
    'featureId',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
    '_count',
    '_min',
    '_max',
  ],
  AggregateFeatureOfAddress: ['_count', '_min', '_max'],
  FeatureOfAddressGroupBy: [
    'addressId',
    'featureId',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
    '_count',
    '_min',
    '_max',
  ],
  AggregateRoom: ['_count', '_min', '_max'],
  RoomGroupBy: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'addressId',
    'name',
    'floor',
    'building',
    'accessibility',
    'checkin',
    'checkout',
    'length',
    'width',
    'height',
    '_count',
    '_min',
    '_max',
  ],
  AggregateFiles: ['_count', '_min', '_max'],
  FilesGroupBy: [
    'id',
    'name',
    'rtwId',
    'createdAt',
    'updatedAt',
    'deleted',
    '_count',
    '_min',
    '_max',
  ],
  AggregateRTW: ['_count', '_min', '_max'],
  RTWGroupBy: [
    'id',
    'name',
    'active',
    'startDate',
    'endDate',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
    '_count',
    '_min',
    '_max',
  ],
  AggregatePhone: ['_count', '_min', '_max'],
  PhoneGroupBy: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'accountId',
    'addressId',
    'phone',
    'public',
    '_count',
    '_min',
    '_max',
  ],
  AggregateArrangementOfRoom: ['_count', '_avg', '_sum', '_min', '_max'],
  ArrangementOfRoomGroupBy: [
    'roomId',
    'arrangementId',
    'capacity',
    'details',
    'createdAt',
    'updatedAt',
    '_count',
    '_avg',
    '_sum',
    '_min',
    '_max',
  ],
  AggregateArrangement: ['_count', '_min', '_max'],
  ArrangementGroupBy: [
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'icon',
    'details',
    '_count',
    '_min',
    '_max',
  ],
  AggregateSIABadge: ['_count', '_avg', '_sum', '_min', '_max'],
  SIABadgeGroupBy: [
    'id',
    'licenseSector',
    'type',
    'licenseExplanation',
    'additionalTerms',
    'createdAt',
    'active',
    'expiry',
    'updatedAt',
    'deleted',
    'account_id',
    '_count',
    '_avg',
    '_sum',
    '_min',
    '_max',
  ],
  AggregateSIACheck: ['_count', '_avg', '_sum', '_min', '_max'],
  SIACheckGroupBy: [
    'id',
    'sia_id',
    'status',
    'AuthUrl',
    'pubUrl',
    'createdAt',
    'updatedAt',
    'deleted',
    'error',
    'transactionId',
    '_count',
    '_avg',
    '_sum',
    '_min',
    '_max',
  ],
  AggregateStatusOnAccount: ['_count', '_min', '_max'],
  StatusOnAccountGroupBy: [
    'statusId',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
    '_count',
    '_min',
    '_max',
  ],
  AggregateStatus: ['_count', '_min', '_max'],
  StatusGroupBy: [
    'id',
    'name',
    'createdAt',
    'updatedAt',
    'deleted',
    '_count',
    '_min',
    '_max',
  ],
  AggregateSubscription: ['_count', '_min', '_max'],
  SubscriptionGroupBy: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'cost',
    'details',
    '_count',
    '_min',
    '_max',
  ],
  AggregateSubscriptionOnAccount: ['_count', '_min', '_max'],
  SubscriptionOnAccountGroupBy: [
    'subscriptionId',
    'accountId',
    'active',
    'deactivated',
    'activated',
    'startedAt',
    'createdAt',
    'updatedAt',
    'deleted',
    '_count',
    '_min',
    '_max',
  ],
  AggregateTransaction: ['_count', '_min', '_max'],
  TransactionGroupBy: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'accountId',
    'data',
    '_count',
    '_min',
    '_max',
  ],
  AffectedRowsOutput: ['count'],
  AccountCount: [
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountCountAggregate: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    '_all',
  ],
  AccountMinAggregate: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
  ],
  AccountMaxAggregate: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
  ],
  TokenCountAggregate: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'value',
    'valid',
    'expiry',
    'apiToken',
    '_all',
  ],
  TokenMinAggregate: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'value',
    'valid',
    'expiry',
    'apiToken',
  ],
  TokenMaxAggregate: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'value',
    'valid',
    'expiry',
    'apiToken',
  ],
  SubuserOnAccountCountAggregate: [
    'accountId',
    'subuserId',
    'createdAt',
    'updatedAt',
    '_all',
  ],
  SubuserOnAccountMinAggregate: [
    'accountId',
    'subuserId',
    'createdAt',
    'updatedAt',
  ],
  SubuserOnAccountMaxAggregate: [
    'accountId',
    'subuserId',
    'createdAt',
    'updatedAt',
  ],
  EmployersOnAccountCountAggregate: [
    'accountId',
    'employerId',
    'createdAt',
    'updatedAt',
    '_all',
  ],
  EmployersOnAccountMinAggregate: [
    'accountId',
    'employerId',
    'createdAt',
    'updatedAt',
  ],
  EmployersOnAccountMaxAggregate: [
    'accountId',
    'employerId',
    'createdAt',
    'updatedAt',
  ],
  ManagersOnAccountCountAggregate: [
    'accountId',
    'managersId',
    'createdAt',
    'updatedAt',
    '_all',
  ],
  ManagersOnAccountMinAggregate: [
    'accountId',
    'managersId',
    'createdAt',
    'updatedAt',
  ],
  ManagersOnAccountMaxAggregate: [
    'accountId',
    'managersId',
    'createdAt',
    'updatedAt',
  ],
  AddressCount: [
    'contacts',
    'venueStyle',
    'featuresOfBuisness',
    'phones',
    'rooms',
  ],
  AddressCountAggregate: [
    'id',
    'createdAt',
    'updatedAt',
    'accountId',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'hoursOfOperation',
    'features',
    'details',
    'public',
    'primaryaccountId',
    'deleted',
    '_all',
  ],
  AddressMinAggregate: [
    'id',
    'createdAt',
    'updatedAt',
    'accountId',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'features',
    'public',
    'primaryaccountId',
    'deleted',
  ],
  AddressMaxAggregate: [
    'id',
    'createdAt',
    'updatedAt',
    'accountId',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'features',
    'public',
    'primaryaccountId',
    'deleted',
  ],
  ContactAtAddressCountAggregate: [
    'accountId',
    'addressId',
    'jobTitle',
    'phone',
    'emailId',
    'createdAt',
    'updatedAt',
    'deleted',
    '_all',
  ],
  ContactAtAddressMinAggregate: [
    'accountId',
    'addressId',
    'jobTitle',
    'phone',
    'emailId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  ContactAtAddressMaxAggregate: [
    'accountId',
    'addressId',
    'jobTitle',
    'phone',
    'emailId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  VenueStyleCount: ['address'],
  VenueStyleCountAggregate: [
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'details',
    '_all',
  ],
  VenueStyleMinAggregate: ['id', 'createdAt', 'updatedAt', 'name', 'details'],
  VenueStyleMaxAggregate: ['id', 'createdAt', 'updatedAt', 'name', 'details'],
  EmailCount: ['associatedContact'],
  EmailCountAggregate: [
    'id',
    'domainId',
    'email',
    'accountId',
    'verified',
    'public',
    'primary',
    'path',
    'copy',
    'notifyFrom',
    'imap_authUser',
    'imap_authPass',
    'imap_accessToken',
    'imap_authServer',
    'imap_host',
    'imap_port',
    'imap_secure',
    'imap_tslRejectUnauthorized',
    'imap_tslMinVersion',
    'imap_resyncDelay',
    'smtp_authUser',
    'smtp_authPass',
    'smtp_accessToken',
    'smtp_authServer',
    'smtp_host',
    'smtp_port',
    'smtp_secure',
    'smtp_tslRejectUnauthorized',
    'smtp_tslMinVersion',
    'oauth2_authorize',
    'oauth2_provider',
    'oauth2_authUser',
    'oauth2_accessToken',
    'oauth2_refreshToken',
    'oauth2_expires',
    'createdAt',
    'updatedAt',
    'deleted',
    '_all',
  ],
  EmailAvgAggregate: ['imap_resyncDelay'],
  EmailSumAggregate: ['imap_resyncDelay'],
  EmailMinAggregate: [
    'id',
    'domainId',
    'email',
    'accountId',
    'verified',
    'public',
    'primary',
    'path',
    'copy',
    'notifyFrom',
    'imap_authUser',
    'imap_authPass',
    'imap_accessToken',
    'imap_authServer',
    'imap_host',
    'imap_port',
    'imap_secure',
    'imap_tslRejectUnauthorized',
    'imap_tslMinVersion',
    'imap_resyncDelay',
    'smtp_authUser',
    'smtp_authPass',
    'smtp_accessToken',
    'smtp_authServer',
    'smtp_host',
    'smtp_port',
    'smtp_secure',
    'smtp_tslRejectUnauthorized',
    'smtp_tslMinVersion',
    'oauth2_authorize',
    'oauth2_provider',
    'oauth2_authUser',
    'oauth2_accessToken',
    'oauth2_refreshToken',
    'oauth2_expires',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  EmailMaxAggregate: [
    'id',
    'domainId',
    'email',
    'accountId',
    'verified',
    'public',
    'primary',
    'path',
    'copy',
    'notifyFrom',
    'imap_authUser',
    'imap_authPass',
    'imap_accessToken',
    'imap_authServer',
    'imap_host',
    'imap_port',
    'imap_secure',
    'imap_tslRejectUnauthorized',
    'imap_tslMinVersion',
    'imap_resyncDelay',
    'smtp_authUser',
    'smtp_authPass',
    'smtp_accessToken',
    'smtp_authServer',
    'smtp_host',
    'smtp_port',
    'smtp_secure',
    'smtp_tslRejectUnauthorized',
    'smtp_tslMinVersion',
    'oauth2_authorize',
    'oauth2_provider',
    'oauth2_authUser',
    'oauth2_accessToken',
    'oauth2_refreshToken',
    'oauth2_expires',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  ApplicationCountAggregate: [
    'id',
    'name',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
    '_all',
  ],
  ApplicationMinAggregate: [
    'id',
    'name',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  ApplicationMaxAggregate: [
    'id',
    'name',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  DomainCount: ['linkedEmails'],
  DomainCountAggregate: [
    'id',
    'domain',
    'verified',
    'dnsType',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
    '_all',
  ],
  DomainMinAggregate: [
    'id',
    'domain',
    'verified',
    'dnsType',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  DomainMaxAggregate: [
    'id',
    'domain',
    'verified',
    'dnsType',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureCount: ['featureOfRoom', 'featureOfAddress'],
  FeatureCountAggregate: [
    'id',
    'name',
    'type',
    'createdAt',
    'updatedAt',
    'deleted',
    '_all',
  ],
  FeatureMinAggregate: [
    'id',
    'name',
    'type',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureMaxAggregate: [
    'id',
    'name',
    'type',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureOfRoomCountAggregate: [
    'roomId',
    'featureId',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
    '_all',
  ],
  FeatureOfRoomMinAggregate: [
    'roomId',
    'featureId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureOfRoomMaxAggregate: [
    'roomId',
    'featureId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureOfAddressCountAggregate: [
    'addressId',
    'featureId',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
    '_all',
  ],
  FeatureOfAddressMinAggregate: [
    'addressId',
    'featureId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureOfAddressMaxAggregate: [
    'addressId',
    'featureId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  RoomCount: ['featuresOfRoom', 'arrangements'],
  RoomCountAggregate: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'addressId',
    'name',
    'floor',
    'building',
    'accessibility',
    'checkin',
    'checkout',
    'length',
    'width',
    'height',
    '_all',
  ],
  RoomMinAggregate: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'addressId',
    'name',
    'floor',
    'building',
    'accessibility',
    'checkin',
    'checkout',
    'length',
    'width',
    'height',
  ],
  RoomMaxAggregate: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'addressId',
    'name',
    'floor',
    'building',
    'accessibility',
    'checkin',
    'checkout',
    'length',
    'width',
    'height',
  ],
  FilesCount: ['account'],
  FilesCountAggregate: [
    'id',
    'name',
    'rtwId',
    'createdAt',
    'updatedAt',
    'deleted',
    '_all',
  ],
  FilesMinAggregate: [
    'id',
    'name',
    'rtwId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FilesMaxAggregate: [
    'id',
    'name',
    'rtwId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  RTWCount: ['files'],
  RTWCountAggregate: [
    'id',
    'name',
    'active',
    'startDate',
    'endDate',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
    '_all',
  ],
  RTWMinAggregate: [
    'id',
    'name',
    'active',
    'startDate',
    'endDate',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  RTWMaxAggregate: [
    'id',
    'name',
    'active',
    'startDate',
    'endDate',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  PhoneCountAggregate: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'accountId',
    'addressId',
    'phone',
    'public',
    '_all',
  ],
  PhoneMinAggregate: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'accountId',
    'addressId',
    'phone',
    'public',
  ],
  PhoneMaxAggregate: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'accountId',
    'addressId',
    'phone',
    'public',
  ],
  ArrangementOfRoomCountAggregate: [
    'roomId',
    'arrangementId',
    'capacity',
    'details',
    'createdAt',
    'updatedAt',
    '_all',
  ],
  ArrangementOfRoomAvgAggregate: ['capacity'],
  ArrangementOfRoomSumAggregate: ['capacity'],
  ArrangementOfRoomMinAggregate: [
    'roomId',
    'arrangementId',
    'capacity',
    'details',
    'createdAt',
    'updatedAt',
  ],
  ArrangementOfRoomMaxAggregate: [
    'roomId',
    'arrangementId',
    'capacity',
    'details',
    'createdAt',
    'updatedAt',
  ],
  ArrangementCount: ['room'],
  ArrangementCountAggregate: [
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'icon',
    'details',
    '_all',
  ],
  ArrangementMinAggregate: [
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'icon',
    'details',
  ],
  ArrangementMaxAggregate: [
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'icon',
    'details',
  ],
  SIABadgeCount: ['siaChecks'],
  SIABadgeCountAggregate: [
    'id',
    'licenseSector',
    'type',
    'licenseExplanation',
    'additionalTerms',
    'createdAt',
    'active',
    'expiry',
    'updatedAt',
    'deleted',
    'account_id',
    '_all',
  ],
  SIABadgeAvgAggregate: ['id'],
  SIABadgeSumAggregate: ['id'],
  SIABadgeMinAggregate: [
    'id',
    'licenseSector',
    'type',
    'licenseExplanation',
    'additionalTerms',
    'createdAt',
    'active',
    'expiry',
    'updatedAt',
    'deleted',
    'account_id',
  ],
  SIABadgeMaxAggregate: [
    'id',
    'licenseSector',
    'type',
    'licenseExplanation',
    'additionalTerms',
    'createdAt',
    'active',
    'expiry',
    'updatedAt',
    'deleted',
    'account_id',
  ],
  SIACheckCountAggregate: [
    'id',
    'sia_id',
    'status',
    'AuthUrl',
    'pubUrl',
    'createdAt',
    'updatedAt',
    'deleted',
    'error',
    'transactionId',
    '_all',
  ],
  SIACheckAvgAggregate: ['sia_id'],
  SIACheckSumAggregate: ['sia_id'],
  SIACheckMinAggregate: [
    'id',
    'sia_id',
    'status',
    'AuthUrl',
    'pubUrl',
    'createdAt',
    'updatedAt',
    'deleted',
    'error',
    'transactionId',
  ],
  SIACheckMaxAggregate: [
    'id',
    'sia_id',
    'status',
    'AuthUrl',
    'pubUrl',
    'createdAt',
    'updatedAt',
    'deleted',
    'error',
    'transactionId',
  ],
  StatusOnAccountCountAggregate: [
    'statusId',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
    '_all',
  ],
  StatusOnAccountMinAggregate: [
    'statusId',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  StatusOnAccountMaxAggregate: [
    'statusId',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  StatusCount: ['account'],
  StatusCountAggregate: [
    'id',
    'name',
    'createdAt',
    'updatedAt',
    'deleted',
    '_all',
  ],
  StatusMinAggregate: ['id', 'name', 'createdAt', 'updatedAt', 'deleted'],
  StatusMaxAggregate: ['id', 'name', 'createdAt', 'updatedAt', 'deleted'],
  SubscriptionCount: ['accounts'],
  SubscriptionCountAggregate: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'cost',
    'details',
    '_all',
  ],
  SubscriptionMinAggregate: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'cost',
    'details',
  ],
  SubscriptionMaxAggregate: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'cost',
    'details',
  ],
  SubscriptionOnAccountCountAggregate: [
    'subscriptionId',
    'accountId',
    'active',
    'deactivated',
    'activated',
    'startedAt',
    'createdAt',
    'updatedAt',
    'deleted',
    '_all',
  ],
  SubscriptionOnAccountMinAggregate: [
    'subscriptionId',
    'accountId',
    'active',
    'deactivated',
    'activated',
    'startedAt',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  SubscriptionOnAccountMaxAggregate: [
    'subscriptionId',
    'accountId',
    'active',
    'deactivated',
    'activated',
    'startedAt',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  TransactionCount: ['SIACheck'],
  TransactionCountAggregate: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'accountId',
    'data',
    '_all',
  ],
  TransactionMinAggregate: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'accountId',
  ],
  TransactionMaxAggregate: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'accountId',
  ],
};

type OutputTypesNames = keyof typeof outputTypes;

type OutputTypeFieldNames<TOutput extends OutputTypesNames> = Exclude<
  keyof typeof outputTypes[TOutput]['prototype'],
  number | symbol
>;

type OutputTypeFieldsConfig<TOutput extends OutputTypesNames> = FieldsConfig<
  OutputTypeFieldNames<TOutput>
>;

export type OutputTypeConfig<TOutput extends OutputTypesNames> = {
  class?: ClassDecorator[];
  fields?: OutputTypeFieldsConfig<TOutput>;
};

export type OutputTypesEnhanceMap = {
  [TOutput in OutputTypesNames]?: OutputTypeConfig<TOutput>;
};

export function applyOutputTypesEnhanceMap(
  outputTypesEnhanceMap: OutputTypesEnhanceMap
) {
  for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
    const outputTypeName =
      outputTypeEnhanceMapKey as keyof typeof outputTypesEnhanceMap;
    const typeConfig = outputTypesEnhanceMap[outputTypeName]!;
    const typeClass = outputTypes[outputTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      outputsInfo[outputTypeName as keyof typeof outputsInfo]
    );
  }
}

const inputsInfo = {
  AccountWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'username',
    'accountType',
    'subsciption',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'apiToken',
    'deleted',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountOrderByWithRelationAndSearchRelevanceInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'apiToken',
    'deleted',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
    '_relevance',
  ],
  AccountWhereUniqueInput: ['id', 'username', 'resetPasswordToken'],
  AccountOrderByWithAggregationInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    '_count',
    '_max',
    '_min',
  ],
  AccountScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
  ],
  TokenWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'value',
    'valid',
    'expiry',
    'account',
    'apiToken',
  ],
  TokenOrderByWithRelationAndSearchRelevanceInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'value',
    'valid',
    'expiry',
    'account',
    'apiToken',
    '_relevance',
  ],
  TokenWhereUniqueInput: ['id', 'value'],
  TokenOrderByWithAggregationInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'value',
    'valid',
    'expiry',
    'apiToken',
    '_count',
    '_max',
    '_min',
  ],
  TokenScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'value',
    'valid',
    'expiry',
    'apiToken',
  ],
  SubuserOnAccountWhereInput: [
    'AND',
    'OR',
    'NOT',
    'accountId',
    'subuserId',
    'account',
    'subuser',
    'createdAt',
    'updatedAt',
  ],
  SubuserOnAccountOrderByWithRelationAndSearchRelevanceInput: [
    'accountId',
    'subuserId',
    'account',
    'subuser',
    'createdAt',
    'updatedAt',
    '_relevance',
  ],
  SubuserOnAccountWhereUniqueInput: ['accountId_subuserId'],
  SubuserOnAccountOrderByWithAggregationInput: [
    'accountId',
    'subuserId',
    'createdAt',
    'updatedAt',
    '_count',
    '_max',
    '_min',
  ],
  SubuserOnAccountScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'accountId',
    'subuserId',
    'createdAt',
    'updatedAt',
  ],
  EmployersOnAccountWhereInput: [
    'AND',
    'OR',
    'NOT',
    'accountId',
    'employerId',
    'account',
    'employer',
    'createdAt',
    'updatedAt',
  ],
  EmployersOnAccountOrderByWithRelationAndSearchRelevanceInput: [
    'accountId',
    'employerId',
    'account',
    'employer',
    'createdAt',
    'updatedAt',
    '_relevance',
  ],
  EmployersOnAccountWhereUniqueInput: ['accountId_employerId'],
  EmployersOnAccountOrderByWithAggregationInput: [
    'accountId',
    'employerId',
    'createdAt',
    'updatedAt',
    '_count',
    '_max',
    '_min',
  ],
  EmployersOnAccountScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'accountId',
    'employerId',
    'createdAt',
    'updatedAt',
  ],
  ManagersOnAccountWhereInput: [
    'AND',
    'OR',
    'NOT',
    'accountId',
    'managersId',
    'account',
    'managers',
    'createdAt',
    'updatedAt',
  ],
  ManagersOnAccountOrderByWithRelationAndSearchRelevanceInput: [
    'accountId',
    'managersId',
    'account',
    'managers',
    'createdAt',
    'updatedAt',
    '_relevance',
  ],
  ManagersOnAccountWhereUniqueInput: ['accountId_managersId'],
  ManagersOnAccountOrderByWithAggregationInput: [
    'accountId',
    'managersId',
    'createdAt',
    'updatedAt',
    '_count',
    '_max',
    '_min',
  ],
  ManagersOnAccountScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'accountId',
    'managersId',
    'createdAt',
    'updatedAt',
  ],
  AddressWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'createdAt',
    'updatedAt',
    'account',
    'accountId',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'contacts',
    'website',
    'hoursOfOperation',
    'venueStyle',
    'features',
    'details',
    'public',
    'primaryAccount',
    'primaryaccountId',
    'deleted',
    'featuresOfBuisness',
    'phones',
    'rooms',
  ],
  AddressOrderByWithRelationAndSearchRelevanceInput: [
    'id',
    'createdAt',
    'updatedAt',
    'account',
    'accountId',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'contacts',
    'website',
    'hoursOfOperation',
    'venueStyle',
    'features',
    'details',
    'public',
    'primaryAccount',
    'primaryaccountId',
    'deleted',
    'featuresOfBuisness',
    'phones',
    'rooms',
    '_relevance',
  ],
  AddressWhereUniqueInput: ['id', 'primaryaccountId'],
  AddressOrderByWithAggregationInput: [
    'id',
    'createdAt',
    'updatedAt',
    'accountId',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'hoursOfOperation',
    'features',
    'details',
    'public',
    'primaryaccountId',
    'deleted',
    '_count',
    '_max',
    '_min',
  ],
  AddressScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'createdAt',
    'updatedAt',
    'accountId',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'hoursOfOperation',
    'features',
    'details',
    'public',
    'primaryaccountId',
    'deleted',
  ],
  ContactAtAddressWhereInput: [
    'AND',
    'OR',
    'NOT',
    'accountId',
    'addressId',
    'account',
    'address',
    'jobTitle',
    'phone',
    'email',
    'emailId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  ContactAtAddressOrderByWithRelationAndSearchRelevanceInput: [
    'accountId',
    'addressId',
    'account',
    'address',
    'jobTitle',
    'phone',
    'email',
    'emailId',
    'createdAt',
    'updatedAt',
    'deleted',
    '_relevance',
  ],
  ContactAtAddressWhereUniqueInput: ['accountId_addressId'],
  ContactAtAddressOrderByWithAggregationInput: [
    'accountId',
    'addressId',
    'jobTitle',
    'phone',
    'emailId',
    'createdAt',
    'updatedAt',
    'deleted',
    '_count',
    '_max',
    '_min',
  ],
  ContactAtAddressScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'accountId',
    'addressId',
    'jobTitle',
    'phone',
    'emailId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  VenueStyleWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'createdAt',
    'updatedAt',
    'address',
    'name',
    'details',
  ],
  VenueStyleOrderByWithRelationAndSearchRelevanceInput: [
    'id',
    'createdAt',
    'updatedAt',
    'address',
    'name',
    'details',
    '_relevance',
  ],
  VenueStyleWhereUniqueInput: ['id'],
  VenueStyleOrderByWithAggregationInput: [
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'details',
    '_count',
    '_max',
    '_min',
  ],
  VenueStyleScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'details',
  ],
  EmailWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'associatedContact',
    'domain',
    'domainId',
    'email',
    'account',
    'accountId',
    'verified',
    'public',
    'primary',
    'path',
    'copy',
    'notifyFrom',
    'imap_authUser',
    'imap_authPass',
    'imap_accessToken',
    'imap_authServer',
    'imap_host',
    'imap_port',
    'imap_secure',
    'imap_tslRejectUnauthorized',
    'imap_tslMinVersion',
    'imap_resyncDelay',
    'smtp_authUser',
    'smtp_authPass',
    'smtp_accessToken',
    'smtp_authServer',
    'smtp_host',
    'smtp_port',
    'smtp_secure',
    'smtp_tslRejectUnauthorized',
    'smtp_tslMinVersion',
    'oauth2_authorize',
    'oauth2_provider',
    'oauth2_authUser',
    'oauth2_accessToken',
    'oauth2_refreshToken',
    'oauth2_expires',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  EmailOrderByWithRelationAndSearchRelevanceInput: [
    'id',
    'associatedContact',
    'domain',
    'domainId',
    'email',
    'account',
    'accountId',
    'verified',
    'public',
    'primary',
    'path',
    'copy',
    'notifyFrom',
    'imap_authUser',
    'imap_authPass',
    'imap_accessToken',
    'imap_authServer',
    'imap_host',
    'imap_port',
    'imap_secure',
    'imap_tslRejectUnauthorized',
    'imap_tslMinVersion',
    'imap_resyncDelay',
    'smtp_authUser',
    'smtp_authPass',
    'smtp_accessToken',
    'smtp_authServer',
    'smtp_host',
    'smtp_port',
    'smtp_secure',
    'smtp_tslRejectUnauthorized',
    'smtp_tslMinVersion',
    'oauth2_authorize',
    'oauth2_provider',
    'oauth2_authUser',
    'oauth2_accessToken',
    'oauth2_refreshToken',
    'oauth2_expires',
    'createdAt',
    'updatedAt',
    'deleted',
    '_relevance',
  ],
  EmailWhereUniqueInput: ['id', 'email'],
  EmailOrderByWithAggregationInput: [
    'id',
    'domainId',
    'email',
    'accountId',
    'verified',
    'public',
    'primary',
    'path',
    'copy',
    'notifyFrom',
    'imap_authUser',
    'imap_authPass',
    'imap_accessToken',
    'imap_authServer',
    'imap_host',
    'imap_port',
    'imap_secure',
    'imap_tslRejectUnauthorized',
    'imap_tslMinVersion',
    'imap_resyncDelay',
    'smtp_authUser',
    'smtp_authPass',
    'smtp_accessToken',
    'smtp_authServer',
    'smtp_host',
    'smtp_port',
    'smtp_secure',
    'smtp_tslRejectUnauthorized',
    'smtp_tslMinVersion',
    'oauth2_authorize',
    'oauth2_provider',
    'oauth2_authUser',
    'oauth2_accessToken',
    'oauth2_refreshToken',
    'oauth2_expires',
    'createdAt',
    'updatedAt',
    'deleted',
    '_count',
    '_avg',
    '_max',
    '_min',
    '_sum',
  ],
  EmailScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'domainId',
    'email',
    'accountId',
    'verified',
    'public',
    'primary',
    'path',
    'copy',
    'notifyFrom',
    'imap_authUser',
    'imap_authPass',
    'imap_accessToken',
    'imap_authServer',
    'imap_host',
    'imap_port',
    'imap_secure',
    'imap_tslRejectUnauthorized',
    'imap_tslMinVersion',
    'imap_resyncDelay',
    'smtp_authUser',
    'smtp_authPass',
    'smtp_accessToken',
    'smtp_authServer',
    'smtp_host',
    'smtp_port',
    'smtp_secure',
    'smtp_tslRejectUnauthorized',
    'smtp_tslMinVersion',
    'oauth2_authorize',
    'oauth2_provider',
    'oauth2_authUser',
    'oauth2_accessToken',
    'oauth2_refreshToken',
    'oauth2_expires',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  ApplicationWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'name',
    'account',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  ApplicationOrderByWithRelationAndSearchRelevanceInput: [
    'id',
    'name',
    'account',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
    '_relevance',
  ],
  ApplicationWhereUniqueInput: ['id'],
  ApplicationOrderByWithAggregationInput: [
    'id',
    'name',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
    '_count',
    '_max',
    '_min',
  ],
  ApplicationScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'name',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  DomainWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'domain',
    'verified',
    'dnsType',
    'linkedEmails',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  DomainOrderByWithRelationAndSearchRelevanceInput: [
    'id',
    'domain',
    'verified',
    'dnsType',
    'linkedEmails',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
    '_relevance',
  ],
  DomainWhereUniqueInput: ['id', 'domain'],
  DomainOrderByWithAggregationInput: [
    'id',
    'domain',
    'verified',
    'dnsType',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
    '_count',
    '_max',
    '_min',
  ],
  DomainScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'domain',
    'verified',
    'dnsType',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'name',
    'type',
    'featureOfRoom',
    'featureOfAddress',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureOrderByWithRelationAndSearchRelevanceInput: [
    'id',
    'name',
    'type',
    'featureOfRoom',
    'featureOfAddress',
    'createdAt',
    'updatedAt',
    'deleted',
    '_relevance',
  ],
  FeatureWhereUniqueInput: ['id'],
  FeatureOrderByWithAggregationInput: [
    'id',
    'name',
    'type',
    'createdAt',
    'updatedAt',
    'deleted',
    '_count',
    '_max',
    '_min',
  ],
  FeatureScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'name',
    'type',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureOfRoomWhereInput: [
    'AND',
    'OR',
    'NOT',
    'roomId',
    'featureId',
    'feature',
    'room',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureOfRoomOrderByWithRelationAndSearchRelevanceInput: [
    'roomId',
    'featureId',
    'feature',
    'room',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
    '_relevance',
  ],
  FeatureOfRoomWhereUniqueInput: ['roomId_featureId'],
  FeatureOfRoomOrderByWithAggregationInput: [
    'roomId',
    'featureId',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
    '_count',
    '_max',
    '_min',
  ],
  FeatureOfRoomScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'roomId',
    'featureId',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureOfAddressWhereInput: [
    'AND',
    'OR',
    'NOT',
    'addressId',
    'featureId',
    'feature',
    'address',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureOfAddressOrderByWithRelationAndSearchRelevanceInput: [
    'addressId',
    'featureId',
    'feature',
    'address',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
    '_relevance',
  ],
  FeatureOfAddressWhereUniqueInput: ['addressId_featureId'],
  FeatureOfAddressOrderByWithAggregationInput: [
    'addressId',
    'featureId',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
    '_count',
    '_max',
    '_min',
  ],
  FeatureOfAddressScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'addressId',
    'featureId',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  RoomWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'featuresOfRoom',
    'createdAt',
    'updatedAt',
    'deleted',
    'address',
    'addressId',
    'name',
    'floor',
    'building',
    'accessibility',
    'checkin',
    'checkout',
    'length',
    'width',
    'height',
    'arrangements',
  ],
  RoomOrderByWithRelationAndSearchRelevanceInput: [
    'id',
    'featuresOfRoom',
    'createdAt',
    'updatedAt',
    'deleted',
    'address',
    'addressId',
    'name',
    'floor',
    'building',
    'accessibility',
    'checkin',
    'checkout',
    'length',
    'width',
    'height',
    'arrangements',
    '_relevance',
  ],
  RoomWhereUniqueInput: ['id'],
  RoomOrderByWithAggregationInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'addressId',
    'name',
    'floor',
    'building',
    'accessibility',
    'checkin',
    'checkout',
    'length',
    'width',
    'height',
    '_count',
    '_max',
    '_min',
  ],
  RoomScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'addressId',
    'name',
    'floor',
    'building',
    'accessibility',
    'checkin',
    'checkout',
    'length',
    'width',
    'height',
  ],
  FilesWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'name',
    'rtw',
    'rtwId',
    'account',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FilesOrderByWithRelationAndSearchRelevanceInput: [
    'id',
    'name',
    'rtw',
    'rtwId',
    'account',
    'createdAt',
    'updatedAt',
    'deleted',
    '_relevance',
  ],
  FilesWhereUniqueInput: ['id'],
  FilesOrderByWithAggregationInput: [
    'id',
    'name',
    'rtwId',
    'createdAt',
    'updatedAt',
    'deleted',
    '_count',
    '_max',
    '_min',
  ],
  FilesScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'name',
    'rtwId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  RTWWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'files',
    'name',
    'active',
    'startDate',
    'endDate',
    'account',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  RTWOrderByWithRelationAndSearchRelevanceInput: [
    'id',
    'files',
    'name',
    'active',
    'startDate',
    'endDate',
    'account',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
    '_relevance',
  ],
  RTWWhereUniqueInput: ['id'],
  RTWOrderByWithAggregationInput: [
    'id',
    'name',
    'active',
    'startDate',
    'endDate',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
    '_count',
    '_max',
    '_min',
  ],
  RTWScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'name',
    'active',
    'startDate',
    'endDate',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  PhoneWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'account',
    'accountId',
    'address',
    'addressId',
    'phone',
    'public',
  ],
  PhoneOrderByWithRelationAndSearchRelevanceInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'account',
    'accountId',
    'address',
    'addressId',
    'phone',
    'public',
    '_relevance',
  ],
  PhoneWhereUniqueInput: ['id', 'phone'],
  PhoneOrderByWithAggregationInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'accountId',
    'addressId',
    'phone',
    'public',
    '_count',
    '_max',
    '_min',
  ],
  PhoneScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'accountId',
    'addressId',
    'phone',
    'public',
  ],
  ArrangementOfRoomWhereInput: [
    'AND',
    'OR',
    'NOT',
    'roomId',
    'arrangementId',
    'arrangement',
    'room',
    'capacity',
    'details',
    'createdAt',
    'updatedAt',
  ],
  ArrangementOfRoomOrderByWithRelationAndSearchRelevanceInput: [
    'roomId',
    'arrangementId',
    'arrangement',
    'room',
    'capacity',
    'details',
    'createdAt',
    'updatedAt',
    '_relevance',
  ],
  ArrangementOfRoomWhereUniqueInput: ['roomId_arrangementId'],
  ArrangementOfRoomOrderByWithAggregationInput: [
    'roomId',
    'arrangementId',
    'capacity',
    'details',
    'createdAt',
    'updatedAt',
    '_count',
    '_avg',
    '_max',
    '_min',
    '_sum',
  ],
  ArrangementOfRoomScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'roomId',
    'arrangementId',
    'capacity',
    'details',
    'createdAt',
    'updatedAt',
  ],
  ArrangementWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'createdAt',
    'updatedAt',
    'room',
    'name',
    'icon',
    'details',
  ],
  ArrangementOrderByWithRelationAndSearchRelevanceInput: [
    'id',
    'createdAt',
    'updatedAt',
    'room',
    'name',
    'icon',
    'details',
    '_relevance',
  ],
  ArrangementWhereUniqueInput: ['id'],
  ArrangementOrderByWithAggregationInput: [
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'icon',
    'details',
    '_count',
    '_max',
    '_min',
  ],
  ArrangementScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'icon',
    'details',
  ],
  SIABadgeWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'licenseSector',
    'type',
    'licenseExplanation',
    'additionalTerms',
    'createdAt',
    'active',
    'expiry',
    'updatedAt',
    'deleted',
    'siaChecks',
    'account',
    'account_id',
  ],
  SIABadgeOrderByWithRelationAndSearchRelevanceInput: [
    'id',
    'licenseSector',
    'type',
    'licenseExplanation',
    'additionalTerms',
    'createdAt',
    'active',
    'expiry',
    'updatedAt',
    'deleted',
    'siaChecks',
    'account',
    'account_id',
    '_relevance',
  ],
  SIABadgeWhereUniqueInput: ['id'],
  SIABadgeOrderByWithAggregationInput: [
    'id',
    'licenseSector',
    'type',
    'licenseExplanation',
    'additionalTerms',
    'createdAt',
    'active',
    'expiry',
    'updatedAt',
    'deleted',
    'account_id',
    '_count',
    '_avg',
    '_max',
    '_min',
    '_sum',
  ],
  SIABadgeScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'licenseSector',
    'type',
    'licenseExplanation',
    'additionalTerms',
    'createdAt',
    'active',
    'expiry',
    'updatedAt',
    'deleted',
    'account_id',
  ],
  SIACheckWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'badge',
    'sia_id',
    'status',
    'AuthUrl',
    'pubUrl',
    'createdAt',
    'updatedAt',
    'deleted',
    'error',
    'transactions',
    'transactionId',
  ],
  SIACheckOrderByWithRelationAndSearchRelevanceInput: [
    'id',
    'badge',
    'sia_id',
    'status',
    'AuthUrl',
    'pubUrl',
    'createdAt',
    'updatedAt',
    'deleted',
    'error',
    'transactions',
    'transactionId',
    '_relevance',
  ],
  SIACheckWhereUniqueInput: ['id'],
  SIACheckOrderByWithAggregationInput: [
    'id',
    'sia_id',
    'status',
    'AuthUrl',
    'pubUrl',
    'createdAt',
    'updatedAt',
    'deleted',
    'error',
    'transactionId',
    '_count',
    '_avg',
    '_max',
    '_min',
    '_sum',
  ],
  SIACheckScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'sia_id',
    'status',
    'AuthUrl',
    'pubUrl',
    'createdAt',
    'updatedAt',
    'deleted',
    'error',
    'transactionId',
  ],
  StatusOnAccountWhereInput: [
    'AND',
    'OR',
    'NOT',
    'statusId',
    'accountId',
    'status',
    'account',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  StatusOnAccountOrderByWithRelationAndSearchRelevanceInput: [
    'statusId',
    'accountId',
    'status',
    'account',
    'createdAt',
    'updatedAt',
    'deleted',
    '_relevance',
  ],
  StatusOnAccountWhereUniqueInput: ['statusId_accountId'],
  StatusOnAccountOrderByWithAggregationInput: [
    'statusId',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
    '_count',
    '_max',
    '_min',
  ],
  StatusOnAccountScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'statusId',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  StatusWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'name',
    'account',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  StatusOrderByWithRelationAndSearchRelevanceInput: [
    'id',
    'name',
    'account',
    'createdAt',
    'updatedAt',
    'deleted',
    '_relevance',
  ],
  StatusWhereUniqueInput: ['id'],
  StatusOrderByWithAggregationInput: [
    'id',
    'name',
    'createdAt',
    'updatedAt',
    'deleted',
    '_count',
    '_max',
    '_min',
  ],
  StatusScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'name',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  SubscriptionWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'cost',
    'details',
    'accounts',
  ],
  SubscriptionOrderByWithRelationAndSearchRelevanceInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'cost',
    'details',
    'accounts',
    '_relevance',
  ],
  SubscriptionWhereUniqueInput: ['id', 'name'],
  SubscriptionOrderByWithAggregationInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'cost',
    'details',
    '_count',
    '_max',
    '_min',
  ],
  SubscriptionScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'cost',
    'details',
  ],
  SubscriptionOnAccountWhereInput: [
    'AND',
    'OR',
    'NOT',
    'subscriptionId',
    'subscription',
    'account',
    'accountId',
    'active',
    'deactivated',
    'activated',
    'startedAt',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  SubscriptionOnAccountOrderByWithRelationAndSearchRelevanceInput: [
    'subscriptionId',
    'subscription',
    'account',
    'accountId',
    'active',
    'deactivated',
    'activated',
    'startedAt',
    'createdAt',
    'updatedAt',
    'deleted',
    '_relevance',
  ],
  SubscriptionOnAccountWhereUniqueInput: ['accountId_subscriptionId'],
  SubscriptionOnAccountOrderByWithAggregationInput: [
    'subscriptionId',
    'accountId',
    'active',
    'deactivated',
    'activated',
    'startedAt',
    'createdAt',
    'updatedAt',
    'deleted',
    '_count',
    '_max',
    '_min',
  ],
  SubscriptionOnAccountScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'subscriptionId',
    'accountId',
    'active',
    'deactivated',
    'activated',
    'startedAt',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  TransactionWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'account',
    'accountId',
    'SIACheck',
    'data',
  ],
  TransactionOrderByWithRelationAndSearchRelevanceInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'account',
    'accountId',
    'SIACheck',
    'data',
    '_relevance',
  ],
  TransactionWhereUniqueInput: ['id'],
  TransactionOrderByWithAggregationInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'accountId',
    'data',
    '_count',
    '_max',
    '_min',
  ],
  TransactionScalarWhereWithAggregatesInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'accountId',
    'data',
  ],
  AccountCreateInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountUpdateInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountCreateManyInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
  ],
  AccountUpdateManyMutationInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
  ],
  TokenCreateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'value',
    'valid',
    'expiry',
    'account',
  ],
  TokenUpdateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'value',
    'valid',
    'expiry',
    'account',
  ],
  TokenCreateManyInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'value',
    'valid',
    'expiry',
    'apiToken',
  ],
  TokenUpdateManyMutationInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'value',
    'valid',
    'expiry',
  ],
  SubuserOnAccountCreateInput: ['createdAt', 'updatedAt', 'account', 'subuser'],
  SubuserOnAccountUpdateInput: ['createdAt', 'updatedAt', 'account', 'subuser'],
  SubuserOnAccountCreateManyInput: [
    'accountId',
    'subuserId',
    'createdAt',
    'updatedAt',
  ],
  SubuserOnAccountUpdateManyMutationInput: ['createdAt', 'updatedAt'],
  EmployersOnAccountCreateInput: [
    'createdAt',
    'updatedAt',
    'account',
    'employer',
  ],
  EmployersOnAccountUpdateInput: [
    'createdAt',
    'updatedAt',
    'account',
    'employer',
  ],
  EmployersOnAccountCreateManyInput: [
    'accountId',
    'employerId',
    'createdAt',
    'updatedAt',
  ],
  EmployersOnAccountUpdateManyMutationInput: ['createdAt', 'updatedAt'],
  ManagersOnAccountCreateInput: [
    'createdAt',
    'updatedAt',
    'account',
    'managers',
  ],
  ManagersOnAccountUpdateInput: [
    'createdAt',
    'updatedAt',
    'account',
    'managers',
  ],
  ManagersOnAccountCreateManyInput: [
    'accountId',
    'managersId',
    'createdAt',
    'updatedAt',
  ],
  ManagersOnAccountUpdateManyMutationInput: ['createdAt', 'updatedAt'],
  AddressCreateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'hoursOfOperation',
    'features',
    'details',
    'public',
    'deleted',
    'account',
    'contacts',
    'venueStyle',
    'primaryAccount',
    'featuresOfBuisness',
    'phones',
    'rooms',
  ],
  AddressUpdateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'hoursOfOperation',
    'features',
    'details',
    'public',
    'deleted',
    'account',
    'contacts',
    'venueStyle',
    'primaryAccount',
    'featuresOfBuisness',
    'phones',
    'rooms',
  ],
  AddressCreateManyInput: [
    'id',
    'createdAt',
    'updatedAt',
    'accountId',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'hoursOfOperation',
    'features',
    'details',
    'public',
    'primaryaccountId',
    'deleted',
  ],
  AddressUpdateManyMutationInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'hoursOfOperation',
    'features',
    'details',
    'public',
    'deleted',
  ],
  ContactAtAddressCreateInput: [
    'jobTitle',
    'phone',
    'createdAt',
    'updatedAt',
    'deleted',
    'account',
    'address',
    'email',
  ],
  ContactAtAddressUpdateInput: [
    'jobTitle',
    'phone',
    'createdAt',
    'updatedAt',
    'deleted',
    'account',
    'address',
    'email',
  ],
  ContactAtAddressCreateManyInput: [
    'accountId',
    'addressId',
    'jobTitle',
    'phone',
    'emailId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  ContactAtAddressUpdateManyMutationInput: [
    'jobTitle',
    'phone',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  VenueStyleCreateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'details',
    'address',
  ],
  VenueStyleUpdateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'details',
    'address',
  ],
  VenueStyleCreateManyInput: [
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'details',
  ],
  VenueStyleUpdateManyMutationInput: [
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'details',
  ],
  EmailCreateInput: [
    'id',
    'email',
    'verified',
    'public',
    'primary',
    'path',
    'copy',
    'notifyFrom',
    'imap_authUser',
    'imap_authPass',
    'imap_accessToken',
    'imap_authServer',
    'imap_host',
    'imap_port',
    'imap_secure',
    'imap_tslRejectUnauthorized',
    'imap_tslMinVersion',
    'imap_resyncDelay',
    'smtp_authUser',
    'smtp_authPass',
    'smtp_accessToken',
    'smtp_authServer',
    'smtp_host',
    'smtp_port',
    'smtp_secure',
    'smtp_tslRejectUnauthorized',
    'smtp_tslMinVersion',
    'oauth2_authorize',
    'oauth2_provider',
    'oauth2_authUser',
    'oauth2_accessToken',
    'oauth2_refreshToken',
    'oauth2_expires',
    'createdAt',
    'updatedAt',
    'deleted',
    'associatedContact',
    'domain',
    'account',
  ],
  EmailUpdateInput: [
    'id',
    'email',
    'verified',
    'public',
    'primary',
    'path',
    'copy',
    'notifyFrom',
    'imap_authUser',
    'imap_authPass',
    'imap_accessToken',
    'imap_authServer',
    'imap_host',
    'imap_port',
    'imap_secure',
    'imap_tslRejectUnauthorized',
    'imap_tslMinVersion',
    'imap_resyncDelay',
    'smtp_authUser',
    'smtp_authPass',
    'smtp_accessToken',
    'smtp_authServer',
    'smtp_host',
    'smtp_port',
    'smtp_secure',
    'smtp_tslRejectUnauthorized',
    'smtp_tslMinVersion',
    'oauth2_authorize',
    'oauth2_provider',
    'oauth2_authUser',
    'oauth2_accessToken',
    'oauth2_refreshToken',
    'oauth2_expires',
    'createdAt',
    'updatedAt',
    'deleted',
    'associatedContact',
    'domain',
    'account',
  ],
  EmailCreateManyInput: [
    'id',
    'domainId',
    'email',
    'accountId',
    'verified',
    'public',
    'primary',
    'path',
    'copy',
    'notifyFrom',
    'imap_authUser',
    'imap_authPass',
    'imap_accessToken',
    'imap_authServer',
    'imap_host',
    'imap_port',
    'imap_secure',
    'imap_tslRejectUnauthorized',
    'imap_tslMinVersion',
    'imap_resyncDelay',
    'smtp_authUser',
    'smtp_authPass',
    'smtp_accessToken',
    'smtp_authServer',
    'smtp_host',
    'smtp_port',
    'smtp_secure',
    'smtp_tslRejectUnauthorized',
    'smtp_tslMinVersion',
    'oauth2_authorize',
    'oauth2_provider',
    'oauth2_authUser',
    'oauth2_accessToken',
    'oauth2_refreshToken',
    'oauth2_expires',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  EmailUpdateManyMutationInput: [
    'id',
    'email',
    'verified',
    'public',
    'primary',
    'path',
    'copy',
    'notifyFrom',
    'imap_authUser',
    'imap_authPass',
    'imap_accessToken',
    'imap_authServer',
    'imap_host',
    'imap_port',
    'imap_secure',
    'imap_tslRejectUnauthorized',
    'imap_tslMinVersion',
    'imap_resyncDelay',
    'smtp_authUser',
    'smtp_authPass',
    'smtp_accessToken',
    'smtp_authServer',
    'smtp_host',
    'smtp_port',
    'smtp_secure',
    'smtp_tslRejectUnauthorized',
    'smtp_tslMinVersion',
    'oauth2_authorize',
    'oauth2_provider',
    'oauth2_authUser',
    'oauth2_accessToken',
    'oauth2_refreshToken',
    'oauth2_expires',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  ApplicationCreateInput: [
    'id',
    'name',
    'createdAt',
    'updatedAt',
    'deleted',
    'account',
  ],
  ApplicationUpdateInput: [
    'id',
    'name',
    'createdAt',
    'updatedAt',
    'deleted',
    'account',
  ],
  ApplicationCreateManyInput: [
    'id',
    'name',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  ApplicationUpdateManyMutationInput: [
    'id',
    'name',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  DomainCreateInput: [
    'id',
    'domain',
    'verified',
    'dnsType',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
    'linkedEmails',
  ],
  DomainUpdateInput: [
    'id',
    'domain',
    'verified',
    'dnsType',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
    'linkedEmails',
  ],
  DomainCreateManyInput: [
    'id',
    'domain',
    'verified',
    'dnsType',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  DomainUpdateManyMutationInput: [
    'id',
    'domain',
    'verified',
    'dnsType',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureCreateInput: [
    'id',
    'name',
    'type',
    'createdAt',
    'updatedAt',
    'deleted',
    'featureOfRoom',
    'featureOfAddress',
  ],
  FeatureUpdateInput: [
    'id',
    'name',
    'type',
    'createdAt',
    'updatedAt',
    'deleted',
    'featureOfRoom',
    'featureOfAddress',
  ],
  FeatureCreateManyInput: [
    'id',
    'name',
    'type',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureUpdateManyMutationInput: [
    'id',
    'name',
    'type',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureOfRoomCreateInput: [
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
    'feature',
    'room',
  ],
  FeatureOfRoomUpdateInput: [
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
    'feature',
    'room',
  ],
  FeatureOfRoomCreateManyInput: [
    'roomId',
    'featureId',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureOfRoomUpdateManyMutationInput: [
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureOfAddressCreateInput: [
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
    'feature',
    'address',
  ],
  FeatureOfAddressUpdateInput: [
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
    'feature',
    'address',
  ],
  FeatureOfAddressCreateManyInput: [
    'addressId',
    'featureId',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureOfAddressUpdateManyMutationInput: [
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  RoomCreateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'floor',
    'building',
    'accessibility',
    'checkin',
    'checkout',
    'length',
    'width',
    'height',
    'featuresOfRoom',
    'address',
    'arrangements',
  ],
  RoomUpdateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'floor',
    'building',
    'accessibility',
    'checkin',
    'checkout',
    'length',
    'width',
    'height',
    'featuresOfRoom',
    'address',
    'arrangements',
  ],
  RoomCreateManyInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'addressId',
    'name',
    'floor',
    'building',
    'accessibility',
    'checkin',
    'checkout',
    'length',
    'width',
    'height',
  ],
  RoomUpdateManyMutationInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'floor',
    'building',
    'accessibility',
    'checkin',
    'checkout',
    'length',
    'width',
    'height',
  ],
  FilesCreateInput: [
    'id',
    'name',
    'createdAt',
    'updatedAt',
    'deleted',
    'rtw',
    'account',
  ],
  FilesUpdateInput: [
    'id',
    'name',
    'createdAt',
    'updatedAt',
    'deleted',
    'rtw',
    'account',
  ],
  FilesCreateManyInput: [
    'id',
    'name',
    'rtwId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FilesUpdateManyMutationInput: [
    'id',
    'name',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  RTWCreateInput: [
    'id',
    'name',
    'active',
    'startDate',
    'endDate',
    'createdAt',
    'updatedAt',
    'deleted',
    'files',
    'account',
  ],
  RTWUpdateInput: [
    'id',
    'name',
    'active',
    'startDate',
    'endDate',
    'createdAt',
    'updatedAt',
    'deleted',
    'files',
    'account',
  ],
  RTWCreateManyInput: [
    'id',
    'name',
    'active',
    'startDate',
    'endDate',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  RTWUpdateManyMutationInput: [
    'id',
    'name',
    'active',
    'startDate',
    'endDate',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  PhoneCreateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'phone',
    'public',
    'account',
    'address',
  ],
  PhoneUpdateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'phone',
    'public',
    'account',
    'address',
  ],
  PhoneCreateManyInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'accountId',
    'addressId',
    'phone',
    'public',
  ],
  PhoneUpdateManyMutationInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'phone',
    'public',
  ],
  ArrangementOfRoomCreateInput: [
    'capacity',
    'details',
    'createdAt',
    'updatedAt',
    'arrangement',
    'room',
  ],
  ArrangementOfRoomUpdateInput: [
    'capacity',
    'details',
    'createdAt',
    'updatedAt',
    'arrangement',
    'room',
  ],
  ArrangementOfRoomCreateManyInput: [
    'roomId',
    'arrangementId',
    'capacity',
    'details',
    'createdAt',
    'updatedAt',
  ],
  ArrangementOfRoomUpdateManyMutationInput: [
    'capacity',
    'details',
    'createdAt',
    'updatedAt',
  ],
  ArrangementCreateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'icon',
    'details',
    'room',
  ],
  ArrangementUpdateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'icon',
    'details',
    'room',
  ],
  ArrangementCreateManyInput: [
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'icon',
    'details',
  ],
  ArrangementUpdateManyMutationInput: [
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'icon',
    'details',
  ],
  SIABadgeCreateInput: [
    'id',
    'licenseSector',
    'type',
    'licenseExplanation',
    'additionalTerms',
    'createdAt',
    'active',
    'expiry',
    'updatedAt',
    'deleted',
    'siaChecks',
    'account',
  ],
  SIABadgeUpdateInput: [
    'id',
    'licenseSector',
    'type',
    'licenseExplanation',
    'additionalTerms',
    'createdAt',
    'active',
    'expiry',
    'updatedAt',
    'deleted',
    'siaChecks',
    'account',
  ],
  SIABadgeCreateManyInput: [
    'id',
    'licenseSector',
    'type',
    'licenseExplanation',
    'additionalTerms',
    'createdAt',
    'active',
    'expiry',
    'updatedAt',
    'deleted',
    'account_id',
  ],
  SIABadgeUpdateManyMutationInput: [
    'id',
    'licenseSector',
    'type',
    'licenseExplanation',
    'additionalTerms',
    'createdAt',
    'active',
    'expiry',
    'updatedAt',
    'deleted',
  ],
  SIACheckCreateInput: [
    'id',
    'status',
    'AuthUrl',
    'pubUrl',
    'createdAt',
    'updatedAt',
    'deleted',
    'error',
    'badge',
    'transactions',
  ],
  SIACheckUpdateInput: [
    'id',
    'status',
    'AuthUrl',
    'pubUrl',
    'createdAt',
    'updatedAt',
    'deleted',
    'error',
    'badge',
    'transactions',
  ],
  SIACheckCreateManyInput: [
    'id',
    'sia_id',
    'status',
    'AuthUrl',
    'pubUrl',
    'createdAt',
    'updatedAt',
    'deleted',
    'error',
    'transactionId',
  ],
  SIACheckUpdateManyMutationInput: [
    'id',
    'status',
    'AuthUrl',
    'pubUrl',
    'createdAt',
    'updatedAt',
    'deleted',
    'error',
  ],
  StatusOnAccountCreateInput: [
    'createdAt',
    'updatedAt',
    'deleted',
    'status',
    'account',
  ],
  StatusOnAccountUpdateInput: [
    'createdAt',
    'updatedAt',
    'deleted',
    'status',
    'account',
  ],
  StatusOnAccountCreateManyInput: [
    'statusId',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  StatusOnAccountUpdateManyMutationInput: ['createdAt', 'updatedAt', 'deleted'],
  StatusCreateInput: [
    'id',
    'name',
    'createdAt',
    'updatedAt',
    'deleted',
    'account',
  ],
  StatusUpdateInput: [
    'id',
    'name',
    'createdAt',
    'updatedAt',
    'deleted',
    'account',
  ],
  StatusCreateManyInput: ['id', 'name', 'createdAt', 'updatedAt', 'deleted'],
  StatusUpdateManyMutationInput: [
    'id',
    'name',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  SubscriptionCreateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'cost',
    'details',
    'accounts',
  ],
  SubscriptionUpdateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'cost',
    'details',
    'accounts',
  ],
  SubscriptionCreateManyInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'cost',
    'details',
  ],
  SubscriptionUpdateManyMutationInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'cost',
    'details',
  ],
  SubscriptionOnAccountCreateInput: [
    'active',
    'deactivated',
    'activated',
    'startedAt',
    'createdAt',
    'updatedAt',
    'deleted',
    'subscription',
    'account',
  ],
  SubscriptionOnAccountUpdateInput: [
    'active',
    'deactivated',
    'activated',
    'startedAt',
    'createdAt',
    'updatedAt',
    'deleted',
    'subscription',
    'account',
  ],
  SubscriptionOnAccountCreateManyInput: [
    'subscriptionId',
    'accountId',
    'active',
    'deactivated',
    'activated',
    'startedAt',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  SubscriptionOnAccountUpdateManyMutationInput: [
    'active',
    'deactivated',
    'activated',
    'startedAt',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  TransactionCreateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'data',
    'account',
    'SIACheck',
  ],
  TransactionUpdateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'data',
    'account',
    'SIACheck',
  ],
  TransactionCreateManyInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'accountId',
    'data',
  ],
  TransactionUpdateManyMutationInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'data',
  ],
  StringFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'contains',
    'startsWith',
    'endsWith',
    'search',
    'mode',
    'not',
  ],
  StringNullableFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'contains',
    'startsWith',
    'endsWith',
    'search',
    'mode',
    'not',
  ],
  EnumAccountTypeFilter: ['equals', 'in', 'notIn', 'not'],
  BoolFilter: ['equals', 'not'],
  EmployersOnAccountListRelationFilter: ['every', 'some', 'none'],
  SubuserOnAccountListRelationFilter: ['every', 'some', 'none'],
  ManagersOnAccountListRelationFilter: ['every', 'some', 'none'],
  DateTimeFilter: ['equals', 'in', 'notIn', 'lt', 'lte', 'gt', 'gte', 'not'],
  DateTimeNullableFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
  ],
  EnumTitleNullableFilter: ['equals', 'in', 'notIn', 'not'],
  TokenListRelationFilter: ['every', 'some', 'none'],
  AddressRelationFilter: ['is', 'isNot'],
  AddressListRelationFilter: ['every', 'some', 'none'],
  ContactAtAddressListRelationFilter: ['every', 'some', 'none'],
  ApplicationListRelationFilter: ['every', 'some', 'none'],
  EmailListRelationFilter: ['every', 'some', 'none'],
  FilesListRelationFilter: ['every', 'some', 'none'],
  PhoneListRelationFilter: ['every', 'some', 'none'],
  RTWListRelationFilter: ['every', 'some', 'none'],
  SIABadgeListRelationFilter: ['every', 'some', 'none'],
  StatusOnAccountListRelationFilter: ['every', 'some', 'none'],
  SubscriptionOnAccountListRelationFilter: ['every', 'some', 'none'],
  TransactionListRelationFilter: ['every', 'some', 'none'],
  EmployersOnAccountOrderByRelationAggregateInput: ['_count'],
  SubuserOnAccountOrderByRelationAggregateInput: ['_count'],
  ManagersOnAccountOrderByRelationAggregateInput: ['_count'],
  TokenOrderByRelationAggregateInput: ['_count'],
  AddressOrderByRelationAggregateInput: ['_count'],
  ContactAtAddressOrderByRelationAggregateInput: ['_count'],
  ApplicationOrderByRelationAggregateInput: ['_count'],
  EmailOrderByRelationAggregateInput: ['_count'],
  FilesOrderByRelationAggregateInput: ['_count'],
  PhoneOrderByRelationAggregateInput: ['_count'],
  RTWOrderByRelationAggregateInput: ['_count'],
  SIABadgeOrderByRelationAggregateInput: ['_count'],
  StatusOnAccountOrderByRelationAggregateInput: ['_count'],
  SubscriptionOnAccountOrderByRelationAggregateInput: ['_count'],
  TransactionOrderByRelationAggregateInput: ['_count'],
  AccountOrderByRelevanceInput: ['fields', 'sort', 'search'],
  AccountCountOrderByAggregateInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
  ],
  AccountMaxOrderByAggregateInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
  ],
  AccountMinOrderByAggregateInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
  ],
  StringWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'contains',
    'startsWith',
    'endsWith',
    'search',
    'mode',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  StringNullableWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'contains',
    'startsWith',
    'endsWith',
    'search',
    'mode',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  EnumAccountTypeWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  BoolWithAggregatesFilter: ['equals', 'not', '_count', '_min', '_max'],
  DateTimeWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  DateTimeNullableWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  EnumTitleNullableWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  EnumTokenTypeFilter: ['equals', 'in', 'notIn', 'not'],
  AccountRelationFilter: ['is', 'isNot'],
  TokenOrderByRelevanceInput: ['fields', 'sort', 'search'],
  TokenCountOrderByAggregateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'value',
    'valid',
    'expiry',
    'apiToken',
  ],
  TokenMaxOrderByAggregateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'value',
    'valid',
    'expiry',
    'apiToken',
  ],
  TokenMinOrderByAggregateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'value',
    'valid',
    'expiry',
    'apiToken',
  ],
  EnumTokenTypeWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  SubuserOnAccountOrderByRelevanceInput: ['fields', 'sort', 'search'],
  SubuserOnAccountAccountIdSubuserIdCompoundUniqueInput: [
    'accountId',
    'subuserId',
  ],
  SubuserOnAccountCountOrderByAggregateInput: [
    'accountId',
    'subuserId',
    'createdAt',
    'updatedAt',
  ],
  SubuserOnAccountMaxOrderByAggregateInput: [
    'accountId',
    'subuserId',
    'createdAt',
    'updatedAt',
  ],
  SubuserOnAccountMinOrderByAggregateInput: [
    'accountId',
    'subuserId',
    'createdAt',
    'updatedAt',
  ],
  EmployersOnAccountOrderByRelevanceInput: ['fields', 'sort', 'search'],
  EmployersOnAccountAccountIdEmployerIdCompoundUniqueInput: [
    'accountId',
    'employerId',
  ],
  EmployersOnAccountCountOrderByAggregateInput: [
    'accountId',
    'employerId',
    'createdAt',
    'updatedAt',
  ],
  EmployersOnAccountMaxOrderByAggregateInput: [
    'accountId',
    'employerId',
    'createdAt',
    'updatedAt',
  ],
  EmployersOnAccountMinOrderByAggregateInput: [
    'accountId',
    'employerId',
    'createdAt',
    'updatedAt',
  ],
  ManagersOnAccountOrderByRelevanceInput: ['fields', 'sort', 'search'],
  ManagersOnAccountAccountIdManagersIdCompoundUniqueInput: [
    'accountId',
    'managersId',
  ],
  ManagersOnAccountCountOrderByAggregateInput: [
    'accountId',
    'managersId',
    'createdAt',
    'updatedAt',
  ],
  ManagersOnAccountMaxOrderByAggregateInput: [
    'accountId',
    'managersId',
    'createdAt',
    'updatedAt',
  ],
  ManagersOnAccountMinOrderByAggregateInput: [
    'accountId',
    'managersId',
    'createdAt',
    'updatedAt',
  ],
  EnumAddressTypeFilter: ['equals', 'in', 'notIn', 'not'],
  BoolNullableFilter: ['equals', 'not'],
  JsonNullableFilter: [
    'equals',
    'lt',
    'lte',
    'gt',
    'gte',
    'path',
    'string_contains',
    'string_starts_with',
    'string_ends_with',
    'array_contains',
    'array_starts_with',
    'array_ends_with',
    'not',
  ],
  VenueStyleListRelationFilter: ['every', 'some', 'none'],
  FeatureOfAddressListRelationFilter: ['every', 'some', 'none'],
  RoomListRelationFilter: ['every', 'some', 'none'],
  VenueStyleOrderByRelationAggregateInput: ['_count'],
  FeatureOfAddressOrderByRelationAggregateInput: ['_count'],
  RoomOrderByRelationAggregateInput: ['_count'],
  AddressOrderByRelevanceInput: ['fields', 'sort', 'search'],
  AddressCountOrderByAggregateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'accountId',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'hoursOfOperation',
    'features',
    'details',
    'public',
    'primaryaccountId',
    'deleted',
  ],
  AddressMaxOrderByAggregateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'accountId',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'features',
    'public',
    'primaryaccountId',
    'deleted',
  ],
  AddressMinOrderByAggregateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'accountId',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'features',
    'public',
    'primaryaccountId',
    'deleted',
  ],
  EnumAddressTypeWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  BoolNullableWithAggregatesFilter: ['equals', 'not', '_count', '_min', '_max'],
  JsonNullableWithAggregatesFilter: [
    'equals',
    'lt',
    'lte',
    'gt',
    'gte',
    'path',
    'string_contains',
    'string_starts_with',
    'string_ends_with',
    'array_contains',
    'array_starts_with',
    'array_ends_with',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  EmailRelationFilter: ['is', 'isNot'],
  ContactAtAddressOrderByRelevanceInput: ['fields', 'sort', 'search'],
  ContactAtAddressAccountIdAddressIdCompoundUniqueInput: [
    'accountId',
    'addressId',
  ],
  ContactAtAddressCountOrderByAggregateInput: [
    'accountId',
    'addressId',
    'jobTitle',
    'phone',
    'emailId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  ContactAtAddressMaxOrderByAggregateInput: [
    'accountId',
    'addressId',
    'jobTitle',
    'phone',
    'emailId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  ContactAtAddressMinOrderByAggregateInput: [
    'accountId',
    'addressId',
    'jobTitle',
    'phone',
    'emailId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  VenueStyleOrderByRelevanceInput: ['fields', 'sort', 'search'],
  VenueStyleCountOrderByAggregateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'details',
  ],
  VenueStyleMaxOrderByAggregateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'details',
  ],
  VenueStyleMinOrderByAggregateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'details',
  ],
  DomainRelationFilter: ['is', 'isNot'],
  IntFilter: ['equals', 'in', 'notIn', 'lt', 'lte', 'gt', 'gte', 'not'],
  EmailOrderByRelevanceInput: ['fields', 'sort', 'search'],
  EmailCountOrderByAggregateInput: [
    'id',
    'domainId',
    'email',
    'accountId',
    'verified',
    'public',
    'primary',
    'path',
    'copy',
    'notifyFrom',
    'imap_authUser',
    'imap_authPass',
    'imap_accessToken',
    'imap_authServer',
    'imap_host',
    'imap_port',
    'imap_secure',
    'imap_tslRejectUnauthorized',
    'imap_tslMinVersion',
    'imap_resyncDelay',
    'smtp_authUser',
    'smtp_authPass',
    'smtp_accessToken',
    'smtp_authServer',
    'smtp_host',
    'smtp_port',
    'smtp_secure',
    'smtp_tslRejectUnauthorized',
    'smtp_tslMinVersion',
    'oauth2_authorize',
    'oauth2_provider',
    'oauth2_authUser',
    'oauth2_accessToken',
    'oauth2_refreshToken',
    'oauth2_expires',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  EmailAvgOrderByAggregateInput: ['imap_resyncDelay'],
  EmailMaxOrderByAggregateInput: [
    'id',
    'domainId',
    'email',
    'accountId',
    'verified',
    'public',
    'primary',
    'path',
    'copy',
    'notifyFrom',
    'imap_authUser',
    'imap_authPass',
    'imap_accessToken',
    'imap_authServer',
    'imap_host',
    'imap_port',
    'imap_secure',
    'imap_tslRejectUnauthorized',
    'imap_tslMinVersion',
    'imap_resyncDelay',
    'smtp_authUser',
    'smtp_authPass',
    'smtp_accessToken',
    'smtp_authServer',
    'smtp_host',
    'smtp_port',
    'smtp_secure',
    'smtp_tslRejectUnauthorized',
    'smtp_tslMinVersion',
    'oauth2_authorize',
    'oauth2_provider',
    'oauth2_authUser',
    'oauth2_accessToken',
    'oauth2_refreshToken',
    'oauth2_expires',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  EmailMinOrderByAggregateInput: [
    'id',
    'domainId',
    'email',
    'accountId',
    'verified',
    'public',
    'primary',
    'path',
    'copy',
    'notifyFrom',
    'imap_authUser',
    'imap_authPass',
    'imap_accessToken',
    'imap_authServer',
    'imap_host',
    'imap_port',
    'imap_secure',
    'imap_tslRejectUnauthorized',
    'imap_tslMinVersion',
    'imap_resyncDelay',
    'smtp_authUser',
    'smtp_authPass',
    'smtp_accessToken',
    'smtp_authServer',
    'smtp_host',
    'smtp_port',
    'smtp_secure',
    'smtp_tslRejectUnauthorized',
    'smtp_tslMinVersion',
    'oauth2_authorize',
    'oauth2_provider',
    'oauth2_authUser',
    'oauth2_accessToken',
    'oauth2_refreshToken',
    'oauth2_expires',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  EmailSumOrderByAggregateInput: ['imap_resyncDelay'],
  IntWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
    '_count',
    '_avg',
    '_sum',
    '_min',
    '_max',
  ],
  ApplicationOrderByRelevanceInput: ['fields', 'sort', 'search'],
  ApplicationCountOrderByAggregateInput: [
    'id',
    'name',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  ApplicationMaxOrderByAggregateInput: [
    'id',
    'name',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  ApplicationMinOrderByAggregateInput: [
    'id',
    'name',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  EnumdnsTypeFilter: ['equals', 'in', 'notIn', 'not'],
  JsonFilter: [
    'equals',
    'lt',
    'lte',
    'gt',
    'gte',
    'path',
    'string_contains',
    'string_starts_with',
    'string_ends_with',
    'array_contains',
    'array_starts_with',
    'array_ends_with',
    'not',
  ],
  DomainOrderByRelevanceInput: ['fields', 'sort', 'search'],
  DomainCountOrderByAggregateInput: [
    'id',
    'domain',
    'verified',
    'dnsType',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  DomainMaxOrderByAggregateInput: [
    'id',
    'domain',
    'verified',
    'dnsType',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  DomainMinOrderByAggregateInput: [
    'id',
    'domain',
    'verified',
    'dnsType',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  EnumdnsTypeWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  JsonWithAggregatesFilter: [
    'equals',
    'lt',
    'lte',
    'gt',
    'gte',
    'path',
    'string_contains',
    'string_starts_with',
    'string_ends_with',
    'array_contains',
    'array_starts_with',
    'array_ends_with',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  EnumFeatureTypeFilter: ['equals', 'in', 'notIn', 'not'],
  FeatureOfRoomListRelationFilter: ['every', 'some', 'none'],
  FeatureOfRoomOrderByRelationAggregateInput: ['_count'],
  FeatureOrderByRelevanceInput: ['fields', 'sort', 'search'],
  FeatureCountOrderByAggregateInput: [
    'id',
    'name',
    'type',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureMaxOrderByAggregateInput: [
    'id',
    'name',
    'type',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureMinOrderByAggregateInput: [
    'id',
    'name',
    'type',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  EnumFeatureTypeWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  FeatureRelationFilter: ['is', 'isNot'],
  RoomRelationFilter: ['is', 'isNot'],
  FeatureOfRoomOrderByRelevanceInput: ['fields', 'sort', 'search'],
  FeatureOfRoomRoomIdFeatureIdCompoundUniqueInput: ['roomId', 'featureId'],
  FeatureOfRoomCountOrderByAggregateInput: [
    'roomId',
    'featureId',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureOfRoomMaxOrderByAggregateInput: [
    'roomId',
    'featureId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureOfRoomMinOrderByAggregateInput: [
    'roomId',
    'featureId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureOfAddressOrderByRelevanceInput: ['fields', 'sort', 'search'],
  FeatureOfAddressAddressIdFeatureIdCompoundUniqueInput: [
    'addressId',
    'featureId',
  ],
  FeatureOfAddressCountOrderByAggregateInput: [
    'addressId',
    'featureId',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureOfAddressMaxOrderByAggregateInput: [
    'addressId',
    'featureId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureOfAddressMinOrderByAggregateInput: [
    'addressId',
    'featureId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  ArrangementOfRoomListRelationFilter: ['every', 'some', 'none'],
  ArrangementOfRoomOrderByRelationAggregateInput: ['_count'],
  RoomOrderByRelevanceInput: ['fields', 'sort', 'search'],
  RoomCountOrderByAggregateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'addressId',
    'name',
    'floor',
    'building',
    'accessibility',
    'checkin',
    'checkout',
    'length',
    'width',
    'height',
  ],
  RoomMaxOrderByAggregateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'addressId',
    'name',
    'floor',
    'building',
    'accessibility',
    'checkin',
    'checkout',
    'length',
    'width',
    'height',
  ],
  RoomMinOrderByAggregateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'addressId',
    'name',
    'floor',
    'building',
    'accessibility',
    'checkin',
    'checkout',
    'length',
    'width',
    'height',
  ],
  RTWRelationFilter: ['is', 'isNot'],
  AccountListRelationFilter: ['every', 'some', 'none'],
  AccountOrderByRelationAggregateInput: ['_count'],
  FilesOrderByRelevanceInput: ['fields', 'sort', 'search'],
  FilesCountOrderByAggregateInput: [
    'id',
    'name',
    'rtwId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FilesMaxOrderByAggregateInput: [
    'id',
    'name',
    'rtwId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FilesMinOrderByAggregateInput: [
    'id',
    'name',
    'rtwId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  RTWOrderByRelevanceInput: ['fields', 'sort', 'search'],
  RTWCountOrderByAggregateInput: [
    'id',
    'name',
    'active',
    'startDate',
    'endDate',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  RTWMaxOrderByAggregateInput: [
    'id',
    'name',
    'active',
    'startDate',
    'endDate',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  RTWMinOrderByAggregateInput: [
    'id',
    'name',
    'active',
    'startDate',
    'endDate',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  PhoneOrderByRelevanceInput: ['fields', 'sort', 'search'],
  PhoneCountOrderByAggregateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'accountId',
    'addressId',
    'phone',
    'public',
  ],
  PhoneMaxOrderByAggregateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'accountId',
    'addressId',
    'phone',
    'public',
  ],
  PhoneMinOrderByAggregateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'accountId',
    'addressId',
    'phone',
    'public',
  ],
  ArrangementRelationFilter: ['is', 'isNot'],
  ArrangementOfRoomOrderByRelevanceInput: ['fields', 'sort', 'search'],
  ArrangementOfRoomRoomIdArrangementIdCompoundUniqueInput: [
    'roomId',
    'arrangementId',
  ],
  ArrangementOfRoomCountOrderByAggregateInput: [
    'roomId',
    'arrangementId',
    'capacity',
    'details',
    'createdAt',
    'updatedAt',
  ],
  ArrangementOfRoomAvgOrderByAggregateInput: ['capacity'],
  ArrangementOfRoomMaxOrderByAggregateInput: [
    'roomId',
    'arrangementId',
    'capacity',
    'details',
    'createdAt',
    'updatedAt',
  ],
  ArrangementOfRoomMinOrderByAggregateInput: [
    'roomId',
    'arrangementId',
    'capacity',
    'details',
    'createdAt',
    'updatedAt',
  ],
  ArrangementOfRoomSumOrderByAggregateInput: ['capacity'],
  ArrangementOrderByRelevanceInput: ['fields', 'sort', 'search'],
  ArrangementCountOrderByAggregateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'icon',
    'details',
  ],
  ArrangementMaxOrderByAggregateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'icon',
    'details',
  ],
  ArrangementMinOrderByAggregateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'icon',
    'details',
  ],
  EnumLicenseSectorFilter: ['equals', 'in', 'notIn', 'not'],
  EnumLicenseTypeFilter: ['equals', 'in', 'notIn', 'not'],
  SIACheckListRelationFilter: ['every', 'some', 'none'],
  SIACheckOrderByRelationAggregateInput: ['_count'],
  SIABadgeOrderByRelevanceInput: ['fields', 'sort', 'search'],
  SIABadgeCountOrderByAggregateInput: [
    'id',
    'licenseSector',
    'type',
    'licenseExplanation',
    'additionalTerms',
    'createdAt',
    'active',
    'expiry',
    'updatedAt',
    'deleted',
    'account_id',
  ],
  SIABadgeAvgOrderByAggregateInput: ['id'],
  SIABadgeMaxOrderByAggregateInput: [
    'id',
    'licenseSector',
    'type',
    'licenseExplanation',
    'additionalTerms',
    'createdAt',
    'active',
    'expiry',
    'updatedAt',
    'deleted',
    'account_id',
  ],
  SIABadgeMinOrderByAggregateInput: [
    'id',
    'licenseSector',
    'type',
    'licenseExplanation',
    'additionalTerms',
    'createdAt',
    'active',
    'expiry',
    'updatedAt',
    'deleted',
    'account_id',
  ],
  SIABadgeSumOrderByAggregateInput: ['id'],
  EnumLicenseSectorWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  EnumLicenseTypeWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  SIABadgeRelationFilter: ['is', 'isNot'],
  IntNullableFilter: ['equals', 'in', 'notIn', 'lt', 'lte', 'gt', 'gte', 'not'],
  EnumBadgeStatusFilter: ['equals', 'in', 'notIn', 'not'],
  TransactionRelationFilter: ['is', 'isNot'],
  SIACheckOrderByRelevanceInput: ['fields', 'sort', 'search'],
  SIACheckCountOrderByAggregateInput: [
    'id',
    'sia_id',
    'status',
    'AuthUrl',
    'pubUrl',
    'createdAt',
    'updatedAt',
    'deleted',
    'error',
    'transactionId',
  ],
  SIACheckAvgOrderByAggregateInput: ['sia_id'],
  SIACheckMaxOrderByAggregateInput: [
    'id',
    'sia_id',
    'status',
    'AuthUrl',
    'pubUrl',
    'createdAt',
    'updatedAt',
    'deleted',
    'error',
    'transactionId',
  ],
  SIACheckMinOrderByAggregateInput: [
    'id',
    'sia_id',
    'status',
    'AuthUrl',
    'pubUrl',
    'createdAt',
    'updatedAt',
    'deleted',
    'error',
    'transactionId',
  ],
  SIACheckSumOrderByAggregateInput: ['sia_id'],
  IntNullableWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
    '_count',
    '_avg',
    '_sum',
    '_min',
    '_max',
  ],
  EnumBadgeStatusWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  StatusRelationFilter: ['is', 'isNot'],
  StatusOnAccountOrderByRelevanceInput: ['fields', 'sort', 'search'],
  StatusOnAccountStatusIdAccountIdCompoundUniqueInput: [
    'statusId',
    'accountId',
  ],
  StatusOnAccountCountOrderByAggregateInput: [
    'statusId',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  StatusOnAccountMaxOrderByAggregateInput: [
    'statusId',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  StatusOnAccountMinOrderByAggregateInput: [
    'statusId',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  StatusOrderByRelevanceInput: ['fields', 'sort', 'search'],
  StatusCountOrderByAggregateInput: [
    'id',
    'name',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  StatusMaxOrderByAggregateInput: [
    'id',
    'name',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  StatusMinOrderByAggregateInput: [
    'id',
    'name',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  SubscriptionOrderByRelevanceInput: ['fields', 'sort', 'search'],
  SubscriptionCountOrderByAggregateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'cost',
    'details',
  ],
  SubscriptionMaxOrderByAggregateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'cost',
    'details',
  ],
  SubscriptionMinOrderByAggregateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'cost',
    'details',
  ],
  SubscriptionRelationFilter: ['is', 'isNot'],
  SubscriptionOnAccountOrderByRelevanceInput: ['fields', 'sort', 'search'],
  SubscriptionOnAccountAccountIdSubscriptionIdCompoundUniqueInput: [
    'accountId',
    'subscriptionId',
  ],
  SubscriptionOnAccountCountOrderByAggregateInput: [
    'subscriptionId',
    'accountId',
    'active',
    'deactivated',
    'activated',
    'startedAt',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  SubscriptionOnAccountMaxOrderByAggregateInput: [
    'subscriptionId',
    'accountId',
    'active',
    'deactivated',
    'activated',
    'startedAt',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  SubscriptionOnAccountMinOrderByAggregateInput: [
    'subscriptionId',
    'accountId',
    'active',
    'deactivated',
    'activated',
    'startedAt',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  TransactionOrderByRelevanceInput: ['fields', 'sort', 'search'],
  TransactionCountOrderByAggregateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'accountId',
    'data',
  ],
  TransactionMaxOrderByAggregateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'accountId',
  ],
  TransactionMinOrderByAggregateInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'accountId',
  ],
  EmployersOnAccountCreateNestedManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  EmployersOnAccountCreateNestedManyWithoutEmployerInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  SubuserOnAccountCreateNestedManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  SubuserOnAccountCreateNestedManyWithoutSubuserInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  ManagersOnAccountCreateNestedManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  ManagersOnAccountCreateNestedManyWithoutManagersInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  TokenCreateNestedManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  AddressCreateNestedOneWithoutPrimaryAccountInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  AddressCreateNestedManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  ContactAtAddressCreateNestedManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  ApplicationCreateNestedManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  EmailCreateNestedManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  FilesCreateNestedManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  PhoneCreateNestedManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  RTWCreateNestedManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  SIABadgeCreateNestedManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  StatusOnAccountCreateNestedManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  SubscriptionOnAccountCreateNestedManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  TransactionCreateNestedManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  StringFieldUpdateOperationsInput: ['set'],
  NullableStringFieldUpdateOperationsInput: ['set'],
  EnumAccountTypeFieldUpdateOperationsInput: ['set'],
  BoolFieldUpdateOperationsInput: ['set'],
  DateTimeFieldUpdateOperationsInput: ['set'],
  NullableDateTimeFieldUpdateOperationsInput: ['set'],
  NullableEnumTitleFieldUpdateOperationsInput: ['set'],
  EmployersOnAccountUpdateManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  EmployersOnAccountUpdateManyWithoutEmployerInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  SubuserOnAccountUpdateManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  SubuserOnAccountUpdateManyWithoutSubuserInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  ManagersOnAccountUpdateManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  ManagersOnAccountUpdateManyWithoutManagersInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  TokenUpdateManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  AddressUpdateOneWithoutPrimaryAccountInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'disconnect',
    'delete',
    'update',
  ],
  AddressUpdateManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  ContactAtAddressUpdateManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  ApplicationUpdateManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  EmailUpdateManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  FilesUpdateManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  PhoneUpdateManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  RTWUpdateManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  SIABadgeUpdateManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  StatusOnAccountUpdateManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  SubscriptionOnAccountUpdateManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  TransactionUpdateManyWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  AccountCreateNestedOneWithoutApiTokenInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  EnumTokenTypeFieldUpdateOperationsInput: ['set'],
  AccountUpdateOneRequiredWithoutApiTokenInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  AccountCreateNestedOneWithoutAccessesInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  AccountCreateNestedOneWithoutSubusersInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  AccountUpdateOneRequiredWithoutAccessesInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  AccountUpdateOneRequiredWithoutSubusersInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  AccountCreateNestedOneWithoutEmployerInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  AccountCreateNestedOneWithoutEmployeesInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  AccountUpdateOneRequiredWithoutEmployerInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  AccountUpdateOneRequiredWithoutEmployeesInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  AccountCreateNestedOneWithoutAccountsInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  AccountCreateNestedOneWithoutManagersInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  AccountUpdateOneRequiredWithoutAccountsInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  AccountUpdateOneRequiredWithoutManagersInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  AccountCreateNestedOneWithoutAddressesInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  ContactAtAddressCreateNestedManyWithoutAddressInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  VenueStyleCreateNestedManyWithoutAddressInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  AccountCreateNestedOneWithoutPrimaryAddressInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  FeatureOfAddressCreateNestedManyWithoutAddressInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  PhoneCreateNestedManyWithoutAddressInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  RoomCreateNestedManyWithoutAddressInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  EnumAddressTypeFieldUpdateOperationsInput: ['set'],
  NullableBoolFieldUpdateOperationsInput: ['set'],
  AccountUpdateOneRequiredWithoutAddressesInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  ContactAtAddressUpdateManyWithoutAddressInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  VenueStyleUpdateManyWithoutAddressInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  AccountUpdateOneWithoutPrimaryAddressInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'disconnect',
    'delete',
    'update',
  ],
  FeatureOfAddressUpdateManyWithoutAddressInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  PhoneUpdateManyWithoutAddressInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  RoomUpdateManyWithoutAddressInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  AccountCreateNestedOneWithoutContactOfAddressInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  AddressCreateNestedOneWithoutContactsInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  EmailCreateNestedOneWithoutAssociatedContactInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  AccountUpdateOneRequiredWithoutContactOfAddressInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  AddressUpdateOneRequiredWithoutContactsInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  EmailUpdateOneWithoutAssociatedContactInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'disconnect',
    'delete',
    'update',
  ],
  AddressCreateNestedManyWithoutVenueStyleInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  AddressUpdateManyWithoutVenueStyleInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  ContactAtAddressCreateNestedManyWithoutEmailInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  DomainCreateNestedOneWithoutLinkedEmailsInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  AccountCreateNestedOneWithoutEmailsInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  IntFieldUpdateOperationsInput: [
    'set',
    'increment',
    'decrement',
    'multiply',
    'divide',
  ],
  ContactAtAddressUpdateManyWithoutEmailInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  DomainUpdateOneWithoutLinkedEmailsInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'disconnect',
    'delete',
    'update',
  ],
  AccountUpdateOneWithoutEmailsInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'disconnect',
    'delete',
    'update',
  ],
  AccountCreateNestedOneWithoutApplicationInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  AccountUpdateOneRequiredWithoutApplicationInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  EmailCreateNestedManyWithoutDomainInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  EnumdnsTypeFieldUpdateOperationsInput: ['set'],
  EmailUpdateManyWithoutDomainInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  FeatureOfRoomCreateNestedManyWithoutFeatureInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  FeatureOfAddressCreateNestedManyWithoutFeatureInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  EnumFeatureTypeFieldUpdateOperationsInput: ['set'],
  FeatureOfRoomUpdateManyWithoutFeatureInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  FeatureOfAddressUpdateManyWithoutFeatureInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  FeatureCreateNestedOneWithoutFeatureOfRoomInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  RoomCreateNestedOneWithoutFeaturesOfRoomInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  FeatureUpdateOneRequiredWithoutFeatureOfRoomInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  RoomUpdateOneRequiredWithoutFeaturesOfRoomInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  FeatureCreateNestedOneWithoutFeatureOfAddressInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  AddressCreateNestedOneWithoutFeaturesOfBuisnessInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  FeatureUpdateOneRequiredWithoutFeatureOfAddressInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  AddressUpdateOneRequiredWithoutFeaturesOfBuisnessInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  FeatureOfRoomCreateNestedManyWithoutRoomInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  AddressCreateNestedOneWithoutRoomsInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  ArrangementOfRoomCreateNestedManyWithoutRoomInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  FeatureOfRoomUpdateManyWithoutRoomInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  AddressUpdateOneRequiredWithoutRoomsInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  ArrangementOfRoomUpdateManyWithoutRoomInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  RTWCreateNestedOneWithoutFilesInput: ['create', 'connectOrCreate', 'connect'],
  AccountCreateNestedManyWithoutFilesInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  RTWUpdateOneWithoutFilesInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'disconnect',
    'delete',
    'update',
  ],
  AccountUpdateManyWithoutFilesInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  FilesCreateNestedManyWithoutRtwInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  AccountCreateNestedOneWithoutRtwInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  FilesUpdateManyWithoutRtwInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  AccountUpdateOneRequiredWithoutRtwInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  AccountCreateNestedOneWithoutPhonesInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  AddressCreateNestedOneWithoutPhonesInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  AccountUpdateOneRequiredWithoutPhonesInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  AddressUpdateOneRequiredWithoutPhonesInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  ArrangementCreateNestedOneWithoutRoomInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  RoomCreateNestedOneWithoutArrangementsInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  ArrangementUpdateOneRequiredWithoutRoomInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  RoomUpdateOneRequiredWithoutArrangementsInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  ArrangementOfRoomCreateNestedManyWithoutArrangementInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  ArrangementOfRoomUpdateManyWithoutArrangementInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  SIACheckCreateNestedManyWithoutBadgeInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  AccountCreateNestedOneWithoutSiaInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  EnumLicenseSectorFieldUpdateOperationsInput: ['set'],
  EnumLicenseTypeFieldUpdateOperationsInput: ['set'],
  SIACheckUpdateManyWithoutBadgeInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  AccountUpdateOneWithoutSiaInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'disconnect',
    'delete',
    'update',
  ],
  SIABadgeCreateNestedOneWithoutSiaChecksInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  TransactionCreateNestedOneWithoutSIACheckInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  EnumBadgeStatusFieldUpdateOperationsInput: ['set'],
  SIABadgeUpdateOneWithoutSiaChecksInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'disconnect',
    'delete',
    'update',
  ],
  TransactionUpdateOneWithoutSIACheckInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'disconnect',
    'delete',
    'update',
  ],
  NullableIntFieldUpdateOperationsInput: [
    'set',
    'increment',
    'decrement',
    'multiply',
    'divide',
  ],
  StatusCreateNestedOneWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  AccountCreateNestedOneWithoutStatusInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  StatusUpdateOneRequiredWithoutAccountInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  AccountUpdateOneRequiredWithoutStatusInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  StatusOnAccountCreateNestedManyWithoutStatusInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  StatusOnAccountUpdateManyWithoutStatusInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  SubscriptionOnAccountCreateNestedManyWithoutSubscriptionInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  SubscriptionOnAccountUpdateManyWithoutSubscriptionInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  SubscriptionCreateNestedOneWithoutAccountsInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  AccountCreateNestedOneWithoutSubscriptionInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  SubscriptionUpdateOneRequiredWithoutAccountsInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  AccountUpdateOneRequiredWithoutSubscriptionInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  AccountCreateNestedOneWithoutTransactionsInput: [
    'create',
    'connectOrCreate',
    'connect',
  ],
  SIACheckCreateNestedManyWithoutTransactionsInput: [
    'create',
    'connectOrCreate',
    'createMany',
    'connect',
  ],
  AccountUpdateOneRequiredWithoutTransactionsInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'connect',
    'update',
  ],
  SIACheckUpdateManyWithoutTransactionsInput: [
    'create',
    'connectOrCreate',
    'upsert',
    'createMany',
    'connect',
    'set',
    'disconnect',
    'delete',
    'update',
    'updateMany',
    'deleteMany',
  ],
  NestedStringFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'contains',
    'startsWith',
    'endsWith',
    'search',
    'not',
  ],
  NestedStringNullableFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'contains',
    'startsWith',
    'endsWith',
    'search',
    'not',
  ],
  NestedEnumAccountTypeFilter: ['equals', 'in', 'notIn', 'not'],
  NestedBoolFilter: ['equals', 'not'],
  NestedDateTimeFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
  ],
  NestedDateTimeNullableFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
  ],
  NestedEnumTitleNullableFilter: ['equals', 'in', 'notIn', 'not'],
  NestedStringWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'contains',
    'startsWith',
    'endsWith',
    'search',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  NestedIntFilter: ['equals', 'in', 'notIn', 'lt', 'lte', 'gt', 'gte', 'not'],
  NestedStringNullableWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'contains',
    'startsWith',
    'endsWith',
    'search',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  NestedIntNullableFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
  ],
  NestedEnumAccountTypeWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  NestedBoolWithAggregatesFilter: ['equals', 'not', '_count', '_min', '_max'],
  NestedDateTimeWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  NestedDateTimeNullableWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  NestedEnumTitleNullableWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  NestedEnumTokenTypeFilter: ['equals', 'in', 'notIn', 'not'],
  NestedEnumTokenTypeWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  NestedEnumAddressTypeFilter: ['equals', 'in', 'notIn', 'not'],
  NestedBoolNullableFilter: ['equals', 'not'],
  NestedEnumAddressTypeWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  NestedBoolNullableWithAggregatesFilter: [
    'equals',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  NestedJsonNullableFilter: [
    'equals',
    'lt',
    'lte',
    'gt',
    'gte',
    'path',
    'string_contains',
    'string_starts_with',
    'string_ends_with',
    'array_contains',
    'array_starts_with',
    'array_ends_with',
    'not',
  ],
  NestedIntWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
    '_count',
    '_avg',
    '_sum',
    '_min',
    '_max',
  ],
  NestedFloatFilter: ['equals', 'in', 'notIn', 'lt', 'lte', 'gt', 'gte', 'not'],
  NestedEnumdnsTypeFilter: ['equals', 'in', 'notIn', 'not'],
  NestedEnumdnsTypeWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  NestedJsonFilter: [
    'equals',
    'lt',
    'lte',
    'gt',
    'gte',
    'path',
    'string_contains',
    'string_starts_with',
    'string_ends_with',
    'array_contains',
    'array_starts_with',
    'array_ends_with',
    'not',
  ],
  NestedEnumFeatureTypeFilter: ['equals', 'in', 'notIn', 'not'],
  NestedEnumFeatureTypeWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  NestedEnumLicenseSectorFilter: ['equals', 'in', 'notIn', 'not'],
  NestedEnumLicenseTypeFilter: ['equals', 'in', 'notIn', 'not'],
  NestedEnumLicenseSectorWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  NestedEnumLicenseTypeWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  NestedEnumBadgeStatusFilter: ['equals', 'in', 'notIn', 'not'],
  NestedIntNullableWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
    '_count',
    '_avg',
    '_sum',
    '_min',
    '_max',
  ],
  NestedFloatNullableFilter: [
    'equals',
    'in',
    'notIn',
    'lt',
    'lte',
    'gt',
    'gte',
    'not',
  ],
  NestedEnumBadgeStatusWithAggregatesFilter: [
    'equals',
    'in',
    'notIn',
    'not',
    '_count',
    '_min',
    '_max',
  ],
  EmployersOnAccountCreateWithoutAccountInput: [
    'createdAt',
    'updatedAt',
    'employer',
  ],
  EmployersOnAccountCreateOrConnectWithoutAccountInput: ['where', 'create'],
  EmployersOnAccountCreateManyAccountInputEnvelope: ['data', 'skipDuplicates'],
  EmployersOnAccountCreateWithoutEmployerInput: [
    'createdAt',
    'updatedAt',
    'account',
  ],
  EmployersOnAccountCreateOrConnectWithoutEmployerInput: ['where', 'create'],
  EmployersOnAccountCreateManyEmployerInputEnvelope: ['data', 'skipDuplicates'],
  SubuserOnAccountCreateWithoutAccountInput: [
    'createdAt',
    'updatedAt',
    'subuser',
  ],
  SubuserOnAccountCreateOrConnectWithoutAccountInput: ['where', 'create'],
  SubuserOnAccountCreateManyAccountInputEnvelope: ['data', 'skipDuplicates'],
  SubuserOnAccountCreateWithoutSubuserInput: [
    'createdAt',
    'updatedAt',
    'account',
  ],
  SubuserOnAccountCreateOrConnectWithoutSubuserInput: ['where', 'create'],
  SubuserOnAccountCreateManySubuserInputEnvelope: ['data', 'skipDuplicates'],
  ManagersOnAccountCreateWithoutAccountInput: [
    'createdAt',
    'updatedAt',
    'managers',
  ],
  ManagersOnAccountCreateOrConnectWithoutAccountInput: ['where', 'create'],
  ManagersOnAccountCreateManyAccountInputEnvelope: ['data', 'skipDuplicates'],
  ManagersOnAccountCreateWithoutManagersInput: [
    'createdAt',
    'updatedAt',
    'account',
  ],
  ManagersOnAccountCreateOrConnectWithoutManagersInput: ['where', 'create'],
  ManagersOnAccountCreateManyManagersInputEnvelope: ['data', 'skipDuplicates'],
  TokenCreateWithoutAccountInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'value',
    'valid',
    'expiry',
  ],
  TokenCreateOrConnectWithoutAccountInput: ['where', 'create'],
  TokenCreateManyAccountInputEnvelope: ['data', 'skipDuplicates'],
  AddressCreateWithoutPrimaryAccountInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'hoursOfOperation',
    'features',
    'details',
    'public',
    'deleted',
    'account',
    'contacts',
    'venueStyle',
    'featuresOfBuisness',
    'phones',
    'rooms',
  ],
  AddressCreateOrConnectWithoutPrimaryAccountInput: ['where', 'create'],
  AddressCreateWithoutAccountInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'hoursOfOperation',
    'features',
    'details',
    'public',
    'deleted',
    'contacts',
    'venueStyle',
    'primaryAccount',
    'featuresOfBuisness',
    'phones',
    'rooms',
  ],
  AddressCreateOrConnectWithoutAccountInput: ['where', 'create'],
  AddressCreateManyAccountInputEnvelope: ['data', 'skipDuplicates'],
  ContactAtAddressCreateWithoutAccountInput: [
    'jobTitle',
    'phone',
    'createdAt',
    'updatedAt',
    'deleted',
    'address',
    'email',
  ],
  ContactAtAddressCreateOrConnectWithoutAccountInput: ['where', 'create'],
  ContactAtAddressCreateManyAccountInputEnvelope: ['data', 'skipDuplicates'],
  ApplicationCreateWithoutAccountInput: [
    'id',
    'name',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  ApplicationCreateOrConnectWithoutAccountInput: ['where', 'create'],
  ApplicationCreateManyAccountInputEnvelope: ['data', 'skipDuplicates'],
  EmailCreateWithoutAccountInput: [
    'id',
    'email',
    'verified',
    'public',
    'primary',
    'path',
    'copy',
    'notifyFrom',
    'imap_authUser',
    'imap_authPass',
    'imap_accessToken',
    'imap_authServer',
    'imap_host',
    'imap_port',
    'imap_secure',
    'imap_tslRejectUnauthorized',
    'imap_tslMinVersion',
    'imap_resyncDelay',
    'smtp_authUser',
    'smtp_authPass',
    'smtp_accessToken',
    'smtp_authServer',
    'smtp_host',
    'smtp_port',
    'smtp_secure',
    'smtp_tslRejectUnauthorized',
    'smtp_tslMinVersion',
    'oauth2_authorize',
    'oauth2_provider',
    'oauth2_authUser',
    'oauth2_accessToken',
    'oauth2_refreshToken',
    'oauth2_expires',
    'createdAt',
    'updatedAt',
    'deleted',
    'associatedContact',
    'domain',
  ],
  EmailCreateOrConnectWithoutAccountInput: ['where', 'create'],
  EmailCreateManyAccountInputEnvelope: ['data', 'skipDuplicates'],
  FilesCreateWithoutAccountInput: [
    'id',
    'name',
    'createdAt',
    'updatedAt',
    'deleted',
    'rtw',
  ],
  FilesCreateOrConnectWithoutAccountInput: ['where', 'create'],
  PhoneCreateWithoutAccountInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'phone',
    'public',
    'address',
  ],
  PhoneCreateOrConnectWithoutAccountInput: ['where', 'create'],
  PhoneCreateManyAccountInputEnvelope: ['data', 'skipDuplicates'],
  RTWCreateWithoutAccountInput: [
    'id',
    'name',
    'active',
    'startDate',
    'endDate',
    'createdAt',
    'updatedAt',
    'deleted',
    'files',
  ],
  RTWCreateOrConnectWithoutAccountInput: ['where', 'create'],
  RTWCreateManyAccountInputEnvelope: ['data', 'skipDuplicates'],
  SIABadgeCreateWithoutAccountInput: [
    'id',
    'licenseSector',
    'type',
    'licenseExplanation',
    'additionalTerms',
    'createdAt',
    'active',
    'expiry',
    'updatedAt',
    'deleted',
    'siaChecks',
  ],
  SIABadgeCreateOrConnectWithoutAccountInput: ['where', 'create'],
  SIABadgeCreateManyAccountInputEnvelope: ['data', 'skipDuplicates'],
  StatusOnAccountCreateWithoutAccountInput: [
    'createdAt',
    'updatedAt',
    'deleted',
    'status',
  ],
  StatusOnAccountCreateOrConnectWithoutAccountInput: ['where', 'create'],
  StatusOnAccountCreateManyAccountInputEnvelope: ['data', 'skipDuplicates'],
  SubscriptionOnAccountCreateWithoutAccountInput: [
    'active',
    'deactivated',
    'activated',
    'startedAt',
    'createdAt',
    'updatedAt',
    'deleted',
    'subscription',
  ],
  SubscriptionOnAccountCreateOrConnectWithoutAccountInput: ['where', 'create'],
  SubscriptionOnAccountCreateManyAccountInputEnvelope: [
    'data',
    'skipDuplicates',
  ],
  TransactionCreateWithoutAccountInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'data',
    'SIACheck',
  ],
  TransactionCreateOrConnectWithoutAccountInput: ['where', 'create'],
  TransactionCreateManyAccountInputEnvelope: ['data', 'skipDuplicates'],
  EmployersOnAccountUpsertWithWhereUniqueWithoutAccountInput: [
    'where',
    'update',
    'create',
  ],
  EmployersOnAccountUpdateWithWhereUniqueWithoutAccountInput: ['where', 'data'],
  EmployersOnAccountUpdateManyWithWhereWithoutAccountInput: ['where', 'data'],
  EmployersOnAccountScalarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'accountId',
    'employerId',
    'createdAt',
    'updatedAt',
  ],
  EmployersOnAccountUpsertWithWhereUniqueWithoutEmployerInput: [
    'where',
    'update',
    'create',
  ],
  EmployersOnAccountUpdateWithWhereUniqueWithoutEmployerInput: [
    'where',
    'data',
  ],
  EmployersOnAccountUpdateManyWithWhereWithoutEmployerInput: ['where', 'data'],
  SubuserOnAccountUpsertWithWhereUniqueWithoutAccountInput: [
    'where',
    'update',
    'create',
  ],
  SubuserOnAccountUpdateWithWhereUniqueWithoutAccountInput: ['where', 'data'],
  SubuserOnAccountUpdateManyWithWhereWithoutAccountInput: ['where', 'data'],
  SubuserOnAccountScalarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'accountId',
    'subuserId',
    'createdAt',
    'updatedAt',
  ],
  SubuserOnAccountUpsertWithWhereUniqueWithoutSubuserInput: [
    'where',
    'update',
    'create',
  ],
  SubuserOnAccountUpdateWithWhereUniqueWithoutSubuserInput: ['where', 'data'],
  SubuserOnAccountUpdateManyWithWhereWithoutSubuserInput: ['where', 'data'],
  ManagersOnAccountUpsertWithWhereUniqueWithoutAccountInput: [
    'where',
    'update',
    'create',
  ],
  ManagersOnAccountUpdateWithWhereUniqueWithoutAccountInput: ['where', 'data'],
  ManagersOnAccountUpdateManyWithWhereWithoutAccountInput: ['where', 'data'],
  ManagersOnAccountScalarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'accountId',
    'managersId',
    'createdAt',
    'updatedAt',
  ],
  ManagersOnAccountUpsertWithWhereUniqueWithoutManagersInput: [
    'where',
    'update',
    'create',
  ],
  ManagersOnAccountUpdateWithWhereUniqueWithoutManagersInput: ['where', 'data'],
  ManagersOnAccountUpdateManyWithWhereWithoutManagersInput: ['where', 'data'],
  TokenUpsertWithWhereUniqueWithoutAccountInput: ['where', 'update', 'create'],
  TokenUpdateWithWhereUniqueWithoutAccountInput: ['where', 'data'],
  TokenUpdateManyWithWhereWithoutAccountInput: ['where', 'data'],
  TokenScalarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'value',
    'valid',
    'expiry',
    'apiToken',
  ],
  AddressUpsertWithoutPrimaryAccountInput: ['update', 'create'],
  AddressUpdateWithoutPrimaryAccountInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'hoursOfOperation',
    'features',
    'details',
    'public',
    'deleted',
    'account',
    'contacts',
    'venueStyle',
    'featuresOfBuisness',
    'phones',
    'rooms',
  ],
  AddressUpsertWithWhereUniqueWithoutAccountInput: [
    'where',
    'update',
    'create',
  ],
  AddressUpdateWithWhereUniqueWithoutAccountInput: ['where', 'data'],
  AddressUpdateManyWithWhereWithoutAccountInput: ['where', 'data'],
  AddressScalarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'createdAt',
    'updatedAt',
    'accountId',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'hoursOfOperation',
    'features',
    'details',
    'public',
    'primaryaccountId',
    'deleted',
  ],
  ContactAtAddressUpsertWithWhereUniqueWithoutAccountInput: [
    'where',
    'update',
    'create',
  ],
  ContactAtAddressUpdateWithWhereUniqueWithoutAccountInput: ['where', 'data'],
  ContactAtAddressUpdateManyWithWhereWithoutAccountInput: ['where', 'data'],
  ContactAtAddressScalarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'accountId',
    'addressId',
    'jobTitle',
    'phone',
    'emailId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  ApplicationUpsertWithWhereUniqueWithoutAccountInput: [
    'where',
    'update',
    'create',
  ],
  ApplicationUpdateWithWhereUniqueWithoutAccountInput: ['where', 'data'],
  ApplicationUpdateManyWithWhereWithoutAccountInput: ['where', 'data'],
  ApplicationScalarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'name',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  EmailUpsertWithWhereUniqueWithoutAccountInput: ['where', 'update', 'create'],
  EmailUpdateWithWhereUniqueWithoutAccountInput: ['where', 'data'],
  EmailUpdateManyWithWhereWithoutAccountInput: ['where', 'data'],
  EmailScalarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'domainId',
    'email',
    'accountId',
    'verified',
    'public',
    'primary',
    'path',
    'copy',
    'notifyFrom',
    'imap_authUser',
    'imap_authPass',
    'imap_accessToken',
    'imap_authServer',
    'imap_host',
    'imap_port',
    'imap_secure',
    'imap_tslRejectUnauthorized',
    'imap_tslMinVersion',
    'imap_resyncDelay',
    'smtp_authUser',
    'smtp_authPass',
    'smtp_accessToken',
    'smtp_authServer',
    'smtp_host',
    'smtp_port',
    'smtp_secure',
    'smtp_tslRejectUnauthorized',
    'smtp_tslMinVersion',
    'oauth2_authorize',
    'oauth2_provider',
    'oauth2_authUser',
    'oauth2_accessToken',
    'oauth2_refreshToken',
    'oauth2_expires',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FilesUpsertWithWhereUniqueWithoutAccountInput: ['where', 'update', 'create'],
  FilesUpdateWithWhereUniqueWithoutAccountInput: ['where', 'data'],
  FilesUpdateManyWithWhereWithoutAccountInput: ['where', 'data'],
  FilesScalarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'name',
    'rtwId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  PhoneUpsertWithWhereUniqueWithoutAccountInput: ['where', 'update', 'create'],
  PhoneUpdateWithWhereUniqueWithoutAccountInput: ['where', 'data'],
  PhoneUpdateManyWithWhereWithoutAccountInput: ['where', 'data'],
  PhoneScalarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'accountId',
    'addressId',
    'phone',
    'public',
  ],
  RTWUpsertWithWhereUniqueWithoutAccountInput: ['where', 'update', 'create'],
  RTWUpdateWithWhereUniqueWithoutAccountInput: ['where', 'data'],
  RTWUpdateManyWithWhereWithoutAccountInput: ['where', 'data'],
  RTWScalarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'name',
    'active',
    'startDate',
    'endDate',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  SIABadgeUpsertWithWhereUniqueWithoutAccountInput: [
    'where',
    'update',
    'create',
  ],
  SIABadgeUpdateWithWhereUniqueWithoutAccountInput: ['where', 'data'],
  SIABadgeUpdateManyWithWhereWithoutAccountInput: ['where', 'data'],
  SIABadgeScalarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'licenseSector',
    'type',
    'licenseExplanation',
    'additionalTerms',
    'createdAt',
    'active',
    'expiry',
    'updatedAt',
    'deleted',
    'account_id',
  ],
  StatusOnAccountUpsertWithWhereUniqueWithoutAccountInput: [
    'where',
    'update',
    'create',
  ],
  StatusOnAccountUpdateWithWhereUniqueWithoutAccountInput: ['where', 'data'],
  StatusOnAccountUpdateManyWithWhereWithoutAccountInput: ['where', 'data'],
  StatusOnAccountScalarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'statusId',
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  SubscriptionOnAccountUpsertWithWhereUniqueWithoutAccountInput: [
    'where',
    'update',
    'create',
  ],
  SubscriptionOnAccountUpdateWithWhereUniqueWithoutAccountInput: [
    'where',
    'data',
  ],
  SubscriptionOnAccountUpdateManyWithWhereWithoutAccountInput: [
    'where',
    'data',
  ],
  SubscriptionOnAccountScalarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'subscriptionId',
    'accountId',
    'active',
    'deactivated',
    'activated',
    'startedAt',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  TransactionUpsertWithWhereUniqueWithoutAccountInput: [
    'where',
    'update',
    'create',
  ],
  TransactionUpdateWithWhereUniqueWithoutAccountInput: ['where', 'data'],
  TransactionUpdateManyWithWhereWithoutAccountInput: ['where', 'data'],
  TransactionScalarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'accountId',
    'data',
  ],
  AccountCreateWithoutApiTokenInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountCreateOrConnectWithoutApiTokenInput: ['where', 'create'],
  AccountUpsertWithoutApiTokenInput: ['update', 'create'],
  AccountUpdateWithoutApiTokenInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountCreateWithoutAccessesInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountCreateOrConnectWithoutAccessesInput: ['where', 'create'],
  AccountCreateWithoutSubusersInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountCreateOrConnectWithoutSubusersInput: ['where', 'create'],
  AccountUpsertWithoutAccessesInput: ['update', 'create'],
  AccountUpdateWithoutAccessesInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountUpsertWithoutSubusersInput: ['update', 'create'],
  AccountUpdateWithoutSubusersInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountCreateWithoutEmployerInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountCreateOrConnectWithoutEmployerInput: ['where', 'create'],
  AccountCreateWithoutEmployeesInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountCreateOrConnectWithoutEmployeesInput: ['where', 'create'],
  AccountUpsertWithoutEmployerInput: ['update', 'create'],
  AccountUpdateWithoutEmployerInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountUpsertWithoutEmployeesInput: ['update', 'create'],
  AccountUpdateWithoutEmployeesInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountCreateWithoutAccountsInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountCreateOrConnectWithoutAccountsInput: ['where', 'create'],
  AccountCreateWithoutManagersInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountCreateOrConnectWithoutManagersInput: ['where', 'create'],
  AccountUpsertWithoutAccountsInput: ['update', 'create'],
  AccountUpdateWithoutAccountsInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountUpsertWithoutManagersInput: ['update', 'create'],
  AccountUpdateWithoutManagersInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountCreateWithoutAddressesInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountCreateOrConnectWithoutAddressesInput: ['where', 'create'],
  ContactAtAddressCreateWithoutAddressInput: [
    'jobTitle',
    'phone',
    'createdAt',
    'updatedAt',
    'deleted',
    'account',
    'email',
  ],
  ContactAtAddressCreateOrConnectWithoutAddressInput: ['where', 'create'],
  ContactAtAddressCreateManyAddressInputEnvelope: ['data', 'skipDuplicates'],
  VenueStyleCreateWithoutAddressInput: [
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'details',
  ],
  VenueStyleCreateOrConnectWithoutAddressInput: ['where', 'create'],
  AccountCreateWithoutPrimaryAddressInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountCreateOrConnectWithoutPrimaryAddressInput: ['where', 'create'],
  FeatureOfAddressCreateWithoutAddressInput: [
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
    'feature',
  ],
  FeatureOfAddressCreateOrConnectWithoutAddressInput: ['where', 'create'],
  FeatureOfAddressCreateManyAddressInputEnvelope: ['data', 'skipDuplicates'],
  PhoneCreateWithoutAddressInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'phone',
    'public',
    'account',
  ],
  PhoneCreateOrConnectWithoutAddressInput: ['where', 'create'],
  PhoneCreateManyAddressInputEnvelope: ['data', 'skipDuplicates'],
  RoomCreateWithoutAddressInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'floor',
    'building',
    'accessibility',
    'checkin',
    'checkout',
    'length',
    'width',
    'height',
    'featuresOfRoom',
    'arrangements',
  ],
  RoomCreateOrConnectWithoutAddressInput: ['where', 'create'],
  RoomCreateManyAddressInputEnvelope: ['data', 'skipDuplicates'],
  AccountUpsertWithoutAddressesInput: ['update', 'create'],
  AccountUpdateWithoutAddressesInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  ContactAtAddressUpsertWithWhereUniqueWithoutAddressInput: [
    'where',
    'update',
    'create',
  ],
  ContactAtAddressUpdateWithWhereUniqueWithoutAddressInput: ['where', 'data'],
  ContactAtAddressUpdateManyWithWhereWithoutAddressInput: ['where', 'data'],
  VenueStyleUpsertWithWhereUniqueWithoutAddressInput: [
    'where',
    'update',
    'create',
  ],
  VenueStyleUpdateWithWhereUniqueWithoutAddressInput: ['where', 'data'],
  VenueStyleUpdateManyWithWhereWithoutAddressInput: ['where', 'data'],
  VenueStyleScalarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'details',
  ],
  AccountUpsertWithoutPrimaryAddressInput: ['update', 'create'],
  AccountUpdateWithoutPrimaryAddressInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  FeatureOfAddressUpsertWithWhereUniqueWithoutAddressInput: [
    'where',
    'update',
    'create',
  ],
  FeatureOfAddressUpdateWithWhereUniqueWithoutAddressInput: ['where', 'data'],
  FeatureOfAddressUpdateManyWithWhereWithoutAddressInput: ['where', 'data'],
  FeatureOfAddressScalarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'addressId',
    'featureId',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  PhoneUpsertWithWhereUniqueWithoutAddressInput: ['where', 'update', 'create'],
  PhoneUpdateWithWhereUniqueWithoutAddressInput: ['where', 'data'],
  PhoneUpdateManyWithWhereWithoutAddressInput: ['where', 'data'],
  RoomUpsertWithWhereUniqueWithoutAddressInput: ['where', 'update', 'create'],
  RoomUpdateWithWhereUniqueWithoutAddressInput: ['where', 'data'],
  RoomUpdateManyWithWhereWithoutAddressInput: ['where', 'data'],
  RoomScalarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'addressId',
    'name',
    'floor',
    'building',
    'accessibility',
    'checkin',
    'checkout',
    'length',
    'width',
    'height',
  ],
  AccountCreateWithoutContactOfAddressInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountCreateOrConnectWithoutContactOfAddressInput: ['where', 'create'],
  AddressCreateWithoutContactsInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'hoursOfOperation',
    'features',
    'details',
    'public',
    'deleted',
    'account',
    'venueStyle',
    'primaryAccount',
    'featuresOfBuisness',
    'phones',
    'rooms',
  ],
  AddressCreateOrConnectWithoutContactsInput: ['where', 'create'],
  EmailCreateWithoutAssociatedContactInput: [
    'id',
    'email',
    'verified',
    'public',
    'primary',
    'path',
    'copy',
    'notifyFrom',
    'imap_authUser',
    'imap_authPass',
    'imap_accessToken',
    'imap_authServer',
    'imap_host',
    'imap_port',
    'imap_secure',
    'imap_tslRejectUnauthorized',
    'imap_tslMinVersion',
    'imap_resyncDelay',
    'smtp_authUser',
    'smtp_authPass',
    'smtp_accessToken',
    'smtp_authServer',
    'smtp_host',
    'smtp_port',
    'smtp_secure',
    'smtp_tslRejectUnauthorized',
    'smtp_tslMinVersion',
    'oauth2_authorize',
    'oauth2_provider',
    'oauth2_authUser',
    'oauth2_accessToken',
    'oauth2_refreshToken',
    'oauth2_expires',
    'createdAt',
    'updatedAt',
    'deleted',
    'domain',
    'account',
  ],
  EmailCreateOrConnectWithoutAssociatedContactInput: ['where', 'create'],
  AccountUpsertWithoutContactOfAddressInput: ['update', 'create'],
  AccountUpdateWithoutContactOfAddressInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AddressUpsertWithoutContactsInput: ['update', 'create'],
  AddressUpdateWithoutContactsInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'hoursOfOperation',
    'features',
    'details',
    'public',
    'deleted',
    'account',
    'venueStyle',
    'primaryAccount',
    'featuresOfBuisness',
    'phones',
    'rooms',
  ],
  EmailUpsertWithoutAssociatedContactInput: ['update', 'create'],
  EmailUpdateWithoutAssociatedContactInput: [
    'id',
    'email',
    'verified',
    'public',
    'primary',
    'path',
    'copy',
    'notifyFrom',
    'imap_authUser',
    'imap_authPass',
    'imap_accessToken',
    'imap_authServer',
    'imap_host',
    'imap_port',
    'imap_secure',
    'imap_tslRejectUnauthorized',
    'imap_tslMinVersion',
    'imap_resyncDelay',
    'smtp_authUser',
    'smtp_authPass',
    'smtp_accessToken',
    'smtp_authServer',
    'smtp_host',
    'smtp_port',
    'smtp_secure',
    'smtp_tslRejectUnauthorized',
    'smtp_tslMinVersion',
    'oauth2_authorize',
    'oauth2_provider',
    'oauth2_authUser',
    'oauth2_accessToken',
    'oauth2_refreshToken',
    'oauth2_expires',
    'createdAt',
    'updatedAt',
    'deleted',
    'domain',
    'account',
  ],
  AddressCreateWithoutVenueStyleInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'hoursOfOperation',
    'features',
    'details',
    'public',
    'deleted',
    'account',
    'contacts',
    'primaryAccount',
    'featuresOfBuisness',
    'phones',
    'rooms',
  ],
  AddressCreateOrConnectWithoutVenueStyleInput: ['where', 'create'],
  AddressUpsertWithWhereUniqueWithoutVenueStyleInput: [
    'where',
    'update',
    'create',
  ],
  AddressUpdateWithWhereUniqueWithoutVenueStyleInput: ['where', 'data'],
  AddressUpdateManyWithWhereWithoutVenueStyleInput: ['where', 'data'],
  ContactAtAddressCreateWithoutEmailInput: [
    'jobTitle',
    'phone',
    'createdAt',
    'updatedAt',
    'deleted',
    'account',
    'address',
  ],
  ContactAtAddressCreateOrConnectWithoutEmailInput: ['where', 'create'],
  ContactAtAddressCreateManyEmailInputEnvelope: ['data', 'skipDuplicates'],
  DomainCreateWithoutLinkedEmailsInput: [
    'id',
    'domain',
    'verified',
    'dnsType',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  DomainCreateOrConnectWithoutLinkedEmailsInput: ['where', 'create'],
  AccountCreateWithoutEmailsInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountCreateOrConnectWithoutEmailsInput: ['where', 'create'],
  ContactAtAddressUpsertWithWhereUniqueWithoutEmailInput: [
    'where',
    'update',
    'create',
  ],
  ContactAtAddressUpdateWithWhereUniqueWithoutEmailInput: ['where', 'data'],
  ContactAtAddressUpdateManyWithWhereWithoutEmailInput: ['where', 'data'],
  DomainUpsertWithoutLinkedEmailsInput: ['update', 'create'],
  DomainUpdateWithoutLinkedEmailsInput: [
    'id',
    'domain',
    'verified',
    'dnsType',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  AccountUpsertWithoutEmailsInput: ['update', 'create'],
  AccountUpdateWithoutEmailsInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountCreateWithoutApplicationInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountCreateOrConnectWithoutApplicationInput: ['where', 'create'],
  AccountUpsertWithoutApplicationInput: ['update', 'create'],
  AccountUpdateWithoutApplicationInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  EmailCreateWithoutDomainInput: [
    'id',
    'email',
    'verified',
    'public',
    'primary',
    'path',
    'copy',
    'notifyFrom',
    'imap_authUser',
    'imap_authPass',
    'imap_accessToken',
    'imap_authServer',
    'imap_host',
    'imap_port',
    'imap_secure',
    'imap_tslRejectUnauthorized',
    'imap_tslMinVersion',
    'imap_resyncDelay',
    'smtp_authUser',
    'smtp_authPass',
    'smtp_accessToken',
    'smtp_authServer',
    'smtp_host',
    'smtp_port',
    'smtp_secure',
    'smtp_tslRejectUnauthorized',
    'smtp_tslMinVersion',
    'oauth2_authorize',
    'oauth2_provider',
    'oauth2_authUser',
    'oauth2_accessToken',
    'oauth2_refreshToken',
    'oauth2_expires',
    'createdAt',
    'updatedAt',
    'deleted',
    'associatedContact',
    'account',
  ],
  EmailCreateOrConnectWithoutDomainInput: ['where', 'create'],
  EmailCreateManyDomainInputEnvelope: ['data', 'skipDuplicates'],
  EmailUpsertWithWhereUniqueWithoutDomainInput: ['where', 'update', 'create'],
  EmailUpdateWithWhereUniqueWithoutDomainInput: ['where', 'data'],
  EmailUpdateManyWithWhereWithoutDomainInput: ['where', 'data'],
  FeatureOfRoomCreateWithoutFeatureInput: [
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
    'room',
  ],
  FeatureOfRoomCreateOrConnectWithoutFeatureInput: ['where', 'create'],
  FeatureOfRoomCreateManyFeatureInputEnvelope: ['data', 'skipDuplicates'],
  FeatureOfAddressCreateWithoutFeatureInput: [
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
    'address',
  ],
  FeatureOfAddressCreateOrConnectWithoutFeatureInput: ['where', 'create'],
  FeatureOfAddressCreateManyFeatureInputEnvelope: ['data', 'skipDuplicates'],
  FeatureOfRoomUpsertWithWhereUniqueWithoutFeatureInput: [
    'where',
    'update',
    'create',
  ],
  FeatureOfRoomUpdateWithWhereUniqueWithoutFeatureInput: ['where', 'data'],
  FeatureOfRoomUpdateManyWithWhereWithoutFeatureInput: ['where', 'data'],
  FeatureOfRoomScalarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'roomId',
    'featureId',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureOfAddressUpsertWithWhereUniqueWithoutFeatureInput: [
    'where',
    'update',
    'create',
  ],
  FeatureOfAddressUpdateWithWhereUniqueWithoutFeatureInput: ['where', 'data'],
  FeatureOfAddressUpdateManyWithWhereWithoutFeatureInput: ['where', 'data'],
  FeatureCreateWithoutFeatureOfRoomInput: [
    'id',
    'name',
    'type',
    'createdAt',
    'updatedAt',
    'deleted',
    'featureOfAddress',
  ],
  FeatureCreateOrConnectWithoutFeatureOfRoomInput: ['where', 'create'],
  RoomCreateWithoutFeaturesOfRoomInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'floor',
    'building',
    'accessibility',
    'checkin',
    'checkout',
    'length',
    'width',
    'height',
    'address',
    'arrangements',
  ],
  RoomCreateOrConnectWithoutFeaturesOfRoomInput: ['where', 'create'],
  FeatureUpsertWithoutFeatureOfRoomInput: ['update', 'create'],
  FeatureUpdateWithoutFeatureOfRoomInput: [
    'id',
    'name',
    'type',
    'createdAt',
    'updatedAt',
    'deleted',
    'featureOfAddress',
  ],
  RoomUpsertWithoutFeaturesOfRoomInput: ['update', 'create'],
  RoomUpdateWithoutFeaturesOfRoomInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'floor',
    'building',
    'accessibility',
    'checkin',
    'checkout',
    'length',
    'width',
    'height',
    'address',
    'arrangements',
  ],
  FeatureCreateWithoutFeatureOfAddressInput: [
    'id',
    'name',
    'type',
    'createdAt',
    'updatedAt',
    'deleted',
    'featureOfRoom',
  ],
  FeatureCreateOrConnectWithoutFeatureOfAddressInput: ['where', 'create'],
  AddressCreateWithoutFeaturesOfBuisnessInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'hoursOfOperation',
    'features',
    'details',
    'public',
    'deleted',
    'account',
    'contacts',
    'venueStyle',
    'primaryAccount',
    'phones',
    'rooms',
  ],
  AddressCreateOrConnectWithoutFeaturesOfBuisnessInput: ['where', 'create'],
  FeatureUpsertWithoutFeatureOfAddressInput: ['update', 'create'],
  FeatureUpdateWithoutFeatureOfAddressInput: [
    'id',
    'name',
    'type',
    'createdAt',
    'updatedAt',
    'deleted',
    'featureOfRoom',
  ],
  AddressUpsertWithoutFeaturesOfBuisnessInput: ['update', 'create'],
  AddressUpdateWithoutFeaturesOfBuisnessInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'hoursOfOperation',
    'features',
    'details',
    'public',
    'deleted',
    'account',
    'contacts',
    'venueStyle',
    'primaryAccount',
    'phones',
    'rooms',
  ],
  FeatureOfRoomCreateWithoutRoomInput: [
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
    'feature',
  ],
  FeatureOfRoomCreateOrConnectWithoutRoomInput: ['where', 'create'],
  FeatureOfRoomCreateManyRoomInputEnvelope: ['data', 'skipDuplicates'],
  AddressCreateWithoutRoomsInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'hoursOfOperation',
    'features',
    'details',
    'public',
    'deleted',
    'account',
    'contacts',
    'venueStyle',
    'primaryAccount',
    'featuresOfBuisness',
    'phones',
  ],
  AddressCreateOrConnectWithoutRoomsInput: ['where', 'create'],
  ArrangementOfRoomCreateWithoutRoomInput: [
    'capacity',
    'details',
    'createdAt',
    'updatedAt',
    'arrangement',
  ],
  ArrangementOfRoomCreateOrConnectWithoutRoomInput: ['where', 'create'],
  ArrangementOfRoomCreateManyRoomInputEnvelope: ['data', 'skipDuplicates'],
  FeatureOfRoomUpsertWithWhereUniqueWithoutRoomInput: [
    'where',
    'update',
    'create',
  ],
  FeatureOfRoomUpdateWithWhereUniqueWithoutRoomInput: ['where', 'data'],
  FeatureOfRoomUpdateManyWithWhereWithoutRoomInput: ['where', 'data'],
  AddressUpsertWithoutRoomsInput: ['update', 'create'],
  AddressUpdateWithoutRoomsInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'hoursOfOperation',
    'features',
    'details',
    'public',
    'deleted',
    'account',
    'contacts',
    'venueStyle',
    'primaryAccount',
    'featuresOfBuisness',
    'phones',
  ],
  ArrangementOfRoomUpsertWithWhereUniqueWithoutRoomInput: [
    'where',
    'update',
    'create',
  ],
  ArrangementOfRoomUpdateWithWhereUniqueWithoutRoomInput: ['where', 'data'],
  ArrangementOfRoomUpdateManyWithWhereWithoutRoomInput: ['where', 'data'],
  ArrangementOfRoomScalarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'roomId',
    'arrangementId',
    'capacity',
    'details',
    'createdAt',
    'updatedAt',
  ],
  RTWCreateWithoutFilesInput: [
    'id',
    'name',
    'active',
    'startDate',
    'endDate',
    'createdAt',
    'updatedAt',
    'deleted',
    'account',
  ],
  RTWCreateOrConnectWithoutFilesInput: ['where', 'create'],
  AccountCreateWithoutFilesInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountCreateOrConnectWithoutFilesInput: ['where', 'create'],
  RTWUpsertWithoutFilesInput: ['update', 'create'],
  RTWUpdateWithoutFilesInput: [
    'id',
    'name',
    'active',
    'startDate',
    'endDate',
    'createdAt',
    'updatedAt',
    'deleted',
    'account',
  ],
  AccountUpsertWithWhereUniqueWithoutFilesInput: ['where', 'update', 'create'],
  AccountUpdateWithWhereUniqueWithoutFilesInput: ['where', 'data'],
  AccountUpdateManyWithWhereWithoutFilesInput: ['where', 'data'],
  AccountScalarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
  ],
  FilesCreateWithoutRtwInput: [
    'id',
    'name',
    'createdAt',
    'updatedAt',
    'deleted',
    'account',
  ],
  FilesCreateOrConnectWithoutRtwInput: ['where', 'create'],
  FilesCreateManyRtwInputEnvelope: ['data', 'skipDuplicates'],
  AccountCreateWithoutRtwInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountCreateOrConnectWithoutRtwInput: ['where', 'create'],
  FilesUpsertWithWhereUniqueWithoutRtwInput: ['where', 'update', 'create'],
  FilesUpdateWithWhereUniqueWithoutRtwInput: ['where', 'data'],
  FilesUpdateManyWithWhereWithoutRtwInput: ['where', 'data'],
  AccountUpsertWithoutRtwInput: ['update', 'create'],
  AccountUpdateWithoutRtwInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountCreateWithoutPhonesInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountCreateOrConnectWithoutPhonesInput: ['where', 'create'],
  AddressCreateWithoutPhonesInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'hoursOfOperation',
    'features',
    'details',
    'public',
    'deleted',
    'account',
    'contacts',
    'venueStyle',
    'primaryAccount',
    'featuresOfBuisness',
    'rooms',
  ],
  AddressCreateOrConnectWithoutPhonesInput: ['where', 'create'],
  AccountUpsertWithoutPhonesInput: ['update', 'create'],
  AccountUpdateWithoutPhonesInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  AddressUpsertWithoutPhonesInput: ['update', 'create'],
  AddressUpdateWithoutPhonesInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'hoursOfOperation',
    'features',
    'details',
    'public',
    'deleted',
    'account',
    'contacts',
    'venueStyle',
    'primaryAccount',
    'featuresOfBuisness',
    'rooms',
  ],
  ArrangementCreateWithoutRoomInput: [
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'icon',
    'details',
  ],
  ArrangementCreateOrConnectWithoutRoomInput: ['where', 'create'],
  RoomCreateWithoutArrangementsInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'floor',
    'building',
    'accessibility',
    'checkin',
    'checkout',
    'length',
    'width',
    'height',
    'featuresOfRoom',
    'address',
  ],
  RoomCreateOrConnectWithoutArrangementsInput: ['where', 'create'],
  ArrangementUpsertWithoutRoomInput: ['update', 'create'],
  ArrangementUpdateWithoutRoomInput: [
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'icon',
    'details',
  ],
  RoomUpsertWithoutArrangementsInput: ['update', 'create'],
  RoomUpdateWithoutArrangementsInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'floor',
    'building',
    'accessibility',
    'checkin',
    'checkout',
    'length',
    'width',
    'height',
    'featuresOfRoom',
    'address',
  ],
  ArrangementOfRoomCreateWithoutArrangementInput: [
    'capacity',
    'details',
    'createdAt',
    'updatedAt',
    'room',
  ],
  ArrangementOfRoomCreateOrConnectWithoutArrangementInput: ['where', 'create'],
  ArrangementOfRoomCreateManyArrangementInputEnvelope: [
    'data',
    'skipDuplicates',
  ],
  ArrangementOfRoomUpsertWithWhereUniqueWithoutArrangementInput: [
    'where',
    'update',
    'create',
  ],
  ArrangementOfRoomUpdateWithWhereUniqueWithoutArrangementInput: [
    'where',
    'data',
  ],
  ArrangementOfRoomUpdateManyWithWhereWithoutArrangementInput: [
    'where',
    'data',
  ],
  SIACheckCreateWithoutBadgeInput: [
    'id',
    'status',
    'AuthUrl',
    'pubUrl',
    'createdAt',
    'updatedAt',
    'deleted',
    'error',
    'transactions',
  ],
  SIACheckCreateOrConnectWithoutBadgeInput: ['where', 'create'],
  SIACheckCreateManyBadgeInputEnvelope: ['data', 'skipDuplicates'],
  AccountCreateWithoutSiaInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'Status',
    'subscription',
    'transactions',
  ],
  AccountCreateOrConnectWithoutSiaInput: ['where', 'create'],
  SIACheckUpsertWithWhereUniqueWithoutBadgeInput: ['where', 'update', 'create'],
  SIACheckUpdateWithWhereUniqueWithoutBadgeInput: ['where', 'data'],
  SIACheckUpdateManyWithWhereWithoutBadgeInput: ['where', 'data'],
  SIACheckScalarWhereInput: [
    'AND',
    'OR',
    'NOT',
    'id',
    'sia_id',
    'status',
    'AuthUrl',
    'pubUrl',
    'createdAt',
    'updatedAt',
    'deleted',
    'error',
    'transactionId',
  ],
  AccountUpsertWithoutSiaInput: ['update', 'create'],
  AccountUpdateWithoutSiaInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'Status',
    'subscription',
    'transactions',
  ],
  SIABadgeCreateWithoutSiaChecksInput: [
    'id',
    'licenseSector',
    'type',
    'licenseExplanation',
    'additionalTerms',
    'createdAt',
    'active',
    'expiry',
    'updatedAt',
    'deleted',
    'account',
  ],
  SIABadgeCreateOrConnectWithoutSiaChecksInput: ['where', 'create'],
  TransactionCreateWithoutSIACheckInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'data',
    'account',
  ],
  TransactionCreateOrConnectWithoutSIACheckInput: ['where', 'create'],
  SIABadgeUpsertWithoutSiaChecksInput: ['update', 'create'],
  SIABadgeUpdateWithoutSiaChecksInput: [
    'id',
    'licenseSector',
    'type',
    'licenseExplanation',
    'additionalTerms',
    'createdAt',
    'active',
    'expiry',
    'updatedAt',
    'deleted',
    'account',
  ],
  TransactionUpsertWithoutSIACheckInput: ['update', 'create'],
  TransactionUpdateWithoutSIACheckInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'data',
    'account',
  ],
  StatusCreateWithoutAccountInput: [
    'id',
    'name',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  StatusCreateOrConnectWithoutAccountInput: ['where', 'create'],
  AccountCreateWithoutStatusInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'subscription',
    'transactions',
  ],
  AccountCreateOrConnectWithoutStatusInput: ['where', 'create'],
  StatusUpsertWithoutAccountInput: ['update', 'create'],
  StatusUpdateWithoutAccountInput: [
    'id',
    'name',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  AccountUpsertWithoutStatusInput: ['update', 'create'],
  AccountUpdateWithoutStatusInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'subscription',
    'transactions',
  ],
  StatusOnAccountCreateWithoutStatusInput: [
    'createdAt',
    'updatedAt',
    'deleted',
    'account',
  ],
  StatusOnAccountCreateOrConnectWithoutStatusInput: ['where', 'create'],
  StatusOnAccountCreateManyStatusInputEnvelope: ['data', 'skipDuplicates'],
  StatusOnAccountUpsertWithWhereUniqueWithoutStatusInput: [
    'where',
    'update',
    'create',
  ],
  StatusOnAccountUpdateWithWhereUniqueWithoutStatusInput: ['where', 'data'],
  StatusOnAccountUpdateManyWithWhereWithoutStatusInput: ['where', 'data'],
  SubscriptionOnAccountCreateWithoutSubscriptionInput: [
    'active',
    'deactivated',
    'activated',
    'startedAt',
    'createdAt',
    'updatedAt',
    'deleted',
    'account',
  ],
  SubscriptionOnAccountCreateOrConnectWithoutSubscriptionInput: [
    'where',
    'create',
  ],
  SubscriptionOnAccountCreateManySubscriptionInputEnvelope: [
    'data',
    'skipDuplicates',
  ],
  SubscriptionOnAccountUpsertWithWhereUniqueWithoutSubscriptionInput: [
    'where',
    'update',
    'create',
  ],
  SubscriptionOnAccountUpdateWithWhereUniqueWithoutSubscriptionInput: [
    'where',
    'data',
  ],
  SubscriptionOnAccountUpdateManyWithWhereWithoutSubscriptionInput: [
    'where',
    'data',
  ],
  SubscriptionCreateWithoutAccountsInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'cost',
    'details',
  ],
  SubscriptionCreateOrConnectWithoutAccountsInput: ['where', 'create'],
  AccountCreateWithoutSubscriptionInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'transactions',
  ],
  AccountCreateOrConnectWithoutSubscriptionInput: ['where', 'create'],
  SubscriptionUpsertWithoutAccountsInput: ['update', 'create'],
  SubscriptionUpdateWithoutAccountsInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'cost',
    'details',
  ],
  AccountUpsertWithoutSubscriptionInput: ['update', 'create'],
  AccountUpdateWithoutSubscriptionInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'transactions',
  ],
  AccountCreateWithoutTransactionsInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
  ],
  AccountCreateOrConnectWithoutTransactionsInput: ['where', 'create'],
  SIACheckCreateWithoutTransactionsInput: [
    'id',
    'status',
    'AuthUrl',
    'pubUrl',
    'createdAt',
    'updatedAt',
    'deleted',
    'error',
    'badge',
  ],
  SIACheckCreateOrConnectWithoutTransactionsInput: ['where', 'create'],
  SIACheckCreateManyTransactionsInputEnvelope: ['data', 'skipDuplicates'],
  AccountUpsertWithoutTransactionsInput: ['update', 'create'],
  AccountUpdateWithoutTransactionsInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'files',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
  ],
  SIACheckUpsertWithWhereUniqueWithoutTransactionsInput: [
    'where',
    'update',
    'create',
  ],
  SIACheckUpdateWithWhereUniqueWithoutTransactionsInput: ['where', 'data'],
  SIACheckUpdateManyWithWhereWithoutTransactionsInput: ['where', 'data'],
  EmployersOnAccountCreateManyAccountInput: [
    'employerId',
    'createdAt',
    'updatedAt',
  ],
  EmployersOnAccountCreateManyEmployerInput: [
    'accountId',
    'createdAt',
    'updatedAt',
  ],
  SubuserOnAccountCreateManyAccountInput: [
    'subuserId',
    'createdAt',
    'updatedAt',
  ],
  SubuserOnAccountCreateManySubuserInput: [
    'accountId',
    'createdAt',
    'updatedAt',
  ],
  ManagersOnAccountCreateManyAccountInput: [
    'managersId',
    'createdAt',
    'updatedAt',
  ],
  ManagersOnAccountCreateManyManagersInput: [
    'accountId',
    'createdAt',
    'updatedAt',
  ],
  TokenCreateManyAccountInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'value',
    'valid',
    'expiry',
  ],
  AddressCreateManyAccountInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'hoursOfOperation',
    'features',
    'details',
    'public',
    'primaryaccountId',
    'deleted',
  ],
  ContactAtAddressCreateManyAccountInput: [
    'addressId',
    'jobTitle',
    'phone',
    'emailId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  ApplicationCreateManyAccountInput: [
    'id',
    'name',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  EmailCreateManyAccountInput: [
    'id',
    'domainId',
    'email',
    'verified',
    'public',
    'primary',
    'path',
    'copy',
    'notifyFrom',
    'imap_authUser',
    'imap_authPass',
    'imap_accessToken',
    'imap_authServer',
    'imap_host',
    'imap_port',
    'imap_secure',
    'imap_tslRejectUnauthorized',
    'imap_tslMinVersion',
    'imap_resyncDelay',
    'smtp_authUser',
    'smtp_authPass',
    'smtp_accessToken',
    'smtp_authServer',
    'smtp_host',
    'smtp_port',
    'smtp_secure',
    'smtp_tslRejectUnauthorized',
    'smtp_tslMinVersion',
    'oauth2_authorize',
    'oauth2_provider',
    'oauth2_authUser',
    'oauth2_accessToken',
    'oauth2_refreshToken',
    'oauth2_expires',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  PhoneCreateManyAccountInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'addressId',
    'phone',
    'public',
  ],
  RTWCreateManyAccountInput: [
    'id',
    'name',
    'active',
    'startDate',
    'endDate',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  SIABadgeCreateManyAccountInput: [
    'id',
    'licenseSector',
    'type',
    'licenseExplanation',
    'additionalTerms',
    'createdAt',
    'active',
    'expiry',
    'updatedAt',
    'deleted',
  ],
  StatusOnAccountCreateManyAccountInput: [
    'statusId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  SubscriptionOnAccountCreateManyAccountInput: [
    'subscriptionId',
    'active',
    'deactivated',
    'activated',
    'startedAt',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  TransactionCreateManyAccountInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'data',
  ],
  EmployersOnAccountUpdateWithoutAccountInput: [
    'createdAt',
    'updatedAt',
    'employer',
  ],
  EmployersOnAccountUpdateWithoutEmployerInput: [
    'createdAt',
    'updatedAt',
    'account',
  ],
  SubuserOnAccountUpdateWithoutAccountInput: [
    'createdAt',
    'updatedAt',
    'subuser',
  ],
  SubuserOnAccountUpdateWithoutSubuserInput: [
    'createdAt',
    'updatedAt',
    'account',
  ],
  ManagersOnAccountUpdateWithoutAccountInput: [
    'createdAt',
    'updatedAt',
    'managers',
  ],
  ManagersOnAccountUpdateWithoutManagersInput: [
    'createdAt',
    'updatedAt',
    'account',
  ],
  TokenUpdateWithoutAccountInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'value',
    'valid',
    'expiry',
  ],
  AddressUpdateWithoutAccountInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'hoursOfOperation',
    'features',
    'details',
    'public',
    'deleted',
    'contacts',
    'venueStyle',
    'primaryAccount',
    'featuresOfBuisness',
    'phones',
    'rooms',
  ],
  ContactAtAddressUpdateWithoutAccountInput: [
    'jobTitle',
    'phone',
    'createdAt',
    'updatedAt',
    'deleted',
    'address',
    'email',
  ],
  ApplicationUpdateWithoutAccountInput: [
    'id',
    'name',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  EmailUpdateWithoutAccountInput: [
    'id',
    'email',
    'verified',
    'public',
    'primary',
    'path',
    'copy',
    'notifyFrom',
    'imap_authUser',
    'imap_authPass',
    'imap_accessToken',
    'imap_authServer',
    'imap_host',
    'imap_port',
    'imap_secure',
    'imap_tslRejectUnauthorized',
    'imap_tslMinVersion',
    'imap_resyncDelay',
    'smtp_authUser',
    'smtp_authPass',
    'smtp_accessToken',
    'smtp_authServer',
    'smtp_host',
    'smtp_port',
    'smtp_secure',
    'smtp_tslRejectUnauthorized',
    'smtp_tslMinVersion',
    'oauth2_authorize',
    'oauth2_provider',
    'oauth2_authUser',
    'oauth2_accessToken',
    'oauth2_refreshToken',
    'oauth2_expires',
    'createdAt',
    'updatedAt',
    'deleted',
    'associatedContact',
    'domain',
  ],
  FilesUpdateWithoutAccountInput: [
    'id',
    'name',
    'createdAt',
    'updatedAt',
    'deleted',
    'rtw',
  ],
  PhoneUpdateWithoutAccountInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'phone',
    'public',
    'address',
  ],
  RTWUpdateWithoutAccountInput: [
    'id',
    'name',
    'active',
    'startDate',
    'endDate',
    'createdAt',
    'updatedAt',
    'deleted',
    'files',
  ],
  SIABadgeUpdateWithoutAccountInput: [
    'id',
    'licenseSector',
    'type',
    'licenseExplanation',
    'additionalTerms',
    'createdAt',
    'active',
    'expiry',
    'updatedAt',
    'deleted',
    'siaChecks',
  ],
  StatusOnAccountUpdateWithoutAccountInput: [
    'createdAt',
    'updatedAt',
    'deleted',
    'status',
  ],
  SubscriptionOnAccountUpdateWithoutAccountInput: [
    'active',
    'deactivated',
    'activated',
    'startedAt',
    'createdAt',
    'updatedAt',
    'deleted',
    'subscription',
  ],
  TransactionUpdateWithoutAccountInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'data',
    'SIACheck',
  ],
  ContactAtAddressCreateManyAddressInput: [
    'accountId',
    'jobTitle',
    'phone',
    'emailId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureOfAddressCreateManyAddressInput: [
    'featureId',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  PhoneCreateManyAddressInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'accountId',
    'phone',
    'public',
  ],
  RoomCreateManyAddressInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'floor',
    'building',
    'accessibility',
    'checkin',
    'checkout',
    'length',
    'width',
    'height',
  ],
  ContactAtAddressUpdateWithoutAddressInput: [
    'jobTitle',
    'phone',
    'createdAt',
    'updatedAt',
    'deleted',
    'account',
    'email',
  ],
  VenueStyleUpdateWithoutAddressInput: [
    'id',
    'createdAt',
    'updatedAt',
    'name',
    'details',
  ],
  FeatureOfAddressUpdateWithoutAddressInput: [
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
    'feature',
  ],
  PhoneUpdateWithoutAddressInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'phone',
    'public',
    'account',
  ],
  RoomUpdateWithoutAddressInput: [
    'id',
    'createdAt',
    'updatedAt',
    'deleted',
    'name',
    'floor',
    'building',
    'accessibility',
    'checkin',
    'checkout',
    'length',
    'width',
    'height',
    'featuresOfRoom',
    'arrangements',
  ],
  AddressUpdateWithoutVenueStyleInput: [
    'id',
    'createdAt',
    'updatedAt',
    'type',
    'coords',
    'street',
    'city',
    'state',
    'country',
    'zipcode',
    'addressName',
    'name',
    'parking',
    'website',
    'hoursOfOperation',
    'features',
    'details',
    'public',
    'deleted',
    'account',
    'contacts',
    'primaryAccount',
    'featuresOfBuisness',
    'phones',
    'rooms',
  ],
  ContactAtAddressCreateManyEmailInput: [
    'accountId',
    'addressId',
    'jobTitle',
    'phone',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  ContactAtAddressUpdateWithoutEmailInput: [
    'jobTitle',
    'phone',
    'createdAt',
    'updatedAt',
    'deleted',
    'account',
    'address',
  ],
  EmailCreateManyDomainInput: [
    'id',
    'email',
    'accountId',
    'verified',
    'public',
    'primary',
    'path',
    'copy',
    'notifyFrom',
    'imap_authUser',
    'imap_authPass',
    'imap_accessToken',
    'imap_authServer',
    'imap_host',
    'imap_port',
    'imap_secure',
    'imap_tslRejectUnauthorized',
    'imap_tslMinVersion',
    'imap_resyncDelay',
    'smtp_authUser',
    'smtp_authPass',
    'smtp_accessToken',
    'smtp_authServer',
    'smtp_host',
    'smtp_port',
    'smtp_secure',
    'smtp_tslRejectUnauthorized',
    'smtp_tslMinVersion',
    'oauth2_authorize',
    'oauth2_provider',
    'oauth2_authUser',
    'oauth2_accessToken',
    'oauth2_refreshToken',
    'oauth2_expires',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  EmailUpdateWithoutDomainInput: [
    'id',
    'email',
    'verified',
    'public',
    'primary',
    'path',
    'copy',
    'notifyFrom',
    'imap_authUser',
    'imap_authPass',
    'imap_accessToken',
    'imap_authServer',
    'imap_host',
    'imap_port',
    'imap_secure',
    'imap_tslRejectUnauthorized',
    'imap_tslMinVersion',
    'imap_resyncDelay',
    'smtp_authUser',
    'smtp_authPass',
    'smtp_accessToken',
    'smtp_authServer',
    'smtp_host',
    'smtp_port',
    'smtp_secure',
    'smtp_tslRejectUnauthorized',
    'smtp_tslMinVersion',
    'oauth2_authorize',
    'oauth2_provider',
    'oauth2_authUser',
    'oauth2_accessToken',
    'oauth2_refreshToken',
    'oauth2_expires',
    'createdAt',
    'updatedAt',
    'deleted',
    'associatedContact',
    'account',
  ],
  FeatureOfRoomCreateManyFeatureInput: [
    'roomId',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureOfAddressCreateManyFeatureInput: [
    'addressId',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  FeatureOfRoomUpdateWithoutFeatureInput: [
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
    'room',
  ],
  FeatureOfAddressUpdateWithoutFeatureInput: [
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
    'address',
  ],
  FeatureOfRoomCreateManyRoomInput: [
    'featureId',
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  ArrangementOfRoomCreateManyRoomInput: [
    'arrangementId',
    'capacity',
    'details',
    'createdAt',
    'updatedAt',
  ],
  FeatureOfRoomUpdateWithoutRoomInput: [
    'data',
    'createdAt',
    'updatedAt',
    'deleted',
    'feature',
  ],
  ArrangementOfRoomUpdateWithoutRoomInput: [
    'capacity',
    'details',
    'createdAt',
    'updatedAt',
    'arrangement',
  ],
  AccountUpdateWithoutFilesInput: [
    'id',
    'username',
    'accountType',
    'subsciption',
    'createdAt',
    'updatedAt',
    'lastLogin',
    'applied',
    'promoted',
    'retired',
    'title',
    'firstname',
    'midname',
    'lastname',
    'Salutation',
    'dob',
    'sex',
    'label',
    'password',
    'resetPasswordToken',
    'resetPasswordExpires',
    'deleted',
    'employer',
    'employees',
    'accesses',
    'subusers',
    'accounts',
    'managers',
    'apiToken',
    'primaryAddress',
    'addresses',
    'contactOfAddress',
    'application',
    'emails',
    'phones',
    'rtw',
    'sia',
    'Status',
    'subscription',
    'transactions',
  ],
  FilesCreateManyRtwInput: ['id', 'name', 'createdAt', 'updatedAt', 'deleted'],
  FilesUpdateWithoutRtwInput: [
    'id',
    'name',
    'createdAt',
    'updatedAt',
    'deleted',
    'account',
  ],
  ArrangementOfRoomCreateManyArrangementInput: [
    'roomId',
    'capacity',
    'details',
    'createdAt',
    'updatedAt',
  ],
  ArrangementOfRoomUpdateWithoutArrangementInput: [
    'capacity',
    'details',
    'createdAt',
    'updatedAt',
    'room',
  ],
  SIACheckCreateManyBadgeInput: [
    'id',
    'status',
    'AuthUrl',
    'pubUrl',
    'createdAt',
    'updatedAt',
    'deleted',
    'error',
    'transactionId',
  ],
  SIACheckUpdateWithoutBadgeInput: [
    'id',
    'status',
    'AuthUrl',
    'pubUrl',
    'createdAt',
    'updatedAt',
    'deleted',
    'error',
    'transactions',
  ],
  StatusOnAccountCreateManyStatusInput: [
    'accountId',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  StatusOnAccountUpdateWithoutStatusInput: [
    'createdAt',
    'updatedAt',
    'deleted',
    'account',
  ],
  SubscriptionOnAccountCreateManySubscriptionInput: [
    'accountId',
    'active',
    'deactivated',
    'activated',
    'startedAt',
    'createdAt',
    'updatedAt',
    'deleted',
  ],
  SubscriptionOnAccountUpdateWithoutSubscriptionInput: [
    'active',
    'deactivated',
    'activated',
    'startedAt',
    'createdAt',
    'updatedAt',
    'deleted',
    'account',
  ],
  SIACheckCreateManyTransactionsInput: [
    'id',
    'sia_id',
    'status',
    'AuthUrl',
    'pubUrl',
    'createdAt',
    'updatedAt',
    'deleted',
    'error',
  ],
  SIACheckUpdateWithoutTransactionsInput: [
    'id',
    'status',
    'AuthUrl',
    'pubUrl',
    'createdAt',
    'updatedAt',
    'deleted',
    'error',
    'badge',
  ],
};

type InputTypesNames = keyof typeof inputTypes;

type InputTypeFieldNames<TInput extends InputTypesNames> = Exclude<
  keyof typeof inputTypes[TInput]['prototype'],
  number | symbol
>;

type InputTypeFieldsConfig<TInput extends InputTypesNames> = FieldsConfig<
  InputTypeFieldNames<TInput>
>;

export type InputTypeConfig<TInput extends InputTypesNames> = {
  class?: ClassDecorator[];
  fields?: InputTypeFieldsConfig<TInput>;
};

export type InputTypesEnhanceMap = {
  [TInput in InputTypesNames]?: InputTypeConfig<TInput>;
};

export function applyInputTypesEnhanceMap(
  inputTypesEnhanceMap: InputTypesEnhanceMap
) {
  for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
    const inputTypeName =
      inputTypeEnhanceMapKey as keyof typeof inputTypesEnhanceMap;
    const typeConfig = inputTypesEnhanceMap[inputTypeName]!;
    const typeClass = inputTypes[inputTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      inputsInfo[inputTypeName as keyof typeof inputsInfo]
    );
  }
}
