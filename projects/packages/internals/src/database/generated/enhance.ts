import { ClassType } from "type-graphql";
import * as tslib from "tslib";
import * as crudResolvers from "./resolvers/crud/resolvers-crud.index";
import * as argsTypes from "./resolvers/crud/args.index";
import * as actionResolvers from "./resolvers/crud/resolvers-actions.index";
import * as relationResolvers from "./resolvers/relations/resolvers.index";
import * as models from "./models";
import * as outputTypes from "./resolvers/outputs";
import * as inputTypes from "./resolvers/inputs";

const crudResolversMap = {
  Account: crudResolvers.AccountCrudResolver,
  Token: crudResolvers.TokenCrudResolver,
  Salt: crudResolvers.SaltCrudResolver,
  SubuserOnAccount: crudResolvers.SubuserOnAccountCrudResolver,
  EmployersOnAccount: crudResolvers.EmployersOnAccountCrudResolver,
  ManagersOnAccount: crudResolvers.ManagersOnAccountCrudResolver,
  Address: crudResolvers.AddressCrudResolver,
  ContactAtAddress: crudResolvers.ContactAtAddressCrudResolver,
  VenueStyle: crudResolvers.VenueStyleCrudResolver,
  Email: crudResolvers.EmailCrudResolver,
  Application: crudResolvers.ApplicationCrudResolver,
  Domain: crudResolvers.DomainCrudResolver,
  Feature: crudResolvers.FeatureCrudResolver,
  FeatureOfRoom: crudResolvers.FeatureOfRoomCrudResolver,
  FeatureOfAddress: crudResolvers.FeatureOfAddressCrudResolver,
  Room: crudResolvers.RoomCrudResolver,
  Files: crudResolvers.FilesCrudResolver,
  RTW: crudResolvers.RTWCrudResolver,
  Phone: crudResolvers.PhoneCrudResolver,
  ArrangementOfRoom: crudResolvers.ArrangementOfRoomCrudResolver,
  Arrangement: crudResolvers.ArrangementCrudResolver,
  SIABadge: crudResolvers.SIABadgeCrudResolver,
  SIACheck: crudResolvers.SIACheckCrudResolver,
  StatusOnAccount: crudResolvers.StatusOnAccountCrudResolver,
  Status: crudResolvers.StatusCrudResolver,
  Subscription: crudResolvers.SubscriptionCrudResolver,
  SubscriptionOnAccount: crudResolvers.SubscriptionOnAccountCrudResolver,
  Transaction: crudResolvers.TransactionCrudResolver
};
const actionResolversMap = {
  Account: {
    account: actionResolvers.FindUniqueAccountResolver,
    findFirstAccount: actionResolvers.FindFirstAccountResolver,
    accounts: actionResolvers.FindManyAccountResolver,
    createAccount: actionResolvers.CreateAccountResolver,
    createManyAccount: actionResolvers.CreateManyAccountResolver,
    deleteAccount: actionResolvers.DeleteAccountResolver,
    updateAccount: actionResolvers.UpdateAccountResolver,
    deleteManyAccount: actionResolvers.DeleteManyAccountResolver,
    updateManyAccount: actionResolvers.UpdateManyAccountResolver,
    upsertAccount: actionResolvers.UpsertAccountResolver,
    aggregateAccount: actionResolvers.AggregateAccountResolver,
    groupByAccount: actionResolvers.GroupByAccountResolver
  },
  Token: {
    token: actionResolvers.FindUniqueTokenResolver,
    findFirstToken: actionResolvers.FindFirstTokenResolver,
    tokens: actionResolvers.FindManyTokenResolver,
    createToken: actionResolvers.CreateTokenResolver,
    createManyToken: actionResolvers.CreateManyTokenResolver,
    deleteToken: actionResolvers.DeleteTokenResolver,
    updateToken: actionResolvers.UpdateTokenResolver,
    deleteManyToken: actionResolvers.DeleteManyTokenResolver,
    updateManyToken: actionResolvers.UpdateManyTokenResolver,
    upsertToken: actionResolvers.UpsertTokenResolver,
    aggregateToken: actionResolvers.AggregateTokenResolver,
    groupByToken: actionResolvers.GroupByTokenResolver
  },
  Salt: {
    salt: actionResolvers.FindUniqueSaltResolver,
    findFirstSalt: actionResolvers.FindFirstSaltResolver,
    salts: actionResolvers.FindManySaltResolver,
    createSalt: actionResolvers.CreateSaltResolver,
    createManySalt: actionResolvers.CreateManySaltResolver,
    deleteSalt: actionResolvers.DeleteSaltResolver,
    updateSalt: actionResolvers.UpdateSaltResolver,
    deleteManySalt: actionResolvers.DeleteManySaltResolver,
    updateManySalt: actionResolvers.UpdateManySaltResolver,
    upsertSalt: actionResolvers.UpsertSaltResolver,
    aggregateSalt: actionResolvers.AggregateSaltResolver,
    groupBySalt: actionResolvers.GroupBySaltResolver
  },
  SubuserOnAccount: {
    subuserOnAccount: actionResolvers.FindUniqueSubuserOnAccountResolver,
    findFirstSubuserOnAccount: actionResolvers.FindFirstSubuserOnAccountResolver,
    subuserOnAccounts: actionResolvers.FindManySubuserOnAccountResolver,
    createSubuserOnAccount: actionResolvers.CreateSubuserOnAccountResolver,
    createManySubuserOnAccount: actionResolvers.CreateManySubuserOnAccountResolver,
    deleteSubuserOnAccount: actionResolvers.DeleteSubuserOnAccountResolver,
    updateSubuserOnAccount: actionResolvers.UpdateSubuserOnAccountResolver,
    deleteManySubuserOnAccount: actionResolvers.DeleteManySubuserOnAccountResolver,
    updateManySubuserOnAccount: actionResolvers.UpdateManySubuserOnAccountResolver,
    upsertSubuserOnAccount: actionResolvers.UpsertSubuserOnAccountResolver,
    aggregateSubuserOnAccount: actionResolvers.AggregateSubuserOnAccountResolver,
    groupBySubuserOnAccount: actionResolvers.GroupBySubuserOnAccountResolver
  },
  EmployersOnAccount: {
    employersOnAccount: actionResolvers.FindUniqueEmployersOnAccountResolver,
    findFirstEmployersOnAccount: actionResolvers.FindFirstEmployersOnAccountResolver,
    employersOnAccounts: actionResolvers.FindManyEmployersOnAccountResolver,
    createEmployersOnAccount: actionResolvers.CreateEmployersOnAccountResolver,
    createManyEmployersOnAccount: actionResolvers.CreateManyEmployersOnAccountResolver,
    deleteEmployersOnAccount: actionResolvers.DeleteEmployersOnAccountResolver,
    updateEmployersOnAccount: actionResolvers.UpdateEmployersOnAccountResolver,
    deleteManyEmployersOnAccount: actionResolvers.DeleteManyEmployersOnAccountResolver,
    updateManyEmployersOnAccount: actionResolvers.UpdateManyEmployersOnAccountResolver,
    upsertEmployersOnAccount: actionResolvers.UpsertEmployersOnAccountResolver,
    aggregateEmployersOnAccount: actionResolvers.AggregateEmployersOnAccountResolver,
    groupByEmployersOnAccount: actionResolvers.GroupByEmployersOnAccountResolver
  },
  ManagersOnAccount: {
    managersOnAccount: actionResolvers.FindUniqueManagersOnAccountResolver,
    findFirstManagersOnAccount: actionResolvers.FindFirstManagersOnAccountResolver,
    managersOnAccounts: actionResolvers.FindManyManagersOnAccountResolver,
    createManagersOnAccount: actionResolvers.CreateManagersOnAccountResolver,
    createManyManagersOnAccount: actionResolvers.CreateManyManagersOnAccountResolver,
    deleteManagersOnAccount: actionResolvers.DeleteManagersOnAccountResolver,
    updateManagersOnAccount: actionResolvers.UpdateManagersOnAccountResolver,
    deleteManyManagersOnAccount: actionResolvers.DeleteManyManagersOnAccountResolver,
    updateManyManagersOnAccount: actionResolvers.UpdateManyManagersOnAccountResolver,
    upsertManagersOnAccount: actionResolvers.UpsertManagersOnAccountResolver,
    aggregateManagersOnAccount: actionResolvers.AggregateManagersOnAccountResolver,
    groupByManagersOnAccount: actionResolvers.GroupByManagersOnAccountResolver
  },
  Address: {
    address: actionResolvers.FindUniqueAddressResolver,
    findFirstAddress: actionResolvers.FindFirstAddressResolver,
    addresses: actionResolvers.FindManyAddressResolver,
    createAddress: actionResolvers.CreateAddressResolver,
    createManyAddress: actionResolvers.CreateManyAddressResolver,
    deleteAddress: actionResolvers.DeleteAddressResolver,
    updateAddress: actionResolvers.UpdateAddressResolver,
    deleteManyAddress: actionResolvers.DeleteManyAddressResolver,
    updateManyAddress: actionResolvers.UpdateManyAddressResolver,
    upsertAddress: actionResolvers.UpsertAddressResolver,
    aggregateAddress: actionResolvers.AggregateAddressResolver,
    groupByAddress: actionResolvers.GroupByAddressResolver
  },
  ContactAtAddress: {
    contactAtAddress: actionResolvers.FindUniqueContactAtAddressResolver,
    findFirstContactAtAddress: actionResolvers.FindFirstContactAtAddressResolver,
    contactAtAddresses: actionResolvers.FindManyContactAtAddressResolver,
    createContactAtAddress: actionResolvers.CreateContactAtAddressResolver,
    createManyContactAtAddress: actionResolvers.CreateManyContactAtAddressResolver,
    deleteContactAtAddress: actionResolvers.DeleteContactAtAddressResolver,
    updateContactAtAddress: actionResolvers.UpdateContactAtAddressResolver,
    deleteManyContactAtAddress: actionResolvers.DeleteManyContactAtAddressResolver,
    updateManyContactAtAddress: actionResolvers.UpdateManyContactAtAddressResolver,
    upsertContactAtAddress: actionResolvers.UpsertContactAtAddressResolver,
    aggregateContactAtAddress: actionResolvers.AggregateContactAtAddressResolver,
    groupByContactAtAddress: actionResolvers.GroupByContactAtAddressResolver
  },
  VenueStyle: {
    venueStyle: actionResolvers.FindUniqueVenueStyleResolver,
    findFirstVenueStyle: actionResolvers.FindFirstVenueStyleResolver,
    venueStyles: actionResolvers.FindManyVenueStyleResolver,
    createVenueStyle: actionResolvers.CreateVenueStyleResolver,
    createManyVenueStyle: actionResolvers.CreateManyVenueStyleResolver,
    deleteVenueStyle: actionResolvers.DeleteVenueStyleResolver,
    updateVenueStyle: actionResolvers.UpdateVenueStyleResolver,
    deleteManyVenueStyle: actionResolvers.DeleteManyVenueStyleResolver,
    updateManyVenueStyle: actionResolvers.UpdateManyVenueStyleResolver,
    upsertVenueStyle: actionResolvers.UpsertVenueStyleResolver,
    aggregateVenueStyle: actionResolvers.AggregateVenueStyleResolver,
    groupByVenueStyle: actionResolvers.GroupByVenueStyleResolver
  },
  Email: {
    email: actionResolvers.FindUniqueEmailResolver,
    findFirstEmail: actionResolvers.FindFirstEmailResolver,
    emails: actionResolvers.FindManyEmailResolver,
    createEmail: actionResolvers.CreateEmailResolver,
    createManyEmail: actionResolvers.CreateManyEmailResolver,
    deleteEmail: actionResolvers.DeleteEmailResolver,
    updateEmail: actionResolvers.UpdateEmailResolver,
    deleteManyEmail: actionResolvers.DeleteManyEmailResolver,
    updateManyEmail: actionResolvers.UpdateManyEmailResolver,
    upsertEmail: actionResolvers.UpsertEmailResolver,
    aggregateEmail: actionResolvers.AggregateEmailResolver,
    groupByEmail: actionResolvers.GroupByEmailResolver
  },
  Application: {
    application: actionResolvers.FindUniqueApplicationResolver,
    findFirstApplication: actionResolvers.FindFirstApplicationResolver,
    applications: actionResolvers.FindManyApplicationResolver,
    createApplication: actionResolvers.CreateApplicationResolver,
    createManyApplication: actionResolvers.CreateManyApplicationResolver,
    deleteApplication: actionResolvers.DeleteApplicationResolver,
    updateApplication: actionResolvers.UpdateApplicationResolver,
    deleteManyApplication: actionResolvers.DeleteManyApplicationResolver,
    updateManyApplication: actionResolvers.UpdateManyApplicationResolver,
    upsertApplication: actionResolvers.UpsertApplicationResolver,
    aggregateApplication: actionResolvers.AggregateApplicationResolver,
    groupByApplication: actionResolvers.GroupByApplicationResolver
  },
  Domain: {
    domain: actionResolvers.FindUniqueDomainResolver,
    findFirstDomain: actionResolvers.FindFirstDomainResolver,
    domains: actionResolvers.FindManyDomainResolver,
    createDomain: actionResolvers.CreateDomainResolver,
    createManyDomain: actionResolvers.CreateManyDomainResolver,
    deleteDomain: actionResolvers.DeleteDomainResolver,
    updateDomain: actionResolvers.UpdateDomainResolver,
    deleteManyDomain: actionResolvers.DeleteManyDomainResolver,
    updateManyDomain: actionResolvers.UpdateManyDomainResolver,
    upsertDomain: actionResolvers.UpsertDomainResolver,
    aggregateDomain: actionResolvers.AggregateDomainResolver,
    groupByDomain: actionResolvers.GroupByDomainResolver
  },
  Feature: {
    feature: actionResolvers.FindUniqueFeatureResolver,
    findFirstFeature: actionResolvers.FindFirstFeatureResolver,
    features: actionResolvers.FindManyFeatureResolver,
    createFeature: actionResolvers.CreateFeatureResolver,
    createManyFeature: actionResolvers.CreateManyFeatureResolver,
    deleteFeature: actionResolvers.DeleteFeatureResolver,
    updateFeature: actionResolvers.UpdateFeatureResolver,
    deleteManyFeature: actionResolvers.DeleteManyFeatureResolver,
    updateManyFeature: actionResolvers.UpdateManyFeatureResolver,
    upsertFeature: actionResolvers.UpsertFeatureResolver,
    aggregateFeature: actionResolvers.AggregateFeatureResolver,
    groupByFeature: actionResolvers.GroupByFeatureResolver
  },
  FeatureOfRoom: {
    featureOfRoom: actionResolvers.FindUniqueFeatureOfRoomResolver,
    findFirstFeatureOfRoom: actionResolvers.FindFirstFeatureOfRoomResolver,
    featureOfRooms: actionResolvers.FindManyFeatureOfRoomResolver,
    createFeatureOfRoom: actionResolvers.CreateFeatureOfRoomResolver,
    createManyFeatureOfRoom: actionResolvers.CreateManyFeatureOfRoomResolver,
    deleteFeatureOfRoom: actionResolvers.DeleteFeatureOfRoomResolver,
    updateFeatureOfRoom: actionResolvers.UpdateFeatureOfRoomResolver,
    deleteManyFeatureOfRoom: actionResolvers.DeleteManyFeatureOfRoomResolver,
    updateManyFeatureOfRoom: actionResolvers.UpdateManyFeatureOfRoomResolver,
    upsertFeatureOfRoom: actionResolvers.UpsertFeatureOfRoomResolver,
    aggregateFeatureOfRoom: actionResolvers.AggregateFeatureOfRoomResolver,
    groupByFeatureOfRoom: actionResolvers.GroupByFeatureOfRoomResolver
  },
  FeatureOfAddress: {
    featureOfAddress: actionResolvers.FindUniqueFeatureOfAddressResolver,
    findFirstFeatureOfAddress: actionResolvers.FindFirstFeatureOfAddressResolver,
    featureOfAddresses: actionResolvers.FindManyFeatureOfAddressResolver,
    createFeatureOfAddress: actionResolvers.CreateFeatureOfAddressResolver,
    createManyFeatureOfAddress: actionResolvers.CreateManyFeatureOfAddressResolver,
    deleteFeatureOfAddress: actionResolvers.DeleteFeatureOfAddressResolver,
    updateFeatureOfAddress: actionResolvers.UpdateFeatureOfAddressResolver,
    deleteManyFeatureOfAddress: actionResolvers.DeleteManyFeatureOfAddressResolver,
    updateManyFeatureOfAddress: actionResolvers.UpdateManyFeatureOfAddressResolver,
    upsertFeatureOfAddress: actionResolvers.UpsertFeatureOfAddressResolver,
    aggregateFeatureOfAddress: actionResolvers.AggregateFeatureOfAddressResolver,
    groupByFeatureOfAddress: actionResolvers.GroupByFeatureOfAddressResolver
  },
  Room: {
    room: actionResolvers.FindUniqueRoomResolver,
    findFirstRoom: actionResolvers.FindFirstRoomResolver,
    rooms: actionResolvers.FindManyRoomResolver,
    createRoom: actionResolvers.CreateRoomResolver,
    createManyRoom: actionResolvers.CreateManyRoomResolver,
    deleteRoom: actionResolvers.DeleteRoomResolver,
    updateRoom: actionResolvers.UpdateRoomResolver,
    deleteManyRoom: actionResolvers.DeleteManyRoomResolver,
    updateManyRoom: actionResolvers.UpdateManyRoomResolver,
    upsertRoom: actionResolvers.UpsertRoomResolver,
    aggregateRoom: actionResolvers.AggregateRoomResolver,
    groupByRoom: actionResolvers.GroupByRoomResolver
  },
  Files: {
    findUniqueFiles: actionResolvers.FindUniqueFilesResolver,
    findFirstFiles: actionResolvers.FindFirstFilesResolver,
    findManyFiles: actionResolvers.FindManyFilesResolver,
    createFiles: actionResolvers.CreateFilesResolver,
    createManyFiles: actionResolvers.CreateManyFilesResolver,
    deleteFiles: actionResolvers.DeleteFilesResolver,
    updateFiles: actionResolvers.UpdateFilesResolver,
    deleteManyFiles: actionResolvers.DeleteManyFilesResolver,
    updateManyFiles: actionResolvers.UpdateManyFilesResolver,
    upsertFiles: actionResolvers.UpsertFilesResolver,
    aggregateFiles: actionResolvers.AggregateFilesResolver,
    groupByFiles: actionResolvers.GroupByFilesResolver
  },
  RTW: {
    rTW: actionResolvers.FindUniqueRTWResolver,
    findFirstRTW: actionResolvers.FindFirstRTWResolver,
    rTWS: actionResolvers.FindManyRTWResolver,
    createRTW: actionResolvers.CreateRTWResolver,
    createManyRTW: actionResolvers.CreateManyRTWResolver,
    deleteRTW: actionResolvers.DeleteRTWResolver,
    updateRTW: actionResolvers.UpdateRTWResolver,
    deleteManyRTW: actionResolvers.DeleteManyRTWResolver,
    updateManyRTW: actionResolvers.UpdateManyRTWResolver,
    upsertRTW: actionResolvers.UpsertRTWResolver,
    aggregateRTW: actionResolvers.AggregateRTWResolver,
    groupByRTW: actionResolvers.GroupByRTWResolver
  },
  Phone: {
    phone: actionResolvers.FindUniquePhoneResolver,
    findFirstPhone: actionResolvers.FindFirstPhoneResolver,
    phones: actionResolvers.FindManyPhoneResolver,
    createPhone: actionResolvers.CreatePhoneResolver,
    createManyPhone: actionResolvers.CreateManyPhoneResolver,
    deletePhone: actionResolvers.DeletePhoneResolver,
    updatePhone: actionResolvers.UpdatePhoneResolver,
    deleteManyPhone: actionResolvers.DeleteManyPhoneResolver,
    updateManyPhone: actionResolvers.UpdateManyPhoneResolver,
    upsertPhone: actionResolvers.UpsertPhoneResolver,
    aggregatePhone: actionResolvers.AggregatePhoneResolver,
    groupByPhone: actionResolvers.GroupByPhoneResolver
  },
  ArrangementOfRoom: {
    arrangementOfRoom: actionResolvers.FindUniqueArrangementOfRoomResolver,
    findFirstArrangementOfRoom: actionResolvers.FindFirstArrangementOfRoomResolver,
    arrangementOfRooms: actionResolvers.FindManyArrangementOfRoomResolver,
    createArrangementOfRoom: actionResolvers.CreateArrangementOfRoomResolver,
    createManyArrangementOfRoom: actionResolvers.CreateManyArrangementOfRoomResolver,
    deleteArrangementOfRoom: actionResolvers.DeleteArrangementOfRoomResolver,
    updateArrangementOfRoom: actionResolvers.UpdateArrangementOfRoomResolver,
    deleteManyArrangementOfRoom: actionResolvers.DeleteManyArrangementOfRoomResolver,
    updateManyArrangementOfRoom: actionResolvers.UpdateManyArrangementOfRoomResolver,
    upsertArrangementOfRoom: actionResolvers.UpsertArrangementOfRoomResolver,
    aggregateArrangementOfRoom: actionResolvers.AggregateArrangementOfRoomResolver,
    groupByArrangementOfRoom: actionResolvers.GroupByArrangementOfRoomResolver
  },
  Arrangement: {
    arrangement: actionResolvers.FindUniqueArrangementResolver,
    findFirstArrangement: actionResolvers.FindFirstArrangementResolver,
    arrangements: actionResolvers.FindManyArrangementResolver,
    createArrangement: actionResolvers.CreateArrangementResolver,
    createManyArrangement: actionResolvers.CreateManyArrangementResolver,
    deleteArrangement: actionResolvers.DeleteArrangementResolver,
    updateArrangement: actionResolvers.UpdateArrangementResolver,
    deleteManyArrangement: actionResolvers.DeleteManyArrangementResolver,
    updateManyArrangement: actionResolvers.UpdateManyArrangementResolver,
    upsertArrangement: actionResolvers.UpsertArrangementResolver,
    aggregateArrangement: actionResolvers.AggregateArrangementResolver,
    groupByArrangement: actionResolvers.GroupByArrangementResolver
  },
  SIABadge: {
    sIABadge: actionResolvers.FindUniqueSIABadgeResolver,
    findFirstSIABadge: actionResolvers.FindFirstSIABadgeResolver,
    sIABadges: actionResolvers.FindManySIABadgeResolver,
    createSIABadge: actionResolvers.CreateSIABadgeResolver,
    createManySIABadge: actionResolvers.CreateManySIABadgeResolver,
    deleteSIABadge: actionResolvers.DeleteSIABadgeResolver,
    updateSIABadge: actionResolvers.UpdateSIABadgeResolver,
    deleteManySIABadge: actionResolvers.DeleteManySIABadgeResolver,
    updateManySIABadge: actionResolvers.UpdateManySIABadgeResolver,
    upsertSIABadge: actionResolvers.UpsertSIABadgeResolver,
    aggregateSIABadge: actionResolvers.AggregateSIABadgeResolver,
    groupBySIABadge: actionResolvers.GroupBySIABadgeResolver
  },
  SIACheck: {
    sIACheck: actionResolvers.FindUniqueSIACheckResolver,
    findFirstSIACheck: actionResolvers.FindFirstSIACheckResolver,
    sIAChecks: actionResolvers.FindManySIACheckResolver,
    createSIACheck: actionResolvers.CreateSIACheckResolver,
    createManySIACheck: actionResolvers.CreateManySIACheckResolver,
    deleteSIACheck: actionResolvers.DeleteSIACheckResolver,
    updateSIACheck: actionResolvers.UpdateSIACheckResolver,
    deleteManySIACheck: actionResolvers.DeleteManySIACheckResolver,
    updateManySIACheck: actionResolvers.UpdateManySIACheckResolver,
    upsertSIACheck: actionResolvers.UpsertSIACheckResolver,
    aggregateSIACheck: actionResolvers.AggregateSIACheckResolver,
    groupBySIACheck: actionResolvers.GroupBySIACheckResolver
  },
  StatusOnAccount: {
    statusOnAccount: actionResolvers.FindUniqueStatusOnAccountResolver,
    findFirstStatusOnAccount: actionResolvers.FindFirstStatusOnAccountResolver,
    statusOnAccounts: actionResolvers.FindManyStatusOnAccountResolver,
    createStatusOnAccount: actionResolvers.CreateStatusOnAccountResolver,
    createManyStatusOnAccount: actionResolvers.CreateManyStatusOnAccountResolver,
    deleteStatusOnAccount: actionResolvers.DeleteStatusOnAccountResolver,
    updateStatusOnAccount: actionResolvers.UpdateStatusOnAccountResolver,
    deleteManyStatusOnAccount: actionResolvers.DeleteManyStatusOnAccountResolver,
    updateManyStatusOnAccount: actionResolvers.UpdateManyStatusOnAccountResolver,
    upsertStatusOnAccount: actionResolvers.UpsertStatusOnAccountResolver,
    aggregateStatusOnAccount: actionResolvers.AggregateStatusOnAccountResolver,
    groupByStatusOnAccount: actionResolvers.GroupByStatusOnAccountResolver
  },
  Status: {
    status: actionResolvers.FindUniqueStatusResolver,
    findFirstStatus: actionResolvers.FindFirstStatusResolver,
    statuses: actionResolvers.FindManyStatusResolver,
    createStatus: actionResolvers.CreateStatusResolver,
    createManyStatus: actionResolvers.CreateManyStatusResolver,
    deleteStatus: actionResolvers.DeleteStatusResolver,
    updateStatus: actionResolvers.UpdateStatusResolver,
    deleteManyStatus: actionResolvers.DeleteManyStatusResolver,
    updateManyStatus: actionResolvers.UpdateManyStatusResolver,
    upsertStatus: actionResolvers.UpsertStatusResolver,
    aggregateStatus: actionResolvers.AggregateStatusResolver,
    groupByStatus: actionResolvers.GroupByStatusResolver
  },
  Subscription: {
    subscription: actionResolvers.FindUniqueSubscriptionResolver,
    findFirstSubscription: actionResolvers.FindFirstSubscriptionResolver,
    subscriptions: actionResolvers.FindManySubscriptionResolver,
    createSubscription: actionResolvers.CreateSubscriptionResolver,
    createManySubscription: actionResolvers.CreateManySubscriptionResolver,
    deleteSubscription: actionResolvers.DeleteSubscriptionResolver,
    updateSubscription: actionResolvers.UpdateSubscriptionResolver,
    deleteManySubscription: actionResolvers.DeleteManySubscriptionResolver,
    updateManySubscription: actionResolvers.UpdateManySubscriptionResolver,
    upsertSubscription: actionResolvers.UpsertSubscriptionResolver,
    aggregateSubscription: actionResolvers.AggregateSubscriptionResolver,
    groupBySubscription: actionResolvers.GroupBySubscriptionResolver
  },
  SubscriptionOnAccount: {
    subscriptionOnAccount: actionResolvers.FindUniqueSubscriptionOnAccountResolver,
    findFirstSubscriptionOnAccount: actionResolvers.FindFirstSubscriptionOnAccountResolver,
    subscriptionOnAccounts: actionResolvers.FindManySubscriptionOnAccountResolver,
    createSubscriptionOnAccount: actionResolvers.CreateSubscriptionOnAccountResolver,
    createManySubscriptionOnAccount: actionResolvers.CreateManySubscriptionOnAccountResolver,
    deleteSubscriptionOnAccount: actionResolvers.DeleteSubscriptionOnAccountResolver,
    updateSubscriptionOnAccount: actionResolvers.UpdateSubscriptionOnAccountResolver,
    deleteManySubscriptionOnAccount: actionResolvers.DeleteManySubscriptionOnAccountResolver,
    updateManySubscriptionOnAccount: actionResolvers.UpdateManySubscriptionOnAccountResolver,
    upsertSubscriptionOnAccount: actionResolvers.UpsertSubscriptionOnAccountResolver,
    aggregateSubscriptionOnAccount: actionResolvers.AggregateSubscriptionOnAccountResolver,
    groupBySubscriptionOnAccount: actionResolvers.GroupBySubscriptionOnAccountResolver
  },
  Transaction: {
    transaction: actionResolvers.FindUniqueTransactionResolver,
    findFirstTransaction: actionResolvers.FindFirstTransactionResolver,
    transactions: actionResolvers.FindManyTransactionResolver,
    createTransaction: actionResolvers.CreateTransactionResolver,
    createManyTransaction: actionResolvers.CreateManyTransactionResolver,
    deleteTransaction: actionResolvers.DeleteTransactionResolver,
    updateTransaction: actionResolvers.UpdateTransactionResolver,
    deleteManyTransaction: actionResolvers.DeleteManyTransactionResolver,
    updateManyTransaction: actionResolvers.UpdateManyTransactionResolver,
    upsertTransaction: actionResolvers.UpsertTransactionResolver,
    aggregateTransaction: actionResolvers.AggregateTransactionResolver,
    groupByTransaction: actionResolvers.GroupByTransactionResolver
  }
};
const crudResolversInfo = {
  Account: ["account", "findFirstAccount", "accounts", "createAccount", "createManyAccount", "deleteAccount", "updateAccount", "deleteManyAccount", "updateManyAccount", "upsertAccount", "aggregateAccount", "groupByAccount"],
  Token: ["token", "findFirstToken", "tokens", "createToken", "createManyToken", "deleteToken", "updateToken", "deleteManyToken", "updateManyToken", "upsertToken", "aggregateToken", "groupByToken"],
  Salt: ["salt", "findFirstSalt", "salts", "createSalt", "createManySalt", "deleteSalt", "updateSalt", "deleteManySalt", "updateManySalt", "upsertSalt", "aggregateSalt", "groupBySalt"],
  SubuserOnAccount: ["subuserOnAccount", "findFirstSubuserOnAccount", "subuserOnAccounts", "createSubuserOnAccount", "createManySubuserOnAccount", "deleteSubuserOnAccount", "updateSubuserOnAccount", "deleteManySubuserOnAccount", "updateManySubuserOnAccount", "upsertSubuserOnAccount", "aggregateSubuserOnAccount", "groupBySubuserOnAccount"],
  EmployersOnAccount: ["employersOnAccount", "findFirstEmployersOnAccount", "employersOnAccounts", "createEmployersOnAccount", "createManyEmployersOnAccount", "deleteEmployersOnAccount", "updateEmployersOnAccount", "deleteManyEmployersOnAccount", "updateManyEmployersOnAccount", "upsertEmployersOnAccount", "aggregateEmployersOnAccount", "groupByEmployersOnAccount"],
  ManagersOnAccount: ["managersOnAccount", "findFirstManagersOnAccount", "managersOnAccounts", "createManagersOnAccount", "createManyManagersOnAccount", "deleteManagersOnAccount", "updateManagersOnAccount", "deleteManyManagersOnAccount", "updateManyManagersOnAccount", "upsertManagersOnAccount", "aggregateManagersOnAccount", "groupByManagersOnAccount"],
  Address: ["address", "findFirstAddress", "addresses", "createAddress", "createManyAddress", "deleteAddress", "updateAddress", "deleteManyAddress", "updateManyAddress", "upsertAddress", "aggregateAddress", "groupByAddress"],
  ContactAtAddress: ["contactAtAddress", "findFirstContactAtAddress", "contactAtAddresses", "createContactAtAddress", "createManyContactAtAddress", "deleteContactAtAddress", "updateContactAtAddress", "deleteManyContactAtAddress", "updateManyContactAtAddress", "upsertContactAtAddress", "aggregateContactAtAddress", "groupByContactAtAddress"],
  VenueStyle: ["venueStyle", "findFirstVenueStyle", "venueStyles", "createVenueStyle", "createManyVenueStyle", "deleteVenueStyle", "updateVenueStyle", "deleteManyVenueStyle", "updateManyVenueStyle", "upsertVenueStyle", "aggregateVenueStyle", "groupByVenueStyle"],
  Email: ["email", "findFirstEmail", "emails", "createEmail", "createManyEmail", "deleteEmail", "updateEmail", "deleteManyEmail", "updateManyEmail", "upsertEmail", "aggregateEmail", "groupByEmail"],
  Application: ["application", "findFirstApplication", "applications", "createApplication", "createManyApplication", "deleteApplication", "updateApplication", "deleteManyApplication", "updateManyApplication", "upsertApplication", "aggregateApplication", "groupByApplication"],
  Domain: ["domain", "findFirstDomain", "domains", "createDomain", "createManyDomain", "deleteDomain", "updateDomain", "deleteManyDomain", "updateManyDomain", "upsertDomain", "aggregateDomain", "groupByDomain"],
  Feature: ["feature", "findFirstFeature", "features", "createFeature", "createManyFeature", "deleteFeature", "updateFeature", "deleteManyFeature", "updateManyFeature", "upsertFeature", "aggregateFeature", "groupByFeature"],
  FeatureOfRoom: ["featureOfRoom", "findFirstFeatureOfRoom", "featureOfRooms", "createFeatureOfRoom", "createManyFeatureOfRoom", "deleteFeatureOfRoom", "updateFeatureOfRoom", "deleteManyFeatureOfRoom", "updateManyFeatureOfRoom", "upsertFeatureOfRoom", "aggregateFeatureOfRoom", "groupByFeatureOfRoom"],
  FeatureOfAddress: ["featureOfAddress", "findFirstFeatureOfAddress", "featureOfAddresses", "createFeatureOfAddress", "createManyFeatureOfAddress", "deleteFeatureOfAddress", "updateFeatureOfAddress", "deleteManyFeatureOfAddress", "updateManyFeatureOfAddress", "upsertFeatureOfAddress", "aggregateFeatureOfAddress", "groupByFeatureOfAddress"],
  Room: ["room", "findFirstRoom", "rooms", "createRoom", "createManyRoom", "deleteRoom", "updateRoom", "deleteManyRoom", "updateManyRoom", "upsertRoom", "aggregateRoom", "groupByRoom"],
  Files: ["findUniqueFiles", "findFirstFiles", "findManyFiles", "createFiles", "createManyFiles", "deleteFiles", "updateFiles", "deleteManyFiles", "updateManyFiles", "upsertFiles", "aggregateFiles", "groupByFiles"],
  RTW: ["rTW", "findFirstRTW", "rTWS", "createRTW", "createManyRTW", "deleteRTW", "updateRTW", "deleteManyRTW", "updateManyRTW", "upsertRTW", "aggregateRTW", "groupByRTW"],
  Phone: ["phone", "findFirstPhone", "phones", "createPhone", "createManyPhone", "deletePhone", "updatePhone", "deleteManyPhone", "updateManyPhone", "upsertPhone", "aggregatePhone", "groupByPhone"],
  ArrangementOfRoom: ["arrangementOfRoom", "findFirstArrangementOfRoom", "arrangementOfRooms", "createArrangementOfRoom", "createManyArrangementOfRoom", "deleteArrangementOfRoom", "updateArrangementOfRoom", "deleteManyArrangementOfRoom", "updateManyArrangementOfRoom", "upsertArrangementOfRoom", "aggregateArrangementOfRoom", "groupByArrangementOfRoom"],
  Arrangement: ["arrangement", "findFirstArrangement", "arrangements", "createArrangement", "createManyArrangement", "deleteArrangement", "updateArrangement", "deleteManyArrangement", "updateManyArrangement", "upsertArrangement", "aggregateArrangement", "groupByArrangement"],
  SIABadge: ["sIABadge", "findFirstSIABadge", "sIABadges", "createSIABadge", "createManySIABadge", "deleteSIABadge", "updateSIABadge", "deleteManySIABadge", "updateManySIABadge", "upsertSIABadge", "aggregateSIABadge", "groupBySIABadge"],
  SIACheck: ["sIACheck", "findFirstSIACheck", "sIAChecks", "createSIACheck", "createManySIACheck", "deleteSIACheck", "updateSIACheck", "deleteManySIACheck", "updateManySIACheck", "upsertSIACheck", "aggregateSIACheck", "groupBySIACheck"],
  StatusOnAccount: ["statusOnAccount", "findFirstStatusOnAccount", "statusOnAccounts", "createStatusOnAccount", "createManyStatusOnAccount", "deleteStatusOnAccount", "updateStatusOnAccount", "deleteManyStatusOnAccount", "updateManyStatusOnAccount", "upsertStatusOnAccount", "aggregateStatusOnAccount", "groupByStatusOnAccount"],
  Status: ["status", "findFirstStatus", "statuses", "createStatus", "createManyStatus", "deleteStatus", "updateStatus", "deleteManyStatus", "updateManyStatus", "upsertStatus", "aggregateStatus", "groupByStatus"],
  Subscription: ["subscription", "findFirstSubscription", "subscriptions", "createSubscription", "createManySubscription", "deleteSubscription", "updateSubscription", "deleteManySubscription", "updateManySubscription", "upsertSubscription", "aggregateSubscription", "groupBySubscription"],
  SubscriptionOnAccount: ["subscriptionOnAccount", "findFirstSubscriptionOnAccount", "subscriptionOnAccounts", "createSubscriptionOnAccount", "createManySubscriptionOnAccount", "deleteSubscriptionOnAccount", "updateSubscriptionOnAccount", "deleteManySubscriptionOnAccount", "updateManySubscriptionOnAccount", "upsertSubscriptionOnAccount", "aggregateSubscriptionOnAccount", "groupBySubscriptionOnAccount"],
  Transaction: ["transaction", "findFirstTransaction", "transactions", "createTransaction", "createManyTransaction", "deleteTransaction", "updateTransaction", "deleteManyTransaction", "updateManyTransaction", "upsertTransaction", "aggregateTransaction", "groupByTransaction"]
};
const argsInfo = {
  FindUniqueAccountArgs: ["where"],
  FindFirstAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateAccountArgs: ["data"],
  CreateManyAccountArgs: ["data", "skipDuplicates"],
  DeleteAccountArgs: ["where"],
  UpdateAccountArgs: ["data", "where"],
  DeleteManyAccountArgs: ["where"],
  UpdateManyAccountArgs: ["data", "where"],
  UpsertAccountArgs: ["where", "create", "update"],
  AggregateAccountArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByAccountArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueTokenArgs: ["where"],
  FindFirstTokenArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyTokenArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateTokenArgs: ["data"],
  CreateManyTokenArgs: ["data", "skipDuplicates"],
  DeleteTokenArgs: ["where"],
  UpdateTokenArgs: ["data", "where"],
  DeleteManyTokenArgs: ["where"],
  UpdateManyTokenArgs: ["data", "where"],
  UpsertTokenArgs: ["where", "create", "update"],
  AggregateTokenArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByTokenArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueSaltArgs: ["where"],
  FindFirstSaltArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManySaltArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateSaltArgs: ["data"],
  CreateManySaltArgs: ["data", "skipDuplicates"],
  DeleteSaltArgs: ["where"],
  UpdateSaltArgs: ["data", "where"],
  DeleteManySaltArgs: ["where"],
  UpdateManySaltArgs: ["data", "where"],
  UpsertSaltArgs: ["where", "create", "update"],
  AggregateSaltArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupBySaltArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueSubuserOnAccountArgs: ["where"],
  FindFirstSubuserOnAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManySubuserOnAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateSubuserOnAccountArgs: ["data"],
  CreateManySubuserOnAccountArgs: ["data", "skipDuplicates"],
  DeleteSubuserOnAccountArgs: ["where"],
  UpdateSubuserOnAccountArgs: ["data", "where"],
  DeleteManySubuserOnAccountArgs: ["where"],
  UpdateManySubuserOnAccountArgs: ["data", "where"],
  UpsertSubuserOnAccountArgs: ["where", "create", "update"],
  AggregateSubuserOnAccountArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupBySubuserOnAccountArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueEmployersOnAccountArgs: ["where"],
  FindFirstEmployersOnAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyEmployersOnAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateEmployersOnAccountArgs: ["data"],
  CreateManyEmployersOnAccountArgs: ["data", "skipDuplicates"],
  DeleteEmployersOnAccountArgs: ["where"],
  UpdateEmployersOnAccountArgs: ["data", "where"],
  DeleteManyEmployersOnAccountArgs: ["where"],
  UpdateManyEmployersOnAccountArgs: ["data", "where"],
  UpsertEmployersOnAccountArgs: ["where", "create", "update"],
  AggregateEmployersOnAccountArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByEmployersOnAccountArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueManagersOnAccountArgs: ["where"],
  FindFirstManagersOnAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyManagersOnAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateManagersOnAccountArgs: ["data"],
  CreateManyManagersOnAccountArgs: ["data", "skipDuplicates"],
  DeleteManagersOnAccountArgs: ["where"],
  UpdateManagersOnAccountArgs: ["data", "where"],
  DeleteManyManagersOnAccountArgs: ["where"],
  UpdateManyManagersOnAccountArgs: ["data", "where"],
  UpsertManagersOnAccountArgs: ["where", "create", "update"],
  AggregateManagersOnAccountArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByManagersOnAccountArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueAddressArgs: ["where"],
  FindFirstAddressArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyAddressArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateAddressArgs: ["data"],
  CreateManyAddressArgs: ["data", "skipDuplicates"],
  DeleteAddressArgs: ["where"],
  UpdateAddressArgs: ["data", "where"],
  DeleteManyAddressArgs: ["where"],
  UpdateManyAddressArgs: ["data", "where"],
  UpsertAddressArgs: ["where", "create", "update"],
  AggregateAddressArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByAddressArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueContactAtAddressArgs: ["where"],
  FindFirstContactAtAddressArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyContactAtAddressArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateContactAtAddressArgs: ["data"],
  CreateManyContactAtAddressArgs: ["data", "skipDuplicates"],
  DeleteContactAtAddressArgs: ["where"],
  UpdateContactAtAddressArgs: ["data", "where"],
  DeleteManyContactAtAddressArgs: ["where"],
  UpdateManyContactAtAddressArgs: ["data", "where"],
  UpsertContactAtAddressArgs: ["where", "create", "update"],
  AggregateContactAtAddressArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByContactAtAddressArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueVenueStyleArgs: ["where"],
  FindFirstVenueStyleArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyVenueStyleArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateVenueStyleArgs: ["data"],
  CreateManyVenueStyleArgs: ["data", "skipDuplicates"],
  DeleteVenueStyleArgs: ["where"],
  UpdateVenueStyleArgs: ["data", "where"],
  DeleteManyVenueStyleArgs: ["where"],
  UpdateManyVenueStyleArgs: ["data", "where"],
  UpsertVenueStyleArgs: ["where", "create", "update"],
  AggregateVenueStyleArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByVenueStyleArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueEmailArgs: ["where"],
  FindFirstEmailArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyEmailArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateEmailArgs: ["data"],
  CreateManyEmailArgs: ["data", "skipDuplicates"],
  DeleteEmailArgs: ["where"],
  UpdateEmailArgs: ["data", "where"],
  DeleteManyEmailArgs: ["where"],
  UpdateManyEmailArgs: ["data", "where"],
  UpsertEmailArgs: ["where", "create", "update"],
  AggregateEmailArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByEmailArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueApplicationArgs: ["where"],
  FindFirstApplicationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyApplicationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateApplicationArgs: ["data"],
  CreateManyApplicationArgs: ["data", "skipDuplicates"],
  DeleteApplicationArgs: ["where"],
  UpdateApplicationArgs: ["data", "where"],
  DeleteManyApplicationArgs: ["where"],
  UpdateManyApplicationArgs: ["data", "where"],
  UpsertApplicationArgs: ["where", "create", "update"],
  AggregateApplicationArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByApplicationArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueDomainArgs: ["where"],
  FindFirstDomainArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyDomainArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateDomainArgs: ["data"],
  CreateManyDomainArgs: ["data", "skipDuplicates"],
  DeleteDomainArgs: ["where"],
  UpdateDomainArgs: ["data", "where"],
  DeleteManyDomainArgs: ["where"],
  UpdateManyDomainArgs: ["data", "where"],
  UpsertDomainArgs: ["where", "create", "update"],
  AggregateDomainArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByDomainArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueFeatureArgs: ["where"],
  FindFirstFeatureArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyFeatureArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateFeatureArgs: ["data"],
  CreateManyFeatureArgs: ["data", "skipDuplicates"],
  DeleteFeatureArgs: ["where"],
  UpdateFeatureArgs: ["data", "where"],
  DeleteManyFeatureArgs: ["where"],
  UpdateManyFeatureArgs: ["data", "where"],
  UpsertFeatureArgs: ["where", "create", "update"],
  AggregateFeatureArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByFeatureArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueFeatureOfRoomArgs: ["where"],
  FindFirstFeatureOfRoomArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyFeatureOfRoomArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateFeatureOfRoomArgs: ["data"],
  CreateManyFeatureOfRoomArgs: ["data", "skipDuplicates"],
  DeleteFeatureOfRoomArgs: ["where"],
  UpdateFeatureOfRoomArgs: ["data", "where"],
  DeleteManyFeatureOfRoomArgs: ["where"],
  UpdateManyFeatureOfRoomArgs: ["data", "where"],
  UpsertFeatureOfRoomArgs: ["where", "create", "update"],
  AggregateFeatureOfRoomArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByFeatureOfRoomArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueFeatureOfAddressArgs: ["where"],
  FindFirstFeatureOfAddressArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyFeatureOfAddressArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateFeatureOfAddressArgs: ["data"],
  CreateManyFeatureOfAddressArgs: ["data", "skipDuplicates"],
  DeleteFeatureOfAddressArgs: ["where"],
  UpdateFeatureOfAddressArgs: ["data", "where"],
  DeleteManyFeatureOfAddressArgs: ["where"],
  UpdateManyFeatureOfAddressArgs: ["data", "where"],
  UpsertFeatureOfAddressArgs: ["where", "create", "update"],
  AggregateFeatureOfAddressArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByFeatureOfAddressArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueRoomArgs: ["where"],
  FindFirstRoomArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyRoomArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateRoomArgs: ["data"],
  CreateManyRoomArgs: ["data", "skipDuplicates"],
  DeleteRoomArgs: ["where"],
  UpdateRoomArgs: ["data", "where"],
  DeleteManyRoomArgs: ["where"],
  UpdateManyRoomArgs: ["data", "where"],
  UpsertRoomArgs: ["where", "create", "update"],
  AggregateRoomArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByRoomArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueFilesArgs: ["where"],
  FindFirstFilesArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyFilesArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateFilesArgs: ["data"],
  CreateManyFilesArgs: ["data", "skipDuplicates"],
  DeleteFilesArgs: ["where"],
  UpdateFilesArgs: ["data", "where"],
  DeleteManyFilesArgs: ["where"],
  UpdateManyFilesArgs: ["data", "where"],
  UpsertFilesArgs: ["where", "create", "update"],
  AggregateFilesArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByFilesArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueRTWArgs: ["where"],
  FindFirstRTWArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyRTWArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateRTWArgs: ["data"],
  CreateManyRTWArgs: ["data", "skipDuplicates"],
  DeleteRTWArgs: ["where"],
  UpdateRTWArgs: ["data", "where"],
  DeleteManyRTWArgs: ["where"],
  UpdateManyRTWArgs: ["data", "where"],
  UpsertRTWArgs: ["where", "create", "update"],
  AggregateRTWArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByRTWArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniquePhoneArgs: ["where"],
  FindFirstPhoneArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyPhoneArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreatePhoneArgs: ["data"],
  CreateManyPhoneArgs: ["data", "skipDuplicates"],
  DeletePhoneArgs: ["where"],
  UpdatePhoneArgs: ["data", "where"],
  DeleteManyPhoneArgs: ["where"],
  UpdateManyPhoneArgs: ["data", "where"],
  UpsertPhoneArgs: ["where", "create", "update"],
  AggregatePhoneArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByPhoneArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueArrangementOfRoomArgs: ["where"],
  FindFirstArrangementOfRoomArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyArrangementOfRoomArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateArrangementOfRoomArgs: ["data"],
  CreateManyArrangementOfRoomArgs: ["data", "skipDuplicates"],
  DeleteArrangementOfRoomArgs: ["where"],
  UpdateArrangementOfRoomArgs: ["data", "where"],
  DeleteManyArrangementOfRoomArgs: ["where"],
  UpdateManyArrangementOfRoomArgs: ["data", "where"],
  UpsertArrangementOfRoomArgs: ["where", "create", "update"],
  AggregateArrangementOfRoomArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByArrangementOfRoomArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueArrangementArgs: ["where"],
  FindFirstArrangementArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyArrangementArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateArrangementArgs: ["data"],
  CreateManyArrangementArgs: ["data", "skipDuplicates"],
  DeleteArrangementArgs: ["where"],
  UpdateArrangementArgs: ["data", "where"],
  DeleteManyArrangementArgs: ["where"],
  UpdateManyArrangementArgs: ["data", "where"],
  UpsertArrangementArgs: ["where", "create", "update"],
  AggregateArrangementArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByArrangementArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueSIABadgeArgs: ["where"],
  FindFirstSIABadgeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManySIABadgeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateSIABadgeArgs: ["data"],
  CreateManySIABadgeArgs: ["data", "skipDuplicates"],
  DeleteSIABadgeArgs: ["where"],
  UpdateSIABadgeArgs: ["data", "where"],
  DeleteManySIABadgeArgs: ["where"],
  UpdateManySIABadgeArgs: ["data", "where"],
  UpsertSIABadgeArgs: ["where", "create", "update"],
  AggregateSIABadgeArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupBySIABadgeArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueSIACheckArgs: ["where"],
  FindFirstSIACheckArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManySIACheckArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateSIACheckArgs: ["data"],
  CreateManySIACheckArgs: ["data", "skipDuplicates"],
  DeleteSIACheckArgs: ["where"],
  UpdateSIACheckArgs: ["data", "where"],
  DeleteManySIACheckArgs: ["where"],
  UpdateManySIACheckArgs: ["data", "where"],
  UpsertSIACheckArgs: ["where", "create", "update"],
  AggregateSIACheckArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupBySIACheckArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueStatusOnAccountArgs: ["where"],
  FindFirstStatusOnAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyStatusOnAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateStatusOnAccountArgs: ["data"],
  CreateManyStatusOnAccountArgs: ["data", "skipDuplicates"],
  DeleteStatusOnAccountArgs: ["where"],
  UpdateStatusOnAccountArgs: ["data", "where"],
  DeleteManyStatusOnAccountArgs: ["where"],
  UpdateManyStatusOnAccountArgs: ["data", "where"],
  UpsertStatusOnAccountArgs: ["where", "create", "update"],
  AggregateStatusOnAccountArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByStatusOnAccountArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueStatusArgs: ["where"],
  FindFirstStatusArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyStatusArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateStatusArgs: ["data"],
  CreateManyStatusArgs: ["data", "skipDuplicates"],
  DeleteStatusArgs: ["where"],
  UpdateStatusArgs: ["data", "where"],
  DeleteManyStatusArgs: ["where"],
  UpdateManyStatusArgs: ["data", "where"],
  UpsertStatusArgs: ["where", "create", "update"],
  AggregateStatusArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByStatusArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueSubscriptionArgs: ["where"],
  FindFirstSubscriptionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManySubscriptionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateSubscriptionArgs: ["data"],
  CreateManySubscriptionArgs: ["data", "skipDuplicates"],
  DeleteSubscriptionArgs: ["where"],
  UpdateSubscriptionArgs: ["data", "where"],
  DeleteManySubscriptionArgs: ["where"],
  UpdateManySubscriptionArgs: ["data", "where"],
  UpsertSubscriptionArgs: ["where", "create", "update"],
  AggregateSubscriptionArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupBySubscriptionArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueSubscriptionOnAccountArgs: ["where"],
  FindFirstSubscriptionOnAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManySubscriptionOnAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateSubscriptionOnAccountArgs: ["data"],
  CreateManySubscriptionOnAccountArgs: ["data", "skipDuplicates"],
  DeleteSubscriptionOnAccountArgs: ["where"],
  UpdateSubscriptionOnAccountArgs: ["data", "where"],
  DeleteManySubscriptionOnAccountArgs: ["where"],
  UpdateManySubscriptionOnAccountArgs: ["data", "where"],
  UpsertSubscriptionOnAccountArgs: ["where", "create", "update"],
  AggregateSubscriptionOnAccountArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupBySubscriptionOnAccountArgs: ["where", "orderBy", "by", "having", "take", "skip"],
  FindUniqueTransactionArgs: ["where"],
  FindFirstTransactionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  FindManyTransactionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
  CreateTransactionArgs: ["data"],
  CreateManyTransactionArgs: ["data", "skipDuplicates"],
  DeleteTransactionArgs: ["where"],
  UpdateTransactionArgs: ["data", "where"],
  DeleteManyTransactionArgs: ["where"],
  UpdateManyTransactionArgs: ["data", "where"],
  UpsertTransactionArgs: ["where", "create", "update"],
  AggregateTransactionArgs: ["where", "orderBy", "cursor", "take", "skip"],
  GroupByTransactionArgs: ["where", "orderBy", "by", "having", "take", "skip"]
};

type ResolverModelNames = keyof typeof crudResolversMap;

type ModelResolverActionNames<
  TModel extends ResolverModelNames
  > = keyof typeof crudResolversMap[TModel]["prototype"];

export type ResolverActionsConfig<
  TModel extends ResolverModelNames
  > = Partial<Record<ModelResolverActionNames<TModel> | "_all", MethodDecorator[]>>;

export type ResolversEnhanceMap = {
  [TModel in ResolverModelNames]?: ResolverActionsConfig<TModel>;
};

export function applyResolversEnhanceMap(
  resolversEnhanceMap: ResolversEnhanceMap,
) {
  for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
    const modelName = resolversEnhanceMapKey as keyof typeof resolversEnhanceMap;
    const crudTarget = crudResolversMap[modelName].prototype;
    const resolverActionsConfig = resolversEnhanceMap[modelName]!;
    const actionResolversConfig = actionResolversMap[modelName];
    if (resolverActionsConfig._all) {
      const allActionsDecorators = resolverActionsConfig._all;
      const resolverActionNames = crudResolversInfo[modelName as keyof typeof crudResolversInfo];
      for (const resolverActionName of resolverActionNames) {
        const actionTarget = (actionResolversConfig[
          resolverActionName as keyof typeof actionResolversConfig
        ] as Function).prototype;
        tslib.__decorate(allActionsDecorators, crudTarget, resolverActionName, null);
        tslib.__decorate(allActionsDecorators, actionTarget, resolverActionName, null);
      }
    }
    const resolverActionsToApply = Object.keys(resolverActionsConfig).filter(
      it => it !== "_all"
    );
    for (const resolverActionName of resolverActionsToApply) {
      const decorators = resolverActionsConfig[
        resolverActionName as keyof typeof resolverActionsConfig
      ] as MethodDecorator[];
      const actionTarget = (actionResolversConfig[
        resolverActionName as keyof typeof actionResolversConfig
      ] as Function).prototype;
      tslib.__decorate(decorators, crudTarget, resolverActionName, null);
      tslib.__decorate(decorators, actionTarget, resolverActionName, null);
    }
  }
}

type ArgsTypesNames = keyof typeof argsTypes;

type ArgFieldNames<TArgsType extends ArgsTypesNames> = Exclude<
  keyof typeof argsTypes[TArgsType]["prototype"],
  number | symbol
>;

type ArgFieldsConfig<
  TArgsType extends ArgsTypesNames
  > = FieldsConfig<ArgFieldNames<TArgsType>>;

export type ArgConfig<TArgsType extends ArgsTypesNames> = {
  class?: ClassDecorator[];
  fields?: ArgFieldsConfig<TArgsType>;
};

export type ArgsTypesEnhanceMap = {
  [TArgsType in ArgsTypesNames]?: ArgConfig<TArgsType>;
};

export function applyArgsTypesEnhanceMap(
  argsTypesEnhanceMap: ArgsTypesEnhanceMap,
) {
  for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
    const argsTypeName = argsTypesEnhanceMapKey as keyof typeof argsTypesEnhanceMap;
    const typeConfig = argsTypesEnhanceMap[argsTypeName]!;
    const typeClass = argsTypes[argsTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      argsInfo[argsTypeName as keyof typeof argsInfo],
    );
  }
}

const relationResolversMap = {
  Account: relationResolvers.AccountRelationsResolver,
  Token: relationResolvers.TokenRelationsResolver,
  Salt: relationResolvers.SaltRelationsResolver,
  SubuserOnAccount: relationResolvers.SubuserOnAccountRelationsResolver,
  EmployersOnAccount: relationResolvers.EmployersOnAccountRelationsResolver,
  ManagersOnAccount: relationResolvers.ManagersOnAccountRelationsResolver,
  Address: relationResolvers.AddressRelationsResolver,
  ContactAtAddress: relationResolvers.ContactAtAddressRelationsResolver,
  VenueStyle: relationResolvers.VenueStyleRelationsResolver,
  Email: relationResolvers.EmailRelationsResolver,
  Application: relationResolvers.ApplicationRelationsResolver,
  Domain: relationResolvers.DomainRelationsResolver,
  Feature: relationResolvers.FeatureRelationsResolver,
  FeatureOfRoom: relationResolvers.FeatureOfRoomRelationsResolver,
  FeatureOfAddress: relationResolvers.FeatureOfAddressRelationsResolver,
  Room: relationResolvers.RoomRelationsResolver,
  Files: relationResolvers.FilesRelationsResolver,
  RTW: relationResolvers.RTWRelationsResolver,
  Phone: relationResolvers.PhoneRelationsResolver,
  ArrangementOfRoom: relationResolvers.ArrangementOfRoomRelationsResolver,
  Arrangement: relationResolvers.ArrangementRelationsResolver,
  SIABadge: relationResolvers.SIABadgeRelationsResolver,
  SIACheck: relationResolvers.SIACheckRelationsResolver,
  StatusOnAccount: relationResolvers.StatusOnAccountRelationsResolver,
  Status: relationResolvers.StatusRelationsResolver,
  Subscription: relationResolvers.SubscriptionRelationsResolver,
  SubscriptionOnAccount: relationResolvers.SubscriptionOnAccountRelationsResolver,
  Transaction: relationResolvers.TransactionRelationsResolver
};
const relationResolversInfo = {
  Account: ["employer", "employees", "accesses", "subusers", "accounts", "managers", "Salt", "apiToken", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  Token: ["account"],
  Salt: ["account"],
  SubuserOnAccount: ["account", "subuser"],
  EmployersOnAccount: ["account", "employer"],
  ManagersOnAccount: ["account", "managers"],
  Address: ["account", "contacts", "venueStyle", "primaryAccount", "featuresOfBuisness", "phones", "rooms"],
  ContactAtAddress: ["account", "address", "email"],
  VenueStyle: ["address"],
  Email: ["associatedContact", "domain", "account"],
  Application: ["account"],
  Domain: ["linkedEmails"],
  Feature: ["featureOfRoom", "featureOfAddress"],
  FeatureOfRoom: ["feature", "room"],
  FeatureOfAddress: ["feature", "address"],
  Room: ["featuresOfRoom", "address", "arrangements"],
  Files: ["rtw", "account"],
  RTW: ["files", "account"],
  Phone: ["account", "address"],
  ArrangementOfRoom: ["arrangement", "room"],
  Arrangement: ["room"],
  SIABadge: ["siaChecks", "account"],
  SIACheck: ["badge", "transactions"],
  StatusOnAccount: ["status", "account"],
  Status: ["account"],
  Subscription: ["accounts"],
  SubscriptionOnAccount: ["subscription", "account"],
  Transaction: ["account", "SIACheck"]
};

type RelationResolverModelNames = keyof typeof relationResolversMap;

type RelationResolverActionNames<
  TModel extends RelationResolverModelNames
  > = keyof typeof relationResolversMap[TModel]["prototype"];

export type RelationResolverActionsConfig<TModel extends RelationResolverModelNames>
  = Partial<Record<RelationResolverActionNames<TModel> | "_all", MethodDecorator[]>>;

export type RelationResolversEnhanceMap = {
  [TModel in RelationResolverModelNames]?: RelationResolverActionsConfig<TModel>;
};

export function applyRelationResolversEnhanceMap(
  relationResolversEnhanceMap: RelationResolversEnhanceMap,
) {
  for (const relationResolversEnhanceMapKey of Object.keys(relationResolversEnhanceMap)) {
    const modelName = relationResolversEnhanceMapKey as keyof typeof relationResolversEnhanceMap;
    const relationResolverTarget = relationResolversMap[modelName].prototype;
    const relationResolverActionsConfig = relationResolversEnhanceMap[modelName]!;
    if (relationResolverActionsConfig._all) {
      const allActionsDecorators = relationResolverActionsConfig._all;
      const relationResolverActionNames = relationResolversInfo[modelName as keyof typeof relationResolversInfo];
      for (const relationResolverActionName of relationResolverActionNames) {
        tslib.__decorate(allActionsDecorators, relationResolverTarget, relationResolverActionName, null);
      }
    }
    const relationResolverActionsToApply = Object.keys(relationResolverActionsConfig).filter(
      it => it !== "_all"
    );
    for (const relationResolverActionName of relationResolverActionsToApply) {
      const decorators = relationResolverActionsConfig[
        relationResolverActionName as keyof typeof relationResolverActionsConfig
      ] as MethodDecorator[];
      tslib.__decorate(decorators, relationResolverTarget, relationResolverActionName, null);
    }
  }
}

type TypeConfig = {
  class?: ClassDecorator[];
  fields?: FieldsConfig;
};

type FieldsConfig<TTypeKeys extends string = string> = Partial<
  Record<TTypeKeys | "_all", PropertyDecorator[]>
>;

function applyTypeClassEnhanceConfig<
  TEnhanceConfig extends TypeConfig,
  TType extends object
>(
  enhanceConfig: TEnhanceConfig,
  typeClass: ClassType<TType>,
  typePrototype: TType,
  typeFieldNames: string[]
) {
  if (enhanceConfig.class) {
    tslib.__decorate(enhanceConfig.class, typeClass);
  }
  if (enhanceConfig.fields) {
    if (enhanceConfig.fields._all) {
      const allFieldsDecorators = enhanceConfig.fields._all;
      for (const typeFieldName of typeFieldNames) {
        tslib.__decorate(allFieldsDecorators, typePrototype, typeFieldName, void 0);
      }
    }
    const configFieldsToApply = Object.keys(enhanceConfig.fields).filter(
      it => it !== "_all"
    );
    for (const typeFieldName of configFieldsToApply) {
      const fieldDecorators = enhanceConfig.fields[typeFieldName]!;
      tslib.__decorate(fieldDecorators, typePrototype, typeFieldName, void 0);
    }
  }
}

const modelsInfo = {
  Account: ["id", "prn", "username", "accountType", "subsciption", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "resetPasswordToken", "resetPasswordExpires", "deletedDate", "deleted"],
  Token: ["id", "nickname", "createdAt", "updatedAt", "type", "value", "expiry", "accountID", "deletedDate", "deleted"],
  Salt: ["id", "salt", "expiry", "accountID", "deletedDate", "deleted"],
  SubuserOnAccount: ["accountId", "subuserId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmployersOnAccount: ["accountId", "employerId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ManagersOnAccount: ["accountId", "managersId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  Address: ["id", "createdAt", "updatedAt", "accountId", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "website", "hoursOfOperation", "features", "details", "public", "primaryaccountId", "deletedDate", "deleted"],
  ContactAtAddress: ["accountId", "addressId", "jobTitle", "phone", "emailId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  VenueStyle: ["id", "createdAt", "updatedAt", "name", "details", "deletedDate", "deleted"],
  Email: ["id", "domainId", "email", "accountId", "verified", "public", "primary", "path", "copy", "notifyFrom", "imap_authUser", "imap_authPass", "imap_accessToken", "imap_authServer", "imap_host", "imap_port", "imap_secure", "imap_tslRejectUnauthorized", "imap_tslMinVersion", "imap_resyncDelay", "smtp_authUser", "smtp_authPass", "smtp_accessToken", "smtp_authServer", "smtp_host", "smtp_port", "smtp_secure", "smtp_tslRejectUnauthorized", "smtp_tslMinVersion", "oauth2_authorize", "oauth2_provider", "oauth2_authUser", "oauth2_accessToken", "oauth2_refreshToken", "oauth2_expires", "createdAt", "updatedAt", "deletedDate", "deleted"],
  Application: ["id", "name", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  Domain: ["id", "domain", "verified", "dnsType", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  Feature: ["id", "name", "type", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfRoom: ["roomId", "featureId", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfAddress: ["addressId", "featureId", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  Room: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "addressId", "name", "floor", "building", "accessibility", "checkin", "checkout", "length", "width", "height"],
  Files: ["id", "name", "rtwId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  RTW: ["id", "name", "active", "startDate", "endDate", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  Phone: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "accountId", "addressId", "phone", "public"],
  ArrangementOfRoom: ["roomId", "arrangementId", "capacity", "details", "createdAt", "updatedAt", "deletedDate", "deleted"],
  Arrangement: ["id", "createdAt", "updatedAt", "name", "icon", "details", "deletedDate", "deleted"],
  SIABadge: ["id", "licenseSector", "type", "licenseExplanation", "additionalTerms", "createdAt", "active", "expiry", "updatedAt", "deletedDate", "deleted", "account_id"],
  SIACheck: ["id", "sia_id", "status", "AuthUrl", "pubUrl", "createdAt", "updatedAt", "deletedDate", "deleted", "error", "transactionId"],
  StatusOnAccount: ["statusId", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  Status: ["id", "name", "createdAt", "updatedAt", "deletedDate", "deleted"],
  Subscription: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "name", "cost", "details"],
  SubscriptionOnAccount: ["subscriptionId", "accountId", "active", "deactivated", "activated", "startedAt", "createdAt", "updatedAt", "deletedDate", "deleted"],
  Transaction: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "accountId", "data"]
};

type ModelNames = keyof typeof models;

type ModelFieldNames<TModel extends ModelNames> = Exclude<
  keyof typeof models[TModel]["prototype"],
  number | symbol
>;

type ModelFieldsConfig<TModel extends ModelNames> = FieldsConfig<
  ModelFieldNames<TModel>
>;

export type ModelConfig<TModel extends ModelNames> = {
  class?: ClassDecorator[];
  fields?: ModelFieldsConfig<TModel>;
};

export type ModelsEnhanceMap = {
  [TModel in ModelNames]?: ModelConfig<TModel>;
};

export function applyModelsEnhanceMap(modelsEnhanceMap: ModelsEnhanceMap) {
  for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
    const modelName = modelsEnhanceMapKey as keyof typeof modelsEnhanceMap;
    const modelConfig = modelsEnhanceMap[modelName]!;
    const modelClass = models[modelName];
    const modelTarget = modelClass.prototype;
    applyTypeClassEnhanceConfig(
      modelConfig,
      modelClass,
      modelTarget,
      modelsInfo[modelName as keyof typeof modelsInfo],
    );
  }
}

const outputsInfo = {
  AggregateAccount: ["_count", "_avg", "_sum", "_min", "_max"],
  AccountGroupBy: ["id", "prn", "username", "accountType", "subsciption", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "resetPasswordToken", "resetPasswordExpires", "deletedDate", "deleted", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateToken: ["_count", "_min", "_max"],
  TokenGroupBy: ["id", "nickname", "createdAt", "updatedAt", "type", "value", "expiry", "accountID", "deletedDate", "deleted", "_count", "_min", "_max"],
  AggregateSalt: ["_count", "_min", "_max"],
  SaltGroupBy: ["id", "salt", "expiry", "accountID", "deletedDate", "deleted", "_count", "_min", "_max"],
  AggregateSubuserOnAccount: ["_count", "_min", "_max"],
  SubuserOnAccountGroupBy: ["accountId", "subuserId", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_min", "_max"],
  AggregateEmployersOnAccount: ["_count", "_min", "_max"],
  EmployersOnAccountGroupBy: ["accountId", "employerId", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_min", "_max"],
  AggregateManagersOnAccount: ["_count", "_min", "_max"],
  ManagersOnAccountGroupBy: ["accountId", "managersId", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_min", "_max"],
  AggregateAddress: ["_count", "_min", "_max"],
  AddressGroupBy: ["id", "createdAt", "updatedAt", "accountId", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "website", "hoursOfOperation", "features", "details", "public", "primaryaccountId", "deletedDate", "deleted", "_count", "_min", "_max"],
  AggregateContactAtAddress: ["_count", "_min", "_max"],
  ContactAtAddressGroupBy: ["accountId", "addressId", "jobTitle", "phone", "emailId", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_min", "_max"],
  AggregateVenueStyle: ["_count", "_min", "_max"],
  VenueStyleGroupBy: ["id", "createdAt", "updatedAt", "name", "details", "deletedDate", "deleted", "_count", "_min", "_max"],
  AggregateEmail: ["_count", "_avg", "_sum", "_min", "_max"],
  EmailGroupBy: ["id", "domainId", "email", "accountId", "verified", "public", "primary", "path", "copy", "notifyFrom", "imap_authUser", "imap_authPass", "imap_accessToken", "imap_authServer", "imap_host", "imap_port", "imap_secure", "imap_tslRejectUnauthorized", "imap_tslMinVersion", "imap_resyncDelay", "smtp_authUser", "smtp_authPass", "smtp_accessToken", "smtp_authServer", "smtp_host", "smtp_port", "smtp_secure", "smtp_tslRejectUnauthorized", "smtp_tslMinVersion", "oauth2_authorize", "oauth2_provider", "oauth2_authUser", "oauth2_accessToken", "oauth2_refreshToken", "oauth2_expires", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateApplication: ["_count", "_min", "_max"],
  ApplicationGroupBy: ["id", "name", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_min", "_max"],
  AggregateDomain: ["_count", "_min", "_max"],
  DomainGroupBy: ["id", "domain", "verified", "dnsType", "data", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_min", "_max"],
  AggregateFeature: ["_count", "_min", "_max"],
  FeatureGroupBy: ["id", "name", "type", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_min", "_max"],
  AggregateFeatureOfRoom: ["_count", "_min", "_max"],
  FeatureOfRoomGroupBy: ["roomId", "featureId", "data", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_min", "_max"],
  AggregateFeatureOfAddress: ["_count", "_min", "_max"],
  FeatureOfAddressGroupBy: ["addressId", "featureId", "data", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_min", "_max"],
  AggregateRoom: ["_count", "_min", "_max"],
  RoomGroupBy: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "addressId", "name", "floor", "building", "accessibility", "checkin", "checkout", "length", "width", "height", "_count", "_min", "_max"],
  AggregateFiles: ["_count", "_min", "_max"],
  FilesGroupBy: ["id", "name", "rtwId", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_min", "_max"],
  AggregateRTW: ["_count", "_min", "_max"],
  RTWGroupBy: ["id", "name", "active", "startDate", "endDate", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_min", "_max"],
  AggregatePhone: ["_count", "_min", "_max"],
  PhoneGroupBy: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "accountId", "addressId", "phone", "public", "_count", "_min", "_max"],
  AggregateArrangementOfRoom: ["_count", "_avg", "_sum", "_min", "_max"],
  ArrangementOfRoomGroupBy: ["roomId", "arrangementId", "capacity", "details", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateArrangement: ["_count", "_min", "_max"],
  ArrangementGroupBy: ["id", "createdAt", "updatedAt", "name", "icon", "details", "deletedDate", "deleted", "_count", "_min", "_max"],
  AggregateSIABadge: ["_count", "_avg", "_sum", "_min", "_max"],
  SIABadgeGroupBy: ["id", "licenseSector", "type", "licenseExplanation", "additionalTerms", "createdAt", "active", "expiry", "updatedAt", "deletedDate", "deleted", "account_id", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateSIACheck: ["_count", "_avg", "_sum", "_min", "_max"],
  SIACheckGroupBy: ["id", "sia_id", "status", "AuthUrl", "pubUrl", "createdAt", "updatedAt", "deletedDate", "deleted", "error", "transactionId", "_count", "_avg", "_sum", "_min", "_max"],
  AggregateStatusOnAccount: ["_count", "_min", "_max"],
  StatusOnAccountGroupBy: ["statusId", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_min", "_max"],
  AggregateStatus: ["_count", "_min", "_max"],
  StatusGroupBy: ["id", "name", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_min", "_max"],
  AggregateSubscription: ["_count", "_min", "_max"],
  SubscriptionGroupBy: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "name", "cost", "details", "_count", "_min", "_max"],
  AggregateSubscriptionOnAccount: ["_count", "_min", "_max"],
  SubscriptionOnAccountGroupBy: ["subscriptionId", "accountId", "active", "deactivated", "activated", "startedAt", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_min", "_max"],
  AggregateTransaction: ["_count", "_min", "_max"],
  TransactionGroupBy: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "accountId", "data", "_count", "_min", "_max"],
  AffectedRowsOutput: ["count"],
  AccountCount: ["employer", "employees", "accesses", "subusers", "accounts", "managers", "apiToken", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountCountAggregate: ["id", "prn", "username", "accountType", "subsciption", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "resetPasswordToken", "resetPasswordExpires", "deletedDate", "deleted", "_all"],
  AccountAvgAggregate: ["prn"],
  AccountSumAggregate: ["prn"],
  AccountMinAggregate: ["id", "prn", "username", "accountType", "subsciption", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "resetPasswordToken", "resetPasswordExpires", "deletedDate", "deleted"],
  AccountMaxAggregate: ["id", "prn", "username", "accountType", "subsciption", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "resetPasswordToken", "resetPasswordExpires", "deletedDate", "deleted"],
  TokenCountAggregate: ["id", "nickname", "createdAt", "updatedAt", "type", "value", "expiry", "accountID", "deletedDate", "deleted", "_all"],
  TokenMinAggregate: ["id", "nickname", "createdAt", "updatedAt", "type", "value", "expiry", "accountID", "deletedDate", "deleted"],
  TokenMaxAggregate: ["id", "nickname", "createdAt", "updatedAt", "type", "value", "expiry", "accountID", "deletedDate", "deleted"],
  SaltCountAggregate: ["id", "salt", "expiry", "accountID", "deletedDate", "deleted", "_all"],
  SaltMinAggregate: ["id", "salt", "expiry", "accountID", "deletedDate", "deleted"],
  SaltMaxAggregate: ["id", "salt", "expiry", "accountID", "deletedDate", "deleted"],
  SubuserOnAccountCountAggregate: ["accountId", "subuserId", "createdAt", "updatedAt", "deletedDate", "deleted", "_all"],
  SubuserOnAccountMinAggregate: ["accountId", "subuserId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubuserOnAccountMaxAggregate: ["accountId", "subuserId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmployersOnAccountCountAggregate: ["accountId", "employerId", "createdAt", "updatedAt", "deletedDate", "deleted", "_all"],
  EmployersOnAccountMinAggregate: ["accountId", "employerId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmployersOnAccountMaxAggregate: ["accountId", "employerId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ManagersOnAccountCountAggregate: ["accountId", "managersId", "createdAt", "updatedAt", "deletedDate", "deleted", "_all"],
  ManagersOnAccountMinAggregate: ["accountId", "managersId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ManagersOnAccountMaxAggregate: ["accountId", "managersId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  AddressCount: ["contacts", "venueStyle", "featuresOfBuisness", "phones", "rooms"],
  AddressCountAggregate: ["id", "createdAt", "updatedAt", "accountId", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "website", "hoursOfOperation", "features", "details", "public", "primaryaccountId", "deletedDate", "deleted", "_all"],
  AddressMinAggregate: ["id", "createdAt", "updatedAt", "accountId", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "website", "features", "public", "primaryaccountId", "deletedDate", "deleted"],
  AddressMaxAggregate: ["id", "createdAt", "updatedAt", "accountId", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "website", "features", "public", "primaryaccountId", "deletedDate", "deleted"],
  ContactAtAddressCountAggregate: ["accountId", "addressId", "jobTitle", "phone", "emailId", "createdAt", "updatedAt", "deletedDate", "deleted", "_all"],
  ContactAtAddressMinAggregate: ["accountId", "addressId", "jobTitle", "phone", "emailId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ContactAtAddressMaxAggregate: ["accountId", "addressId", "jobTitle", "phone", "emailId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  VenueStyleCount: ["address"],
  VenueStyleCountAggregate: ["id", "createdAt", "updatedAt", "name", "details", "deletedDate", "deleted", "_all"],
  VenueStyleMinAggregate: ["id", "createdAt", "updatedAt", "name", "details", "deletedDate", "deleted"],
  VenueStyleMaxAggregate: ["id", "createdAt", "updatedAt", "name", "details", "deletedDate", "deleted"],
  EmailCount: ["associatedContact"],
  EmailCountAggregate: ["id", "domainId", "email", "accountId", "verified", "public", "primary", "path", "copy", "notifyFrom", "imap_authUser", "imap_authPass", "imap_accessToken", "imap_authServer", "imap_host", "imap_port", "imap_secure", "imap_tslRejectUnauthorized", "imap_tslMinVersion", "imap_resyncDelay", "smtp_authUser", "smtp_authPass", "smtp_accessToken", "smtp_authServer", "smtp_host", "smtp_port", "smtp_secure", "smtp_tslRejectUnauthorized", "smtp_tslMinVersion", "oauth2_authorize", "oauth2_provider", "oauth2_authUser", "oauth2_accessToken", "oauth2_refreshToken", "oauth2_expires", "createdAt", "updatedAt", "deletedDate", "deleted", "_all"],
  EmailAvgAggregate: ["imap_resyncDelay"],
  EmailSumAggregate: ["imap_resyncDelay"],
  EmailMinAggregate: ["id", "domainId", "email", "accountId", "verified", "public", "primary", "path", "copy", "notifyFrom", "imap_authUser", "imap_authPass", "imap_accessToken", "imap_authServer", "imap_host", "imap_port", "imap_secure", "imap_tslRejectUnauthorized", "imap_tslMinVersion", "imap_resyncDelay", "smtp_authUser", "smtp_authPass", "smtp_accessToken", "smtp_authServer", "smtp_host", "smtp_port", "smtp_secure", "smtp_tslRejectUnauthorized", "smtp_tslMinVersion", "oauth2_authorize", "oauth2_provider", "oauth2_authUser", "oauth2_accessToken", "oauth2_refreshToken", "oauth2_expires", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmailMaxAggregate: ["id", "domainId", "email", "accountId", "verified", "public", "primary", "path", "copy", "notifyFrom", "imap_authUser", "imap_authPass", "imap_accessToken", "imap_authServer", "imap_host", "imap_port", "imap_secure", "imap_tslRejectUnauthorized", "imap_tslMinVersion", "imap_resyncDelay", "smtp_authUser", "smtp_authPass", "smtp_accessToken", "smtp_authServer", "smtp_host", "smtp_port", "smtp_secure", "smtp_tslRejectUnauthorized", "smtp_tslMinVersion", "oauth2_authorize", "oauth2_provider", "oauth2_authUser", "oauth2_accessToken", "oauth2_refreshToken", "oauth2_expires", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ApplicationCountAggregate: ["id", "name", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted", "_all"],
  ApplicationMinAggregate: ["id", "name", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ApplicationMaxAggregate: ["id", "name", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  DomainCount: ["linkedEmails"],
  DomainCountAggregate: ["id", "domain", "verified", "dnsType", "data", "createdAt", "updatedAt", "deletedDate", "deleted", "_all"],
  DomainMinAggregate: ["id", "domain", "verified", "dnsType", "createdAt", "updatedAt", "deletedDate", "deleted"],
  DomainMaxAggregate: ["id", "domain", "verified", "dnsType", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureCount: ["featureOfRoom", "featureOfAddress"],
  FeatureCountAggregate: ["id", "name", "type", "createdAt", "updatedAt", "deletedDate", "deleted", "_all"],
  FeatureMinAggregate: ["id", "name", "type", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureMaxAggregate: ["id", "name", "type", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfRoomCountAggregate: ["roomId", "featureId", "data", "createdAt", "updatedAt", "deletedDate", "deleted", "_all"],
  FeatureOfRoomMinAggregate: ["roomId", "featureId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfRoomMaxAggregate: ["roomId", "featureId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfAddressCountAggregate: ["addressId", "featureId", "data", "createdAt", "updatedAt", "deletedDate", "deleted", "_all"],
  FeatureOfAddressMinAggregate: ["addressId", "featureId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfAddressMaxAggregate: ["addressId", "featureId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  RoomCount: ["featuresOfRoom", "arrangements"],
  RoomCountAggregate: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "addressId", "name", "floor", "building", "accessibility", "checkin", "checkout", "length", "width", "height", "_all"],
  RoomMinAggregate: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "addressId", "name", "floor", "building", "accessibility", "checkin", "checkout", "length", "width", "height"],
  RoomMaxAggregate: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "addressId", "name", "floor", "building", "accessibility", "checkin", "checkout", "length", "width", "height"],
  FilesCount: ["account"],
  FilesCountAggregate: ["id", "name", "rtwId", "createdAt", "updatedAt", "deletedDate", "deleted", "_all"],
  FilesMinAggregate: ["id", "name", "rtwId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FilesMaxAggregate: ["id", "name", "rtwId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  RTWCount: ["files"],
  RTWCountAggregate: ["id", "name", "active", "startDate", "endDate", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted", "_all"],
  RTWMinAggregate: ["id", "name", "active", "startDate", "endDate", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  RTWMaxAggregate: ["id", "name", "active", "startDate", "endDate", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  PhoneCountAggregate: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "accountId", "addressId", "phone", "public", "_all"],
  PhoneMinAggregate: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "accountId", "addressId", "phone", "public"],
  PhoneMaxAggregate: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "accountId", "addressId", "phone", "public"],
  ArrangementOfRoomCountAggregate: ["roomId", "arrangementId", "capacity", "details", "createdAt", "updatedAt", "deletedDate", "deleted", "_all"],
  ArrangementOfRoomAvgAggregate: ["capacity"],
  ArrangementOfRoomSumAggregate: ["capacity"],
  ArrangementOfRoomMinAggregate: ["roomId", "arrangementId", "capacity", "details", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ArrangementOfRoomMaxAggregate: ["roomId", "arrangementId", "capacity", "details", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ArrangementCount: ["room"],
  ArrangementCountAggregate: ["id", "createdAt", "updatedAt", "name", "icon", "details", "deletedDate", "deleted", "_all"],
  ArrangementMinAggregate: ["id", "createdAt", "updatedAt", "name", "icon", "details", "deletedDate", "deleted"],
  ArrangementMaxAggregate: ["id", "createdAt", "updatedAt", "name", "icon", "details", "deletedDate", "deleted"],
  SIABadgeCount: ["siaChecks"],
  SIABadgeCountAggregate: ["id", "licenseSector", "type", "licenseExplanation", "additionalTerms", "createdAt", "active", "expiry", "updatedAt", "deletedDate", "deleted", "account_id", "_all"],
  SIABadgeAvgAggregate: ["id"],
  SIABadgeSumAggregate: ["id"],
  SIABadgeMinAggregate: ["id", "licenseSector", "type", "licenseExplanation", "additionalTerms", "createdAt", "active", "expiry", "updatedAt", "deletedDate", "deleted", "account_id"],
  SIABadgeMaxAggregate: ["id", "licenseSector", "type", "licenseExplanation", "additionalTerms", "createdAt", "active", "expiry", "updatedAt", "deletedDate", "deleted", "account_id"],
  SIACheckCountAggregate: ["id", "sia_id", "status", "AuthUrl", "pubUrl", "createdAt", "updatedAt", "deletedDate", "deleted", "error", "transactionId", "_all"],
  SIACheckAvgAggregate: ["sia_id"],
  SIACheckSumAggregate: ["sia_id"],
  SIACheckMinAggregate: ["id", "sia_id", "status", "AuthUrl", "pubUrl", "createdAt", "updatedAt", "deletedDate", "deleted", "error", "transactionId"],
  SIACheckMaxAggregate: ["id", "sia_id", "status", "AuthUrl", "pubUrl", "createdAt", "updatedAt", "deletedDate", "deleted", "error", "transactionId"],
  StatusOnAccountCountAggregate: ["statusId", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted", "_all"],
  StatusOnAccountMinAggregate: ["statusId", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  StatusOnAccountMaxAggregate: ["statusId", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  StatusCount: ["account"],
  StatusCountAggregate: ["id", "name", "createdAt", "updatedAt", "deletedDate", "deleted", "_all"],
  StatusMinAggregate: ["id", "name", "createdAt", "updatedAt", "deletedDate", "deleted"],
  StatusMaxAggregate: ["id", "name", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubscriptionCount: ["accounts"],
  SubscriptionCountAggregate: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "name", "cost", "details", "_all"],
  SubscriptionMinAggregate: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "name", "cost", "details"],
  SubscriptionMaxAggregate: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "name", "cost", "details"],
  SubscriptionOnAccountCountAggregate: ["subscriptionId", "accountId", "active", "deactivated", "activated", "startedAt", "createdAt", "updatedAt", "deletedDate", "deleted", "_all"],
  SubscriptionOnAccountMinAggregate: ["subscriptionId", "accountId", "active", "deactivated", "activated", "startedAt", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubscriptionOnAccountMaxAggregate: ["subscriptionId", "accountId", "active", "deactivated", "activated", "startedAt", "createdAt", "updatedAt", "deletedDate", "deleted"],
  TransactionCount: ["SIACheck"],
  TransactionCountAggregate: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "accountId", "data", "_all"],
  TransactionMinAggregate: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "accountId"],
  TransactionMaxAggregate: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "accountId"]
};

type OutputTypesNames = keyof typeof outputTypes;

type OutputTypeFieldNames<TOutput extends OutputTypesNames> = Exclude<
  keyof typeof outputTypes[TOutput]["prototype"],
  number | symbol
>;

type OutputTypeFieldsConfig<
  TOutput extends OutputTypesNames
  > = FieldsConfig<OutputTypeFieldNames<TOutput>>;

export type OutputTypeConfig<TOutput extends OutputTypesNames> = {
  class?: ClassDecorator[];
  fields?: OutputTypeFieldsConfig<TOutput>;
};

export type OutputTypesEnhanceMap = {
  [TOutput in OutputTypesNames]?: OutputTypeConfig<TOutput>;
};

export function applyOutputTypesEnhanceMap(
  outputTypesEnhanceMap: OutputTypesEnhanceMap,
) {
  for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
    const outputTypeName = outputTypeEnhanceMapKey as keyof typeof outputTypesEnhanceMap;
    const typeConfig = outputTypesEnhanceMap[outputTypeName]!;
    const typeClass = outputTypes[outputTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      outputsInfo[outputTypeName as keyof typeof outputsInfo],
    );
  }
}

const inputsInfo = {
  AccountWhereInput: ["AND", "OR", "NOT", "id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountOrderByWithRelationAndSearchRelevanceInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions", "_relevance"],
  AccountWhereUniqueInput: ["id", "username", "resetPasswordToken"],
  AccountOrderByWithAggregationInput: ["id", "prn", "username", "accountType", "subsciption", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "resetPasswordToken", "resetPasswordExpires", "deletedDate", "deleted", "_count", "_avg", "_max", "_min", "_sum"],
  AccountScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "prn", "username", "accountType", "subsciption", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "resetPasswordToken", "resetPasswordExpires", "deletedDate", "deleted"],
  TokenWhereInput: ["AND", "OR", "NOT", "id", "nickname", "createdAt", "updatedAt", "type", "value", "expiry", "account", "accountID", "deletedDate", "deleted"],
  TokenOrderByWithRelationAndSearchRelevanceInput: ["id", "nickname", "createdAt", "updatedAt", "type", "value", "expiry", "account", "accountID", "deletedDate", "deleted", "_relevance"],
  TokenWhereUniqueInput: ["id", "value"],
  TokenOrderByWithAggregationInput: ["id", "nickname", "createdAt", "updatedAt", "type", "value", "expiry", "accountID", "deletedDate", "deleted", "_count", "_max", "_min"],
  TokenScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "nickname", "createdAt", "updatedAt", "type", "value", "expiry", "accountID", "deletedDate", "deleted"],
  SaltWhereInput: ["AND", "OR", "NOT", "id", "salt", "expiry", "account", "accountID", "deletedDate", "deleted"],
  SaltOrderByWithRelationAndSearchRelevanceInput: ["id", "salt", "expiry", "account", "accountID", "deletedDate", "deleted", "_relevance"],
  SaltWhereUniqueInput: ["id", "accountID"],
  SaltOrderByWithAggregationInput: ["id", "salt", "expiry", "accountID", "deletedDate", "deleted", "_count", "_max", "_min"],
  SaltScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "salt", "expiry", "accountID", "deletedDate", "deleted"],
  SubuserOnAccountWhereInput: ["AND", "OR", "NOT", "accountId", "subuserId", "account", "subuser", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubuserOnAccountOrderByWithRelationAndSearchRelevanceInput: ["accountId", "subuserId", "account", "subuser", "createdAt", "updatedAt", "deletedDate", "deleted", "_relevance"],
  SubuserOnAccountWhereUniqueInput: ["accountId_subuserId"],
  SubuserOnAccountOrderByWithAggregationInput: ["accountId", "subuserId", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_max", "_min"],
  SubuserOnAccountScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "accountId", "subuserId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmployersOnAccountWhereInput: ["AND", "OR", "NOT", "accountId", "employerId", "account", "employer", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmployersOnAccountOrderByWithRelationAndSearchRelevanceInput: ["accountId", "employerId", "account", "employer", "createdAt", "updatedAt", "deletedDate", "deleted", "_relevance"],
  EmployersOnAccountWhereUniqueInput: ["accountId_employerId"],
  EmployersOnAccountOrderByWithAggregationInput: ["accountId", "employerId", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_max", "_min"],
  EmployersOnAccountScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "accountId", "employerId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ManagersOnAccountWhereInput: ["AND", "OR", "NOT", "accountId", "managersId", "account", "managers", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ManagersOnAccountOrderByWithRelationAndSearchRelevanceInput: ["accountId", "managersId", "account", "managers", "createdAt", "updatedAt", "deletedDate", "deleted", "_relevance"],
  ManagersOnAccountWhereUniqueInput: ["accountId_managersId"],
  ManagersOnAccountOrderByWithAggregationInput: ["accountId", "managersId", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_max", "_min"],
  ManagersOnAccountScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "accountId", "managersId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  AddressWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "account", "accountId", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "contacts", "website", "hoursOfOperation", "venueStyle", "features", "details", "public", "primaryAccount", "primaryaccountId", "deletedDate", "deleted", "featuresOfBuisness", "phones", "rooms"],
  AddressOrderByWithRelationAndSearchRelevanceInput: ["id", "createdAt", "updatedAt", "account", "accountId", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "contacts", "website", "hoursOfOperation", "venueStyle", "features", "details", "public", "primaryAccount", "primaryaccountId", "deletedDate", "deleted", "featuresOfBuisness", "phones", "rooms", "_relevance"],
  AddressWhereUniqueInput: ["id", "primaryaccountId"],
  AddressOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "accountId", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "website", "hoursOfOperation", "features", "details", "public", "primaryaccountId", "deletedDate", "deleted", "_count", "_max", "_min"],
  AddressScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "accountId", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "website", "hoursOfOperation", "features", "details", "public", "primaryaccountId", "deletedDate", "deleted"],
  ContactAtAddressWhereInput: ["AND", "OR", "NOT", "accountId", "addressId", "account", "address", "jobTitle", "phone", "email", "emailId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ContactAtAddressOrderByWithRelationAndSearchRelevanceInput: ["accountId", "addressId", "account", "address", "jobTitle", "phone", "email", "emailId", "createdAt", "updatedAt", "deletedDate", "deleted", "_relevance"],
  ContactAtAddressWhereUniqueInput: ["accountId_addressId"],
  ContactAtAddressOrderByWithAggregationInput: ["accountId", "addressId", "jobTitle", "phone", "emailId", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_max", "_min"],
  ContactAtAddressScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "accountId", "addressId", "jobTitle", "phone", "emailId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  VenueStyleWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "address", "name", "details", "deletedDate", "deleted"],
  VenueStyleOrderByWithRelationAndSearchRelevanceInput: ["id", "createdAt", "updatedAt", "address", "name", "details", "deletedDate", "deleted", "_relevance"],
  VenueStyleWhereUniqueInput: ["id"],
  VenueStyleOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "name", "details", "deletedDate", "deleted", "_count", "_max", "_min"],
  VenueStyleScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "details", "deletedDate", "deleted"],
  EmailWhereInput: ["AND", "OR", "NOT", "id", "associatedContact", "domain", "domainId", "email", "account", "accountId", "verified", "public", "primary", "path", "copy", "notifyFrom", "imap_authUser", "imap_authPass", "imap_accessToken", "imap_authServer", "imap_host", "imap_port", "imap_secure", "imap_tslRejectUnauthorized", "imap_tslMinVersion", "imap_resyncDelay", "smtp_authUser", "smtp_authPass", "smtp_accessToken", "smtp_authServer", "smtp_host", "smtp_port", "smtp_secure", "smtp_tslRejectUnauthorized", "smtp_tslMinVersion", "oauth2_authorize", "oauth2_provider", "oauth2_authUser", "oauth2_accessToken", "oauth2_refreshToken", "oauth2_expires", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmailOrderByWithRelationAndSearchRelevanceInput: ["id", "associatedContact", "domain", "domainId", "email", "account", "accountId", "verified", "public", "primary", "path", "copy", "notifyFrom", "imap_authUser", "imap_authPass", "imap_accessToken", "imap_authServer", "imap_host", "imap_port", "imap_secure", "imap_tslRejectUnauthorized", "imap_tslMinVersion", "imap_resyncDelay", "smtp_authUser", "smtp_authPass", "smtp_accessToken", "smtp_authServer", "smtp_host", "smtp_port", "smtp_secure", "smtp_tslRejectUnauthorized", "smtp_tslMinVersion", "oauth2_authorize", "oauth2_provider", "oauth2_authUser", "oauth2_accessToken", "oauth2_refreshToken", "oauth2_expires", "createdAt", "updatedAt", "deletedDate", "deleted", "_relevance"],
  EmailWhereUniqueInput: ["id", "email"],
  EmailOrderByWithAggregationInput: ["id", "domainId", "email", "accountId", "verified", "public", "primary", "path", "copy", "notifyFrom", "imap_authUser", "imap_authPass", "imap_accessToken", "imap_authServer", "imap_host", "imap_port", "imap_secure", "imap_tslRejectUnauthorized", "imap_tslMinVersion", "imap_resyncDelay", "smtp_authUser", "smtp_authPass", "smtp_accessToken", "smtp_authServer", "smtp_host", "smtp_port", "smtp_secure", "smtp_tslRejectUnauthorized", "smtp_tslMinVersion", "oauth2_authorize", "oauth2_provider", "oauth2_authUser", "oauth2_accessToken", "oauth2_refreshToken", "oauth2_expires", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_avg", "_max", "_min", "_sum"],
  EmailScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "domainId", "email", "accountId", "verified", "public", "primary", "path", "copy", "notifyFrom", "imap_authUser", "imap_authPass", "imap_accessToken", "imap_authServer", "imap_host", "imap_port", "imap_secure", "imap_tslRejectUnauthorized", "imap_tslMinVersion", "imap_resyncDelay", "smtp_authUser", "smtp_authPass", "smtp_accessToken", "smtp_authServer", "smtp_host", "smtp_port", "smtp_secure", "smtp_tslRejectUnauthorized", "smtp_tslMinVersion", "oauth2_authorize", "oauth2_provider", "oauth2_authUser", "oauth2_accessToken", "oauth2_refreshToken", "oauth2_expires", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ApplicationWhereInput: ["AND", "OR", "NOT", "id", "name", "account", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ApplicationOrderByWithRelationAndSearchRelevanceInput: ["id", "name", "account", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted", "_relevance"],
  ApplicationWhereUniqueInput: ["id"],
  ApplicationOrderByWithAggregationInput: ["id", "name", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_max", "_min"],
  ApplicationScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  DomainWhereInput: ["AND", "OR", "NOT", "id", "domain", "verified", "dnsType", "linkedEmails", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  DomainOrderByWithRelationAndSearchRelevanceInput: ["id", "domain", "verified", "dnsType", "linkedEmails", "data", "createdAt", "updatedAt", "deletedDate", "deleted", "_relevance"],
  DomainWhereUniqueInput: ["id", "domain"],
  DomainOrderByWithAggregationInput: ["id", "domain", "verified", "dnsType", "data", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_max", "_min"],
  DomainScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "domain", "verified", "dnsType", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureWhereInput: ["AND", "OR", "NOT", "id", "name", "type", "featureOfRoom", "featureOfAddress", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOrderByWithRelationAndSearchRelevanceInput: ["id", "name", "type", "featureOfRoom", "featureOfAddress", "createdAt", "updatedAt", "deletedDate", "deleted", "_relevance"],
  FeatureWhereUniqueInput: ["id"],
  FeatureOrderByWithAggregationInput: ["id", "name", "type", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_max", "_min"],
  FeatureScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "type", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfRoomWhereInput: ["AND", "OR", "NOT", "roomId", "featureId", "feature", "room", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfRoomOrderByWithRelationAndSearchRelevanceInput: ["roomId", "featureId", "feature", "room", "data", "createdAt", "updatedAt", "deletedDate", "deleted", "_relevance"],
  FeatureOfRoomWhereUniqueInput: ["roomId_featureId"],
  FeatureOfRoomOrderByWithAggregationInput: ["roomId", "featureId", "data", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_max", "_min"],
  FeatureOfRoomScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "roomId", "featureId", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfAddressWhereInput: ["AND", "OR", "NOT", "addressId", "featureId", "feature", "address", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfAddressOrderByWithRelationAndSearchRelevanceInput: ["addressId", "featureId", "feature", "address", "data", "createdAt", "updatedAt", "deletedDate", "deleted", "_relevance"],
  FeatureOfAddressWhereUniqueInput: ["addressId_featureId"],
  FeatureOfAddressOrderByWithAggregationInput: ["addressId", "featureId", "data", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_max", "_min"],
  FeatureOfAddressScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "addressId", "featureId", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  RoomWhereInput: ["AND", "OR", "NOT", "id", "featuresOfRoom", "createdAt", "updatedAt", "deletedDate", "deleted", "address", "addressId", "name", "floor", "building", "accessibility", "checkin", "checkout", "length", "width", "height", "arrangements"],
  RoomOrderByWithRelationAndSearchRelevanceInput: ["id", "featuresOfRoom", "createdAt", "updatedAt", "deletedDate", "deleted", "address", "addressId", "name", "floor", "building", "accessibility", "checkin", "checkout", "length", "width", "height", "arrangements", "_relevance"],
  RoomWhereUniqueInput: ["id"],
  RoomOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "addressId", "name", "floor", "building", "accessibility", "checkin", "checkout", "length", "width", "height", "_count", "_max", "_min"],
  RoomScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "deletedDate", "deleted", "addressId", "name", "floor", "building", "accessibility", "checkin", "checkout", "length", "width", "height"],
  FilesWhereInput: ["AND", "OR", "NOT", "id", "name", "rtw", "rtwId", "account", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FilesOrderByWithRelationAndSearchRelevanceInput: ["id", "name", "rtw", "rtwId", "account", "createdAt", "updatedAt", "deletedDate", "deleted", "_relevance"],
  FilesWhereUniqueInput: ["id"],
  FilesOrderByWithAggregationInput: ["id", "name", "rtwId", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_max", "_min"],
  FilesScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "rtwId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  RTWWhereInput: ["AND", "OR", "NOT", "id", "files", "name", "active", "startDate", "endDate", "account", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  RTWOrderByWithRelationAndSearchRelevanceInput: ["id", "files", "name", "active", "startDate", "endDate", "account", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted", "_relevance"],
  RTWWhereUniqueInput: ["id"],
  RTWOrderByWithAggregationInput: ["id", "name", "active", "startDate", "endDate", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_max", "_min"],
  RTWScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "active", "startDate", "endDate", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  PhoneWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "deletedDate", "deleted", "account", "accountId", "address", "addressId", "phone", "public"],
  PhoneOrderByWithRelationAndSearchRelevanceInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "account", "accountId", "address", "addressId", "phone", "public", "_relevance"],
  PhoneWhereUniqueInput: ["id", "phone"],
  PhoneOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "accountId", "addressId", "phone", "public", "_count", "_max", "_min"],
  PhoneScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "deletedDate", "deleted", "accountId", "addressId", "phone", "public"],
  ArrangementOfRoomWhereInput: ["AND", "OR", "NOT", "roomId", "arrangementId", "arrangement", "room", "capacity", "details", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ArrangementOfRoomOrderByWithRelationAndSearchRelevanceInput: ["roomId", "arrangementId", "arrangement", "room", "capacity", "details", "createdAt", "updatedAt", "deletedDate", "deleted", "_relevance"],
  ArrangementOfRoomWhereUniqueInput: ["roomId_arrangementId"],
  ArrangementOfRoomOrderByWithAggregationInput: ["roomId", "arrangementId", "capacity", "details", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_avg", "_max", "_min", "_sum"],
  ArrangementOfRoomScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "roomId", "arrangementId", "capacity", "details", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ArrangementWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "room", "name", "icon", "details", "deletedDate", "deleted"],
  ArrangementOrderByWithRelationAndSearchRelevanceInput: ["id", "createdAt", "updatedAt", "room", "name", "icon", "details", "deletedDate", "deleted", "_relevance"],
  ArrangementWhereUniqueInput: ["id"],
  ArrangementOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "name", "icon", "details", "deletedDate", "deleted", "_count", "_max", "_min"],
  ArrangementScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "icon", "details", "deletedDate", "deleted"],
  SIABadgeWhereInput: ["AND", "OR", "NOT", "id", "licenseSector", "type", "licenseExplanation", "additionalTerms", "createdAt", "active", "expiry", "updatedAt", "deletedDate", "deleted", "siaChecks", "account", "account_id"],
  SIABadgeOrderByWithRelationAndSearchRelevanceInput: ["id", "licenseSector", "type", "licenseExplanation", "additionalTerms", "createdAt", "active", "expiry", "updatedAt", "deletedDate", "deleted", "siaChecks", "account", "account_id", "_relevance"],
  SIABadgeWhereUniqueInput: ["id"],
  SIABadgeOrderByWithAggregationInput: ["id", "licenseSector", "type", "licenseExplanation", "additionalTerms", "createdAt", "active", "expiry", "updatedAt", "deletedDate", "deleted", "account_id", "_count", "_avg", "_max", "_min", "_sum"],
  SIABadgeScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "licenseSector", "type", "licenseExplanation", "additionalTerms", "createdAt", "active", "expiry", "updatedAt", "deletedDate", "deleted", "account_id"],
  SIACheckWhereInput: ["AND", "OR", "NOT", "id", "badge", "sia_id", "status", "AuthUrl", "pubUrl", "createdAt", "updatedAt", "deletedDate", "deleted", "error", "transactions", "transactionId"],
  SIACheckOrderByWithRelationAndSearchRelevanceInput: ["id", "badge", "sia_id", "status", "AuthUrl", "pubUrl", "createdAt", "updatedAt", "deletedDate", "deleted", "error", "transactions", "transactionId", "_relevance"],
  SIACheckWhereUniqueInput: ["id"],
  SIACheckOrderByWithAggregationInput: ["id", "sia_id", "status", "AuthUrl", "pubUrl", "createdAt", "updatedAt", "deletedDate", "deleted", "error", "transactionId", "_count", "_avg", "_max", "_min", "_sum"],
  SIACheckScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "sia_id", "status", "AuthUrl", "pubUrl", "createdAt", "updatedAt", "deletedDate", "deleted", "error", "transactionId"],
  StatusOnAccountWhereInput: ["AND", "OR", "NOT", "statusId", "accountId", "status", "account", "createdAt", "updatedAt", "deletedDate", "deleted"],
  StatusOnAccountOrderByWithRelationAndSearchRelevanceInput: ["statusId", "accountId", "status", "account", "createdAt", "updatedAt", "deletedDate", "deleted", "_relevance"],
  StatusOnAccountWhereUniqueInput: ["statusId_accountId"],
  StatusOnAccountOrderByWithAggregationInput: ["statusId", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_max", "_min"],
  StatusOnAccountScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "statusId", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  StatusWhereInput: ["AND", "OR", "NOT", "id", "name", "account", "createdAt", "updatedAt", "deletedDate", "deleted"],
  StatusOrderByWithRelationAndSearchRelevanceInput: ["id", "name", "account", "createdAt", "updatedAt", "deletedDate", "deleted", "_relevance"],
  StatusWhereUniqueInput: ["id"],
  StatusOrderByWithAggregationInput: ["id", "name", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_max", "_min"],
  StatusScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubscriptionWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "deletedDate", "deleted", "name", "cost", "details", "accounts"],
  SubscriptionOrderByWithRelationAndSearchRelevanceInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "name", "cost", "details", "accounts", "_relevance"],
  SubscriptionWhereUniqueInput: ["id", "name"],
  SubscriptionOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "name", "cost", "details", "_count", "_max", "_min"],
  SubscriptionScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "deletedDate", "deleted", "name", "cost", "details"],
  SubscriptionOnAccountWhereInput: ["AND", "OR", "NOT", "subscriptionId", "subscription", "account", "accountId", "active", "deactivated", "activated", "startedAt", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubscriptionOnAccountOrderByWithRelationAndSearchRelevanceInput: ["subscriptionId", "subscription", "account", "accountId", "active", "deactivated", "activated", "startedAt", "createdAt", "updatedAt", "deletedDate", "deleted", "_relevance"],
  SubscriptionOnAccountWhereUniqueInput: ["accountId_subscriptionId"],
  SubscriptionOnAccountOrderByWithAggregationInput: ["subscriptionId", "accountId", "active", "deactivated", "activated", "startedAt", "createdAt", "updatedAt", "deletedDate", "deleted", "_count", "_max", "_min"],
  SubscriptionOnAccountScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "subscriptionId", "accountId", "active", "deactivated", "activated", "startedAt", "createdAt", "updatedAt", "deletedDate", "deleted"],
  TransactionWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "deletedDate", "deleted", "account", "accountId", "SIACheck", "data"],
  TransactionOrderByWithRelationAndSearchRelevanceInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "account", "accountId", "SIACheck", "data", "_relevance"],
  TransactionWhereUniqueInput: ["id"],
  TransactionOrderByWithAggregationInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "accountId", "data", "_count", "_max", "_min"],
  TransactionScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "deletedDate", "deleted", "accountId", "data"],
  AccountCreateInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountUpdateInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountCreateManyInput: ["id", "prn", "username", "accountType", "subsciption", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "resetPasswordToken", "resetPasswordExpires", "deletedDate", "deleted"],
  AccountUpdateManyMutationInput: ["id", "prn", "username", "accountType", "subsciption", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "resetPasswordToken", "resetPasswordExpires", "deletedDate", "deleted"],
  TokenCreateInput: ["id", "nickname", "createdAt", "updatedAt", "type", "value", "expiry", "account", "deletedDate", "deleted"],
  TokenUpdateInput: ["id", "nickname", "createdAt", "updatedAt", "type", "value", "expiry", "account", "deletedDate", "deleted"],
  TokenCreateManyInput: ["id", "nickname", "createdAt", "updatedAt", "type", "value", "expiry", "accountID", "deletedDate", "deleted"],
  TokenUpdateManyMutationInput: ["id", "nickname", "createdAt", "updatedAt", "type", "value", "expiry", "deletedDate", "deleted"],
  SaltCreateInput: ["id", "salt", "expiry", "account", "deletedDate", "deleted"],
  SaltUpdateInput: ["id", "salt", "expiry", "account", "deletedDate", "deleted"],
  SaltCreateManyInput: ["id", "salt", "expiry", "accountID", "deletedDate", "deleted"],
  SaltUpdateManyMutationInput: ["id", "salt", "expiry", "deletedDate", "deleted"],
  SubuserOnAccountCreateInput: ["account", "subuser", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubuserOnAccountUpdateInput: ["account", "subuser", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubuserOnAccountCreateManyInput: ["accountId", "subuserId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubuserOnAccountUpdateManyMutationInput: ["createdAt", "updatedAt", "deletedDate", "deleted"],
  EmployersOnAccountCreateInput: ["account", "employer", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmployersOnAccountUpdateInput: ["account", "employer", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmployersOnAccountCreateManyInput: ["accountId", "employerId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmployersOnAccountUpdateManyMutationInput: ["createdAt", "updatedAt", "deletedDate", "deleted"],
  ManagersOnAccountCreateInput: ["account", "managers", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ManagersOnAccountUpdateInput: ["account", "managers", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ManagersOnAccountCreateManyInput: ["accountId", "managersId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ManagersOnAccountUpdateManyMutationInput: ["createdAt", "updatedAt", "deletedDate", "deleted"],
  AddressCreateInput: ["id", "createdAt", "updatedAt", "account", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "contacts", "website", "hoursOfOperation", "venueStyle", "features", "details", "public", "primaryAccount", "deletedDate", "deleted", "featuresOfBuisness", "phones", "rooms"],
  AddressUpdateInput: ["id", "createdAt", "updatedAt", "account", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "contacts", "website", "hoursOfOperation", "venueStyle", "features", "details", "public", "primaryAccount", "deletedDate", "deleted", "featuresOfBuisness", "phones", "rooms"],
  AddressCreateManyInput: ["id", "createdAt", "updatedAt", "accountId", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "website", "hoursOfOperation", "features", "details", "public", "primaryaccountId", "deletedDate", "deleted"],
  AddressUpdateManyMutationInput: ["id", "createdAt", "updatedAt", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "website", "hoursOfOperation", "features", "details", "public", "deletedDate", "deleted"],
  ContactAtAddressCreateInput: ["account", "address", "jobTitle", "phone", "email", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ContactAtAddressUpdateInput: ["account", "address", "jobTitle", "phone", "email", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ContactAtAddressCreateManyInput: ["accountId", "addressId", "jobTitle", "phone", "emailId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ContactAtAddressUpdateManyMutationInput: ["jobTitle", "phone", "createdAt", "updatedAt", "deletedDate", "deleted"],
  VenueStyleCreateInput: ["id", "createdAt", "updatedAt", "address", "name", "details", "deletedDate", "deleted"],
  VenueStyleUpdateInput: ["id", "createdAt", "updatedAt", "address", "name", "details", "deletedDate", "deleted"],
  VenueStyleCreateManyInput: ["id", "createdAt", "updatedAt", "name", "details", "deletedDate", "deleted"],
  VenueStyleUpdateManyMutationInput: ["id", "createdAt", "updatedAt", "name", "details", "deletedDate", "deleted"],
  EmailCreateInput: ["id", "associatedContact", "domain", "email", "account", "verified", "public", "primary", "path", "copy", "notifyFrom", "imap_authUser", "imap_authPass", "imap_accessToken", "imap_authServer", "imap_host", "imap_port", "imap_secure", "imap_tslRejectUnauthorized", "imap_tslMinVersion", "imap_resyncDelay", "smtp_authUser", "smtp_authPass", "smtp_accessToken", "smtp_authServer", "smtp_host", "smtp_port", "smtp_secure", "smtp_tslRejectUnauthorized", "smtp_tslMinVersion", "oauth2_authorize", "oauth2_provider", "oauth2_authUser", "oauth2_accessToken", "oauth2_refreshToken", "oauth2_expires", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmailUpdateInput: ["id", "associatedContact", "domain", "email", "account", "verified", "public", "primary", "path", "copy", "notifyFrom", "imap_authUser", "imap_authPass", "imap_accessToken", "imap_authServer", "imap_host", "imap_port", "imap_secure", "imap_tslRejectUnauthorized", "imap_tslMinVersion", "imap_resyncDelay", "smtp_authUser", "smtp_authPass", "smtp_accessToken", "smtp_authServer", "smtp_host", "smtp_port", "smtp_secure", "smtp_tslRejectUnauthorized", "smtp_tslMinVersion", "oauth2_authorize", "oauth2_provider", "oauth2_authUser", "oauth2_accessToken", "oauth2_refreshToken", "oauth2_expires", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmailCreateManyInput: ["id", "domainId", "email", "accountId", "verified", "public", "primary", "path", "copy", "notifyFrom", "imap_authUser", "imap_authPass", "imap_accessToken", "imap_authServer", "imap_host", "imap_port", "imap_secure", "imap_tslRejectUnauthorized", "imap_tslMinVersion", "imap_resyncDelay", "smtp_authUser", "smtp_authPass", "smtp_accessToken", "smtp_authServer", "smtp_host", "smtp_port", "smtp_secure", "smtp_tslRejectUnauthorized", "smtp_tslMinVersion", "oauth2_authorize", "oauth2_provider", "oauth2_authUser", "oauth2_accessToken", "oauth2_refreshToken", "oauth2_expires", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmailUpdateManyMutationInput: ["id", "email", "verified", "public", "primary", "path", "copy", "notifyFrom", "imap_authUser", "imap_authPass", "imap_accessToken", "imap_authServer", "imap_host", "imap_port", "imap_secure", "imap_tslRejectUnauthorized", "imap_tslMinVersion", "imap_resyncDelay", "smtp_authUser", "smtp_authPass", "smtp_accessToken", "smtp_authServer", "smtp_host", "smtp_port", "smtp_secure", "smtp_tslRejectUnauthorized", "smtp_tslMinVersion", "oauth2_authorize", "oauth2_provider", "oauth2_authUser", "oauth2_accessToken", "oauth2_refreshToken", "oauth2_expires", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ApplicationCreateInput: ["id", "name", "account", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ApplicationUpdateInput: ["id", "name", "account", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ApplicationCreateManyInput: ["id", "name", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ApplicationUpdateManyMutationInput: ["id", "name", "createdAt", "updatedAt", "deletedDate", "deleted"],
  DomainCreateInput: ["id", "domain", "verified", "dnsType", "linkedEmails", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  DomainUpdateInput: ["id", "domain", "verified", "dnsType", "linkedEmails", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  DomainCreateManyInput: ["id", "domain", "verified", "dnsType", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  DomainUpdateManyMutationInput: ["id", "domain", "verified", "dnsType", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureCreateInput: ["id", "name", "type", "featureOfRoom", "featureOfAddress", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureUpdateInput: ["id", "name", "type", "featureOfRoom", "featureOfAddress", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureCreateManyInput: ["id", "name", "type", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureUpdateManyMutationInput: ["id", "name", "type", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfRoomCreateInput: ["feature", "room", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfRoomUpdateInput: ["feature", "room", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfRoomCreateManyInput: ["roomId", "featureId", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfRoomUpdateManyMutationInput: ["data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfAddressCreateInput: ["feature", "address", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfAddressUpdateInput: ["feature", "address", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfAddressCreateManyInput: ["addressId", "featureId", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfAddressUpdateManyMutationInput: ["data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  RoomCreateInput: ["id", "featuresOfRoom", "createdAt", "updatedAt", "deletedDate", "deleted", "address", "name", "floor", "building", "accessibility", "checkin", "checkout", "length", "width", "height", "arrangements"],
  RoomUpdateInput: ["id", "featuresOfRoom", "createdAt", "updatedAt", "deletedDate", "deleted", "address", "name", "floor", "building", "accessibility", "checkin", "checkout", "length", "width", "height", "arrangements"],
  RoomCreateManyInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "addressId", "name", "floor", "building", "accessibility", "checkin", "checkout", "length", "width", "height"],
  RoomUpdateManyMutationInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "name", "floor", "building", "accessibility", "checkin", "checkout", "length", "width", "height"],
  FilesCreateInput: ["id", "name", "rtw", "account", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FilesUpdateInput: ["id", "name", "rtw", "account", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FilesCreateManyInput: ["id", "name", "rtwId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FilesUpdateManyMutationInput: ["id", "name", "createdAt", "updatedAt", "deletedDate", "deleted"],
  RTWCreateInput: ["id", "files", "name", "active", "startDate", "endDate", "account", "createdAt", "updatedAt", "deletedDate", "deleted"],
  RTWUpdateInput: ["id", "files", "name", "active", "startDate", "endDate", "account", "createdAt", "updatedAt", "deletedDate", "deleted"],
  RTWCreateManyInput: ["id", "name", "active", "startDate", "endDate", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  RTWUpdateManyMutationInput: ["id", "name", "active", "startDate", "endDate", "createdAt", "updatedAt", "deletedDate", "deleted"],
  PhoneCreateInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "account", "address", "phone", "public"],
  PhoneUpdateInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "account", "address", "phone", "public"],
  PhoneCreateManyInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "accountId", "addressId", "phone", "public"],
  PhoneUpdateManyMutationInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "phone", "public"],
  ArrangementOfRoomCreateInput: ["arrangement", "room", "capacity", "details", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ArrangementOfRoomUpdateInput: ["arrangement", "room", "capacity", "details", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ArrangementOfRoomCreateManyInput: ["roomId", "arrangementId", "capacity", "details", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ArrangementOfRoomUpdateManyMutationInput: ["capacity", "details", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ArrangementCreateInput: ["id", "createdAt", "updatedAt", "room", "name", "icon", "details", "deletedDate", "deleted"],
  ArrangementUpdateInput: ["id", "createdAt", "updatedAt", "room", "name", "icon", "details", "deletedDate", "deleted"],
  ArrangementCreateManyInput: ["id", "createdAt", "updatedAt", "name", "icon", "details", "deletedDate", "deleted"],
  ArrangementUpdateManyMutationInput: ["id", "createdAt", "updatedAt", "name", "icon", "details", "deletedDate", "deleted"],
  SIABadgeCreateInput: ["id", "licenseSector", "type", "licenseExplanation", "additionalTerms", "createdAt", "active", "expiry", "updatedAt", "deletedDate", "deleted", "siaChecks", "account"],
  SIABadgeUpdateInput: ["id", "licenseSector", "type", "licenseExplanation", "additionalTerms", "createdAt", "active", "expiry", "updatedAt", "deletedDate", "deleted", "siaChecks", "account"],
  SIABadgeCreateManyInput: ["id", "licenseSector", "type", "licenseExplanation", "additionalTerms", "createdAt", "active", "expiry", "updatedAt", "deletedDate", "deleted", "account_id"],
  SIABadgeUpdateManyMutationInput: ["id", "licenseSector", "type", "licenseExplanation", "additionalTerms", "createdAt", "active", "expiry", "updatedAt", "deletedDate", "deleted"],
  SIACheckCreateInput: ["id", "badge", "status", "AuthUrl", "pubUrl", "createdAt", "updatedAt", "deletedDate", "deleted", "error", "transactions"],
  SIACheckUpdateInput: ["id", "badge", "status", "AuthUrl", "pubUrl", "createdAt", "updatedAt", "deletedDate", "deleted", "error", "transactions"],
  SIACheckCreateManyInput: ["id", "sia_id", "status", "AuthUrl", "pubUrl", "createdAt", "updatedAt", "deletedDate", "deleted", "error", "transactionId"],
  SIACheckUpdateManyMutationInput: ["id", "status", "AuthUrl", "pubUrl", "createdAt", "updatedAt", "deletedDate", "deleted", "error"],
  StatusOnAccountCreateInput: ["status", "account", "createdAt", "updatedAt", "deletedDate", "deleted"],
  StatusOnAccountUpdateInput: ["status", "account", "createdAt", "updatedAt", "deletedDate", "deleted"],
  StatusOnAccountCreateManyInput: ["statusId", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  StatusOnAccountUpdateManyMutationInput: ["createdAt", "updatedAt", "deletedDate", "deleted"],
  StatusCreateInput: ["id", "name", "account", "createdAt", "updatedAt", "deletedDate", "deleted"],
  StatusUpdateInput: ["id", "name", "account", "createdAt", "updatedAt", "deletedDate", "deleted"],
  StatusCreateManyInput: ["id", "name", "createdAt", "updatedAt", "deletedDate", "deleted"],
  StatusUpdateManyMutationInput: ["id", "name", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubscriptionCreateInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "name", "cost", "details", "accounts"],
  SubscriptionUpdateInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "name", "cost", "details", "accounts"],
  SubscriptionCreateManyInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "name", "cost", "details"],
  SubscriptionUpdateManyMutationInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "name", "cost", "details"],
  SubscriptionOnAccountCreateInput: ["subscription", "account", "active", "deactivated", "activated", "startedAt", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubscriptionOnAccountUpdateInput: ["subscription", "account", "active", "deactivated", "activated", "startedAt", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubscriptionOnAccountCreateManyInput: ["subscriptionId", "accountId", "active", "deactivated", "activated", "startedAt", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubscriptionOnAccountUpdateManyMutationInput: ["active", "deactivated", "activated", "startedAt", "createdAt", "updatedAt", "deletedDate", "deleted"],
  TransactionCreateInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "account", "SIACheck", "data"],
  TransactionUpdateInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "account", "SIACheck", "data"],
  TransactionCreateManyInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "accountId", "data"],
  TransactionUpdateManyMutationInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "data"],
  StringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "search", "mode", "not"],
  IntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  StringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "search", "mode", "not"],
  EnumAccountTypeFilter: ["equals", "in", "notIn", "not"],
  BoolFilter: ["equals", "not"],
  EmployersOnAccountListRelationFilter: ["every", "some", "none"],
  SubuserOnAccountListRelationFilter: ["every", "some", "none"],
  ManagersOnAccountListRelationFilter: ["every", "some", "none"],
  DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  DateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  EnumTitleNullableFilter: ["equals", "in", "notIn", "not"],
  SaltRelationFilter: ["is", "isNot"],
  TokenListRelationFilter: ["every", "some", "none"],
  BoolNullableFilter: ["equals", "not"],
  AddressRelationFilter: ["is", "isNot"],
  AddressListRelationFilter: ["every", "some", "none"],
  ContactAtAddressListRelationFilter: ["every", "some", "none"],
  ApplicationListRelationFilter: ["every", "some", "none"],
  EmailListRelationFilter: ["every", "some", "none"],
  FilesListRelationFilter: ["every", "some", "none"],
  PhoneListRelationFilter: ["every", "some", "none"],
  RTWListRelationFilter: ["every", "some", "none"],
  SIABadgeListRelationFilter: ["every", "some", "none"],
  StatusOnAccountListRelationFilter: ["every", "some", "none"],
  SubscriptionOnAccountListRelationFilter: ["every", "some", "none"],
  TransactionListRelationFilter: ["every", "some", "none"],
  EmployersOnAccountOrderByRelationAggregateInput: ["_count"],
  SubuserOnAccountOrderByRelationAggregateInput: ["_count"],
  ManagersOnAccountOrderByRelationAggregateInput: ["_count"],
  TokenOrderByRelationAggregateInput: ["_count"],
  AddressOrderByRelationAggregateInput: ["_count"],
  ContactAtAddressOrderByRelationAggregateInput: ["_count"],
  ApplicationOrderByRelationAggregateInput: ["_count"],
  EmailOrderByRelationAggregateInput: ["_count"],
  FilesOrderByRelationAggregateInput: ["_count"],
  PhoneOrderByRelationAggregateInput: ["_count"],
  RTWOrderByRelationAggregateInput: ["_count"],
  SIABadgeOrderByRelationAggregateInput: ["_count"],
  StatusOnAccountOrderByRelationAggregateInput: ["_count"],
  SubscriptionOnAccountOrderByRelationAggregateInput: ["_count"],
  TransactionOrderByRelationAggregateInput: ["_count"],
  AccountOrderByRelevanceInput: ["fields", "sort", "search"],
  AccountCountOrderByAggregateInput: ["id", "prn", "username", "accountType", "subsciption", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "resetPasswordToken", "resetPasswordExpires", "deletedDate", "deleted"],
  AccountAvgOrderByAggregateInput: ["prn"],
  AccountMaxOrderByAggregateInput: ["id", "prn", "username", "accountType", "subsciption", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "resetPasswordToken", "resetPasswordExpires", "deletedDate", "deleted"],
  AccountMinOrderByAggregateInput: ["id", "prn", "username", "accountType", "subsciption", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "resetPasswordToken", "resetPasswordExpires", "deletedDate", "deleted"],
  AccountSumOrderByAggregateInput: ["prn"],
  StringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "search", "mode", "not", "_count", "_min", "_max"],
  IntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  StringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "search", "mode", "not", "_count", "_min", "_max"],
  EnumAccountTypeWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  BoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  DateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  DateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  EnumTitleNullableWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  BoolNullableWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  EnumTokenTypeFilter: ["equals", "in", "notIn", "not"],
  AccountRelationFilter: ["is", "isNot"],
  TokenOrderByRelevanceInput: ["fields", "sort", "search"],
  TokenCountOrderByAggregateInput: ["id", "nickname", "createdAt", "updatedAt", "type", "value", "expiry", "accountID", "deletedDate", "deleted"],
  TokenMaxOrderByAggregateInput: ["id", "nickname", "createdAt", "updatedAt", "type", "value", "expiry", "accountID", "deletedDate", "deleted"],
  TokenMinOrderByAggregateInput: ["id", "nickname", "createdAt", "updatedAt", "type", "value", "expiry", "accountID", "deletedDate", "deleted"],
  EnumTokenTypeWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  SaltOrderByRelevanceInput: ["fields", "sort", "search"],
  SaltCountOrderByAggregateInput: ["id", "salt", "expiry", "accountID", "deletedDate", "deleted"],
  SaltMaxOrderByAggregateInput: ["id", "salt", "expiry", "accountID", "deletedDate", "deleted"],
  SaltMinOrderByAggregateInput: ["id", "salt", "expiry", "accountID", "deletedDate", "deleted"],
  SubuserOnAccountOrderByRelevanceInput: ["fields", "sort", "search"],
  SubuserOnAccountAccountIdSubuserIdCompoundUniqueInput: ["accountId", "subuserId"],
  SubuserOnAccountCountOrderByAggregateInput: ["accountId", "subuserId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubuserOnAccountMaxOrderByAggregateInput: ["accountId", "subuserId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubuserOnAccountMinOrderByAggregateInput: ["accountId", "subuserId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmployersOnAccountOrderByRelevanceInput: ["fields", "sort", "search"],
  EmployersOnAccountAccountIdEmployerIdCompoundUniqueInput: ["accountId", "employerId"],
  EmployersOnAccountCountOrderByAggregateInput: ["accountId", "employerId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmployersOnAccountMaxOrderByAggregateInput: ["accountId", "employerId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmployersOnAccountMinOrderByAggregateInput: ["accountId", "employerId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ManagersOnAccountOrderByRelevanceInput: ["fields", "sort", "search"],
  ManagersOnAccountAccountIdManagersIdCompoundUniqueInput: ["accountId", "managersId"],
  ManagersOnAccountCountOrderByAggregateInput: ["accountId", "managersId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ManagersOnAccountMaxOrderByAggregateInput: ["accountId", "managersId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ManagersOnAccountMinOrderByAggregateInput: ["accountId", "managersId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EnumAddressTypeFilter: ["equals", "in", "notIn", "not"],
  JsonNullableFilter: ["equals", "path", "string_contains", "string_starts_with", "string_ends_with", "array_contains", "array_starts_with", "array_ends_with", "lt", "lte", "gt", "gte", "not"],
  VenueStyleListRelationFilter: ["every", "some", "none"],
  FeatureOfAddressListRelationFilter: ["every", "some", "none"],
  RoomListRelationFilter: ["every", "some", "none"],
  VenueStyleOrderByRelationAggregateInput: ["_count"],
  FeatureOfAddressOrderByRelationAggregateInput: ["_count"],
  RoomOrderByRelationAggregateInput: ["_count"],
  AddressOrderByRelevanceInput: ["fields", "sort", "search"],
  AddressCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "accountId", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "website", "hoursOfOperation", "features", "details", "public", "primaryaccountId", "deletedDate", "deleted"],
  AddressMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "accountId", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "website", "features", "public", "primaryaccountId", "deletedDate", "deleted"],
  AddressMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "accountId", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "website", "features", "public", "primaryaccountId", "deletedDate", "deleted"],
  EnumAddressTypeWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  JsonNullableWithAggregatesFilter: ["equals", "path", "string_contains", "string_starts_with", "string_ends_with", "array_contains", "array_starts_with", "array_ends_with", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  EmailRelationFilter: ["is", "isNot"],
  ContactAtAddressOrderByRelevanceInput: ["fields", "sort", "search"],
  ContactAtAddressAccountIdAddressIdCompoundUniqueInput: ["accountId", "addressId"],
  ContactAtAddressCountOrderByAggregateInput: ["accountId", "addressId", "jobTitle", "phone", "emailId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ContactAtAddressMaxOrderByAggregateInput: ["accountId", "addressId", "jobTitle", "phone", "emailId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ContactAtAddressMinOrderByAggregateInput: ["accountId", "addressId", "jobTitle", "phone", "emailId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  VenueStyleOrderByRelevanceInput: ["fields", "sort", "search"],
  VenueStyleCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name", "details", "deletedDate", "deleted"],
  VenueStyleMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name", "details", "deletedDate", "deleted"],
  VenueStyleMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name", "details", "deletedDate", "deleted"],
  DomainRelationFilter: ["is", "isNot"],
  EmailOrderByRelevanceInput: ["fields", "sort", "search"],
  EmailCountOrderByAggregateInput: ["id", "domainId", "email", "accountId", "verified", "public", "primary", "path", "copy", "notifyFrom", "imap_authUser", "imap_authPass", "imap_accessToken", "imap_authServer", "imap_host", "imap_port", "imap_secure", "imap_tslRejectUnauthorized", "imap_tslMinVersion", "imap_resyncDelay", "smtp_authUser", "smtp_authPass", "smtp_accessToken", "smtp_authServer", "smtp_host", "smtp_port", "smtp_secure", "smtp_tslRejectUnauthorized", "smtp_tslMinVersion", "oauth2_authorize", "oauth2_provider", "oauth2_authUser", "oauth2_accessToken", "oauth2_refreshToken", "oauth2_expires", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmailAvgOrderByAggregateInput: ["imap_resyncDelay"],
  EmailMaxOrderByAggregateInput: ["id", "domainId", "email", "accountId", "verified", "public", "primary", "path", "copy", "notifyFrom", "imap_authUser", "imap_authPass", "imap_accessToken", "imap_authServer", "imap_host", "imap_port", "imap_secure", "imap_tslRejectUnauthorized", "imap_tslMinVersion", "imap_resyncDelay", "smtp_authUser", "smtp_authPass", "smtp_accessToken", "smtp_authServer", "smtp_host", "smtp_port", "smtp_secure", "smtp_tslRejectUnauthorized", "smtp_tslMinVersion", "oauth2_authorize", "oauth2_provider", "oauth2_authUser", "oauth2_accessToken", "oauth2_refreshToken", "oauth2_expires", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmailMinOrderByAggregateInput: ["id", "domainId", "email", "accountId", "verified", "public", "primary", "path", "copy", "notifyFrom", "imap_authUser", "imap_authPass", "imap_accessToken", "imap_authServer", "imap_host", "imap_port", "imap_secure", "imap_tslRejectUnauthorized", "imap_tslMinVersion", "imap_resyncDelay", "smtp_authUser", "smtp_authPass", "smtp_accessToken", "smtp_authServer", "smtp_host", "smtp_port", "smtp_secure", "smtp_tslRejectUnauthorized", "smtp_tslMinVersion", "oauth2_authorize", "oauth2_provider", "oauth2_authUser", "oauth2_accessToken", "oauth2_refreshToken", "oauth2_expires", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmailSumOrderByAggregateInput: ["imap_resyncDelay"],
  ApplicationOrderByRelevanceInput: ["fields", "sort", "search"],
  ApplicationCountOrderByAggregateInput: ["id", "name", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ApplicationMaxOrderByAggregateInput: ["id", "name", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ApplicationMinOrderByAggregateInput: ["id", "name", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EnumdnsTypeFilter: ["equals", "in", "notIn", "not"],
  JsonFilter: ["equals", "path", "string_contains", "string_starts_with", "string_ends_with", "array_contains", "array_starts_with", "array_ends_with", "lt", "lte", "gt", "gte", "not"],
  DomainOrderByRelevanceInput: ["fields", "sort", "search"],
  DomainCountOrderByAggregateInput: ["id", "domain", "verified", "dnsType", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  DomainMaxOrderByAggregateInput: ["id", "domain", "verified", "dnsType", "createdAt", "updatedAt", "deletedDate", "deleted"],
  DomainMinOrderByAggregateInput: ["id", "domain", "verified", "dnsType", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EnumdnsTypeWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  JsonWithAggregatesFilter: ["equals", "path", "string_contains", "string_starts_with", "string_ends_with", "array_contains", "array_starts_with", "array_ends_with", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  EnumFeatureTypeFilter: ["equals", "in", "notIn", "not"],
  FeatureOfRoomListRelationFilter: ["every", "some", "none"],
  FeatureOfRoomOrderByRelationAggregateInput: ["_count"],
  FeatureOrderByRelevanceInput: ["fields", "sort", "search"],
  FeatureCountOrderByAggregateInput: ["id", "name", "type", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureMaxOrderByAggregateInput: ["id", "name", "type", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureMinOrderByAggregateInput: ["id", "name", "type", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EnumFeatureTypeWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  FeatureRelationFilter: ["is", "isNot"],
  RoomRelationFilter: ["is", "isNot"],
  FeatureOfRoomOrderByRelevanceInput: ["fields", "sort", "search"],
  FeatureOfRoomRoomIdFeatureIdCompoundUniqueInput: ["roomId", "featureId"],
  FeatureOfRoomCountOrderByAggregateInput: ["roomId", "featureId", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfRoomMaxOrderByAggregateInput: ["roomId", "featureId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfRoomMinOrderByAggregateInput: ["roomId", "featureId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfAddressOrderByRelevanceInput: ["fields", "sort", "search"],
  FeatureOfAddressAddressIdFeatureIdCompoundUniqueInput: ["addressId", "featureId"],
  FeatureOfAddressCountOrderByAggregateInput: ["addressId", "featureId", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfAddressMaxOrderByAggregateInput: ["addressId", "featureId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfAddressMinOrderByAggregateInput: ["addressId", "featureId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ArrangementOfRoomListRelationFilter: ["every", "some", "none"],
  ArrangementOfRoomOrderByRelationAggregateInput: ["_count"],
  RoomOrderByRelevanceInput: ["fields", "sort", "search"],
  RoomCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "addressId", "name", "floor", "building", "accessibility", "checkin", "checkout", "length", "width", "height"],
  RoomMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "addressId", "name", "floor", "building", "accessibility", "checkin", "checkout", "length", "width", "height"],
  RoomMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "addressId", "name", "floor", "building", "accessibility", "checkin", "checkout", "length", "width", "height"],
  RTWRelationFilter: ["is", "isNot"],
  AccountListRelationFilter: ["every", "some", "none"],
  AccountOrderByRelationAggregateInput: ["_count"],
  FilesOrderByRelevanceInput: ["fields", "sort", "search"],
  FilesCountOrderByAggregateInput: ["id", "name", "rtwId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FilesMaxOrderByAggregateInput: ["id", "name", "rtwId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FilesMinOrderByAggregateInput: ["id", "name", "rtwId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  RTWOrderByRelevanceInput: ["fields", "sort", "search"],
  RTWCountOrderByAggregateInput: ["id", "name", "active", "startDate", "endDate", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  RTWMaxOrderByAggregateInput: ["id", "name", "active", "startDate", "endDate", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  RTWMinOrderByAggregateInput: ["id", "name", "active", "startDate", "endDate", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  PhoneOrderByRelevanceInput: ["fields", "sort", "search"],
  PhoneCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "accountId", "addressId", "phone", "public"],
  PhoneMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "accountId", "addressId", "phone", "public"],
  PhoneMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "accountId", "addressId", "phone", "public"],
  ArrangementRelationFilter: ["is", "isNot"],
  ArrangementOfRoomOrderByRelevanceInput: ["fields", "sort", "search"],
  ArrangementOfRoomRoomIdArrangementIdCompoundUniqueInput: ["roomId", "arrangementId"],
  ArrangementOfRoomCountOrderByAggregateInput: ["roomId", "arrangementId", "capacity", "details", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ArrangementOfRoomAvgOrderByAggregateInput: ["capacity"],
  ArrangementOfRoomMaxOrderByAggregateInput: ["roomId", "arrangementId", "capacity", "details", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ArrangementOfRoomMinOrderByAggregateInput: ["roomId", "arrangementId", "capacity", "details", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ArrangementOfRoomSumOrderByAggregateInput: ["capacity"],
  ArrangementOrderByRelevanceInput: ["fields", "sort", "search"],
  ArrangementCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name", "icon", "details", "deletedDate", "deleted"],
  ArrangementMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name", "icon", "details", "deletedDate", "deleted"],
  ArrangementMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "name", "icon", "details", "deletedDate", "deleted"],
  EnumLicenseSectorFilter: ["equals", "in", "notIn", "not"],
  EnumLicenseTypeFilter: ["equals", "in", "notIn", "not"],
  SIACheckListRelationFilter: ["every", "some", "none"],
  SIACheckOrderByRelationAggregateInput: ["_count"],
  SIABadgeOrderByRelevanceInput: ["fields", "sort", "search"],
  SIABadgeCountOrderByAggregateInput: ["id", "licenseSector", "type", "licenseExplanation", "additionalTerms", "createdAt", "active", "expiry", "updatedAt", "deletedDate", "deleted", "account_id"],
  SIABadgeAvgOrderByAggregateInput: ["id"],
  SIABadgeMaxOrderByAggregateInput: ["id", "licenseSector", "type", "licenseExplanation", "additionalTerms", "createdAt", "active", "expiry", "updatedAt", "deletedDate", "deleted", "account_id"],
  SIABadgeMinOrderByAggregateInput: ["id", "licenseSector", "type", "licenseExplanation", "additionalTerms", "createdAt", "active", "expiry", "updatedAt", "deletedDate", "deleted", "account_id"],
  SIABadgeSumOrderByAggregateInput: ["id"],
  EnumLicenseSectorWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  EnumLicenseTypeWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  SIABadgeRelationFilter: ["is", "isNot"],
  IntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  EnumBadgeStatusFilter: ["equals", "in", "notIn", "not"],
  TransactionRelationFilter: ["is", "isNot"],
  SIACheckOrderByRelevanceInput: ["fields", "sort", "search"],
  SIACheckCountOrderByAggregateInput: ["id", "sia_id", "status", "AuthUrl", "pubUrl", "createdAt", "updatedAt", "deletedDate", "deleted", "error", "transactionId"],
  SIACheckAvgOrderByAggregateInput: ["sia_id"],
  SIACheckMaxOrderByAggregateInput: ["id", "sia_id", "status", "AuthUrl", "pubUrl", "createdAt", "updatedAt", "deletedDate", "deleted", "error", "transactionId"],
  SIACheckMinOrderByAggregateInput: ["id", "sia_id", "status", "AuthUrl", "pubUrl", "createdAt", "updatedAt", "deletedDate", "deleted", "error", "transactionId"],
  SIACheckSumOrderByAggregateInput: ["sia_id"],
  IntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  EnumBadgeStatusWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  StatusRelationFilter: ["is", "isNot"],
  StatusOnAccountOrderByRelevanceInput: ["fields", "sort", "search"],
  StatusOnAccountStatusIdAccountIdCompoundUniqueInput: ["statusId", "accountId"],
  StatusOnAccountCountOrderByAggregateInput: ["statusId", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  StatusOnAccountMaxOrderByAggregateInput: ["statusId", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  StatusOnAccountMinOrderByAggregateInput: ["statusId", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  StatusOrderByRelevanceInput: ["fields", "sort", "search"],
  StatusCountOrderByAggregateInput: ["id", "name", "createdAt", "updatedAt", "deletedDate", "deleted"],
  StatusMaxOrderByAggregateInput: ["id", "name", "createdAt", "updatedAt", "deletedDate", "deleted"],
  StatusMinOrderByAggregateInput: ["id", "name", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubscriptionOrderByRelevanceInput: ["fields", "sort", "search"],
  SubscriptionCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "name", "cost", "details"],
  SubscriptionMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "name", "cost", "details"],
  SubscriptionMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "name", "cost", "details"],
  SubscriptionRelationFilter: ["is", "isNot"],
  SubscriptionOnAccountOrderByRelevanceInput: ["fields", "sort", "search"],
  SubscriptionOnAccountAccountIdSubscriptionIdCompoundUniqueInput: ["accountId", "subscriptionId"],
  SubscriptionOnAccountCountOrderByAggregateInput: ["subscriptionId", "accountId", "active", "deactivated", "activated", "startedAt", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubscriptionOnAccountMaxOrderByAggregateInput: ["subscriptionId", "accountId", "active", "deactivated", "activated", "startedAt", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubscriptionOnAccountMinOrderByAggregateInput: ["subscriptionId", "accountId", "active", "deactivated", "activated", "startedAt", "createdAt", "updatedAt", "deletedDate", "deleted"],
  TransactionOrderByRelevanceInput: ["fields", "sort", "search"],
  TransactionCountOrderByAggregateInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "accountId", "data"],
  TransactionMaxOrderByAggregateInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "accountId"],
  TransactionMinOrderByAggregateInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "accountId"],
  EmployersOnAccountCreateNestedManyWithoutAccountInput: ["create", "connectOrCreate", "createMany", "connect"],
  EmployersOnAccountCreateNestedManyWithoutEmployerInput: ["create", "connectOrCreate", "createMany", "connect"],
  SubuserOnAccountCreateNestedManyWithoutAccountInput: ["create", "connectOrCreate", "createMany", "connect"],
  SubuserOnAccountCreateNestedManyWithoutSubuserInput: ["create", "connectOrCreate", "createMany", "connect"],
  ManagersOnAccountCreateNestedManyWithoutAccountInput: ["create", "connectOrCreate", "createMany", "connect"],
  ManagersOnAccountCreateNestedManyWithoutManagersInput: ["create", "connectOrCreate", "createMany", "connect"],
  SaltCreateNestedOneWithoutAccountInput: ["create", "connectOrCreate", "connect"],
  TokenCreateNestedManyWithoutAccountInput: ["create", "connectOrCreate", "createMany", "connect"],
  AddressCreateNestedOneWithoutPrimaryAccountInput: ["create", "connectOrCreate", "connect"],
  AddressCreateNestedManyWithoutAccountInput: ["create", "connectOrCreate", "createMany", "connect"],
  ContactAtAddressCreateNestedManyWithoutAccountInput: ["create", "connectOrCreate", "createMany", "connect"],
  ApplicationCreateNestedManyWithoutAccountInput: ["create", "connectOrCreate", "createMany", "connect"],
  EmailCreateNestedManyWithoutAccountInput: ["create", "connectOrCreate", "createMany", "connect"],
  FilesCreateNestedManyWithoutAccountInput: ["create", "connectOrCreate", "connect"],
  PhoneCreateNestedManyWithoutAccountInput: ["create", "connectOrCreate", "createMany", "connect"],
  RTWCreateNestedManyWithoutAccountInput: ["create", "connectOrCreate", "createMany", "connect"],
  SIABadgeCreateNestedManyWithoutAccountInput: ["create", "connectOrCreate", "createMany", "connect"],
  StatusOnAccountCreateNestedManyWithoutAccountInput: ["create", "connectOrCreate", "createMany", "connect"],
  SubscriptionOnAccountCreateNestedManyWithoutAccountInput: ["create", "connectOrCreate", "createMany", "connect"],
  TransactionCreateNestedManyWithoutAccountInput: ["create", "connectOrCreate", "createMany", "connect"],
  StringFieldUpdateOperationsInput: ["set"],
  IntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
  NullableStringFieldUpdateOperationsInput: ["set"],
  EnumAccountTypeFieldUpdateOperationsInput: ["set"],
  BoolFieldUpdateOperationsInput: ["set"],
  EmployersOnAccountUpdateManyWithoutAccountInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  EmployersOnAccountUpdateManyWithoutEmployerInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  SubuserOnAccountUpdateManyWithoutAccountInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  SubuserOnAccountUpdateManyWithoutSubuserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ManagersOnAccountUpdateManyWithoutAccountInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ManagersOnAccountUpdateManyWithoutManagersInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  DateTimeFieldUpdateOperationsInput: ["set"],
  NullableDateTimeFieldUpdateOperationsInput: ["set"],
  NullableEnumTitleFieldUpdateOperationsInput: ["set"],
  SaltUpdateOneWithoutAccountInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  TokenUpdateManyWithoutAccountInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  NullableBoolFieldUpdateOperationsInput: ["set"],
  AddressUpdateOneWithoutPrimaryAccountInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  AddressUpdateManyWithoutAccountInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ContactAtAddressUpdateManyWithoutAccountInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ApplicationUpdateManyWithoutAccountInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  EmailUpdateManyWithoutAccountInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  FilesUpdateManyWithoutAccountInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  PhoneUpdateManyWithoutAccountInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  RTWUpdateManyWithoutAccountInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  SIABadgeUpdateManyWithoutAccountInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  StatusOnAccountUpdateManyWithoutAccountInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  SubscriptionOnAccountUpdateManyWithoutAccountInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  TransactionUpdateManyWithoutAccountInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  AccountCreateNestedOneWithoutApiTokenInput: ["create", "connectOrCreate", "connect"],
  EnumTokenTypeFieldUpdateOperationsInput: ["set"],
  AccountUpdateOneRequiredWithoutApiTokenInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  AccountCreateNestedOneWithoutSaltInput: ["create", "connectOrCreate", "connect"],
  AccountUpdateOneWithoutSaltInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  AccountCreateNestedOneWithoutAccessesInput: ["create", "connectOrCreate", "connect"],
  AccountCreateNestedOneWithoutSubusersInput: ["create", "connectOrCreate", "connect"],
  AccountUpdateOneRequiredWithoutAccessesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  AccountUpdateOneRequiredWithoutSubusersInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  AccountCreateNestedOneWithoutEmployerInput: ["create", "connectOrCreate", "connect"],
  AccountCreateNestedOneWithoutEmployeesInput: ["create", "connectOrCreate", "connect"],
  AccountUpdateOneRequiredWithoutEmployerInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  AccountUpdateOneRequiredWithoutEmployeesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  AccountCreateNestedOneWithoutAccountsInput: ["create", "connectOrCreate", "connect"],
  AccountCreateNestedOneWithoutManagersInput: ["create", "connectOrCreate", "connect"],
  AccountUpdateOneRequiredWithoutAccountsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  AccountUpdateOneRequiredWithoutManagersInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  AccountCreateNestedOneWithoutAddressesInput: ["create", "connectOrCreate", "connect"],
  ContactAtAddressCreateNestedManyWithoutAddressInput: ["create", "connectOrCreate", "createMany", "connect"],
  VenueStyleCreateNestedManyWithoutAddressInput: ["create", "connectOrCreate", "connect"],
  AccountCreateNestedOneWithoutPrimaryAddressInput: ["create", "connectOrCreate", "connect"],
  FeatureOfAddressCreateNestedManyWithoutAddressInput: ["create", "connectOrCreate", "createMany", "connect"],
  PhoneCreateNestedManyWithoutAddressInput: ["create", "connectOrCreate", "createMany", "connect"],
  RoomCreateNestedManyWithoutAddressInput: ["create", "connectOrCreate", "createMany", "connect"],
  AccountUpdateOneRequiredWithoutAddressesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  EnumAddressTypeFieldUpdateOperationsInput: ["set"],
  ContactAtAddressUpdateManyWithoutAddressInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  VenueStyleUpdateManyWithoutAddressInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  AccountUpdateOneWithoutPrimaryAddressInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  FeatureOfAddressUpdateManyWithoutAddressInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  PhoneUpdateManyWithoutAddressInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  RoomUpdateManyWithoutAddressInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  AccountCreateNestedOneWithoutContactOfAddressInput: ["create", "connectOrCreate", "connect"],
  AddressCreateNestedOneWithoutContactsInput: ["create", "connectOrCreate", "connect"],
  EmailCreateNestedOneWithoutAssociatedContactInput: ["create", "connectOrCreate", "connect"],
  AccountUpdateOneRequiredWithoutContactOfAddressInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  AddressUpdateOneRequiredWithoutContactsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  EmailUpdateOneWithoutAssociatedContactInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  AddressCreateNestedManyWithoutVenueStyleInput: ["create", "connectOrCreate", "connect"],
  AddressUpdateManyWithoutVenueStyleInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  ContactAtAddressCreateNestedManyWithoutEmailInput: ["create", "connectOrCreate", "createMany", "connect"],
  DomainCreateNestedOneWithoutLinkedEmailsInput: ["create", "connectOrCreate", "connect"],
  AccountCreateNestedOneWithoutEmailsInput: ["create", "connectOrCreate", "connect"],
  ContactAtAddressUpdateManyWithoutEmailInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  DomainUpdateOneWithoutLinkedEmailsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  AccountUpdateOneWithoutEmailsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  AccountCreateNestedOneWithoutApplicationInput: ["create", "connectOrCreate", "connect"],
  AccountUpdateOneRequiredWithoutApplicationInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  EmailCreateNestedManyWithoutDomainInput: ["create", "connectOrCreate", "createMany", "connect"],
  EnumdnsTypeFieldUpdateOperationsInput: ["set"],
  EmailUpdateManyWithoutDomainInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  FeatureOfRoomCreateNestedManyWithoutFeatureInput: ["create", "connectOrCreate", "createMany", "connect"],
  FeatureOfAddressCreateNestedManyWithoutFeatureInput: ["create", "connectOrCreate", "createMany", "connect"],
  EnumFeatureTypeFieldUpdateOperationsInput: ["set"],
  FeatureOfRoomUpdateManyWithoutFeatureInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  FeatureOfAddressUpdateManyWithoutFeatureInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  FeatureCreateNestedOneWithoutFeatureOfRoomInput: ["create", "connectOrCreate", "connect"],
  RoomCreateNestedOneWithoutFeaturesOfRoomInput: ["create", "connectOrCreate", "connect"],
  FeatureUpdateOneRequiredWithoutFeatureOfRoomInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  RoomUpdateOneRequiredWithoutFeaturesOfRoomInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  FeatureCreateNestedOneWithoutFeatureOfAddressInput: ["create", "connectOrCreate", "connect"],
  AddressCreateNestedOneWithoutFeaturesOfBuisnessInput: ["create", "connectOrCreate", "connect"],
  FeatureUpdateOneRequiredWithoutFeatureOfAddressInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  AddressUpdateOneRequiredWithoutFeaturesOfBuisnessInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  FeatureOfRoomCreateNestedManyWithoutRoomInput: ["create", "connectOrCreate", "createMany", "connect"],
  AddressCreateNestedOneWithoutRoomsInput: ["create", "connectOrCreate", "connect"],
  ArrangementOfRoomCreateNestedManyWithoutRoomInput: ["create", "connectOrCreate", "createMany", "connect"],
  FeatureOfRoomUpdateManyWithoutRoomInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  AddressUpdateOneRequiredWithoutRoomsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  ArrangementOfRoomUpdateManyWithoutRoomInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  RTWCreateNestedOneWithoutFilesInput: ["create", "connectOrCreate", "connect"],
  AccountCreateNestedManyWithoutFilesInput: ["create", "connectOrCreate", "connect"],
  RTWUpdateOneWithoutFilesInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  AccountUpdateManyWithoutFilesInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  FilesCreateNestedManyWithoutRtwInput: ["create", "connectOrCreate", "createMany", "connect"],
  AccountCreateNestedOneWithoutRtwInput: ["create", "connectOrCreate", "connect"],
  FilesUpdateManyWithoutRtwInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  AccountUpdateOneRequiredWithoutRtwInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  AccountCreateNestedOneWithoutPhonesInput: ["create", "connectOrCreate", "connect"],
  AddressCreateNestedOneWithoutPhonesInput: ["create", "connectOrCreate", "connect"],
  AccountUpdateOneRequiredWithoutPhonesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  AddressUpdateOneRequiredWithoutPhonesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  ArrangementCreateNestedOneWithoutRoomInput: ["create", "connectOrCreate", "connect"],
  RoomCreateNestedOneWithoutArrangementsInput: ["create", "connectOrCreate", "connect"],
  ArrangementUpdateOneRequiredWithoutRoomInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  RoomUpdateOneRequiredWithoutArrangementsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  ArrangementOfRoomCreateNestedManyWithoutArrangementInput: ["create", "connectOrCreate", "createMany", "connect"],
  ArrangementOfRoomUpdateManyWithoutArrangementInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  SIACheckCreateNestedManyWithoutBadgeInput: ["create", "connectOrCreate", "createMany", "connect"],
  AccountCreateNestedOneWithoutSiaInput: ["create", "connectOrCreate", "connect"],
  EnumLicenseSectorFieldUpdateOperationsInput: ["set"],
  EnumLicenseTypeFieldUpdateOperationsInput: ["set"],
  SIACheckUpdateManyWithoutBadgeInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  AccountUpdateOneWithoutSiaInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  SIABadgeCreateNestedOneWithoutSiaChecksInput: ["create", "connectOrCreate", "connect"],
  TransactionCreateNestedOneWithoutSIACheckInput: ["create", "connectOrCreate", "connect"],
  SIABadgeUpdateOneWithoutSiaChecksInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  EnumBadgeStatusFieldUpdateOperationsInput: ["set"],
  TransactionUpdateOneWithoutSIACheckInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
  NullableIntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
  StatusCreateNestedOneWithoutAccountInput: ["create", "connectOrCreate", "connect"],
  AccountCreateNestedOneWithoutStatusInput: ["create", "connectOrCreate", "connect"],
  StatusUpdateOneRequiredWithoutAccountInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  AccountUpdateOneRequiredWithoutStatusInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  StatusOnAccountCreateNestedManyWithoutStatusInput: ["create", "connectOrCreate", "createMany", "connect"],
  StatusOnAccountUpdateManyWithoutStatusInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  SubscriptionOnAccountCreateNestedManyWithoutSubscriptionInput: ["create", "connectOrCreate", "createMany", "connect"],
  SubscriptionOnAccountUpdateManyWithoutSubscriptionInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  SubscriptionCreateNestedOneWithoutAccountsInput: ["create", "connectOrCreate", "connect"],
  AccountCreateNestedOneWithoutSubscriptionInput: ["create", "connectOrCreate", "connect"],
  SubscriptionUpdateOneRequiredWithoutAccountsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  AccountUpdateOneRequiredWithoutSubscriptionInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  AccountCreateNestedOneWithoutTransactionsInput: ["create", "connectOrCreate", "connect"],
  SIACheckCreateNestedManyWithoutTransactionsInput: ["create", "connectOrCreate", "createMany", "connect"],
  AccountUpdateOneRequiredWithoutTransactionsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
  SIACheckUpdateManyWithoutTransactionsInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
  NestedStringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "search", "not"],
  NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedStringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "search", "not"],
  NestedEnumAccountTypeFilter: ["equals", "in", "notIn", "not"],
  NestedBoolFilter: ["equals", "not"],
  NestedDateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedDateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedEnumTitleNullableFilter: ["equals", "in", "notIn", "not"],
  NestedBoolNullableFilter: ["equals", "not"],
  NestedStringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "search", "not", "_count", "_min", "_max"],
  NestedIntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  NestedFloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedStringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "search", "not", "_count", "_min", "_max"],
  NestedIntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedEnumAccountTypeWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  NestedBoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  NestedDateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  NestedDateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
  NestedEnumTitleNullableWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  NestedBoolNullableWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
  NestedEnumTokenTypeFilter: ["equals", "in", "notIn", "not"],
  NestedEnumTokenTypeWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  NestedEnumAddressTypeFilter: ["equals", "in", "notIn", "not"],
  NestedEnumAddressTypeWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  NestedJsonNullableFilter: ["equals", "path", "string_contains", "string_starts_with", "string_ends_with", "array_contains", "array_starts_with", "array_ends_with", "lt", "lte", "gt", "gte", "not"],
  NestedEnumdnsTypeFilter: ["equals", "in", "notIn", "not"],
  NestedEnumdnsTypeWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  NestedJsonFilter: ["equals", "path", "string_contains", "string_starts_with", "string_ends_with", "array_contains", "array_starts_with", "array_ends_with", "lt", "lte", "gt", "gte", "not"],
  NestedEnumFeatureTypeFilter: ["equals", "in", "notIn", "not"],
  NestedEnumFeatureTypeWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  NestedEnumLicenseSectorFilter: ["equals", "in", "notIn", "not"],
  NestedEnumLicenseTypeFilter: ["equals", "in", "notIn", "not"],
  NestedEnumLicenseSectorWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  NestedEnumLicenseTypeWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  NestedEnumBadgeStatusFilter: ["equals", "in", "notIn", "not"],
  NestedIntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
  NestedFloatNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
  NestedEnumBadgeStatusWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
  EmployersOnAccountCreateWithoutAccountInput: ["employer", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmployersOnAccountCreateOrConnectWithoutAccountInput: ["where", "create"],
  EmployersOnAccountCreateManyAccountInputEnvelope: ["data", "skipDuplicates"],
  EmployersOnAccountCreateWithoutEmployerInput: ["account", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmployersOnAccountCreateOrConnectWithoutEmployerInput: ["where", "create"],
  EmployersOnAccountCreateManyEmployerInputEnvelope: ["data", "skipDuplicates"],
  SubuserOnAccountCreateWithoutAccountInput: ["subuser", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubuserOnAccountCreateOrConnectWithoutAccountInput: ["where", "create"],
  SubuserOnAccountCreateManyAccountInputEnvelope: ["data", "skipDuplicates"],
  SubuserOnAccountCreateWithoutSubuserInput: ["account", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubuserOnAccountCreateOrConnectWithoutSubuserInput: ["where", "create"],
  SubuserOnAccountCreateManySubuserInputEnvelope: ["data", "skipDuplicates"],
  ManagersOnAccountCreateWithoutAccountInput: ["managers", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ManagersOnAccountCreateOrConnectWithoutAccountInput: ["where", "create"],
  ManagersOnAccountCreateManyAccountInputEnvelope: ["data", "skipDuplicates"],
  ManagersOnAccountCreateWithoutManagersInput: ["account", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ManagersOnAccountCreateOrConnectWithoutManagersInput: ["where", "create"],
  ManagersOnAccountCreateManyManagersInputEnvelope: ["data", "skipDuplicates"],
  SaltCreateWithoutAccountInput: ["id", "salt", "expiry", "deletedDate", "deleted"],
  SaltCreateOrConnectWithoutAccountInput: ["where", "create"],
  TokenCreateWithoutAccountInput: ["id", "nickname", "createdAt", "updatedAt", "type", "value", "expiry", "deletedDate", "deleted"],
  TokenCreateOrConnectWithoutAccountInput: ["where", "create"],
  TokenCreateManyAccountInputEnvelope: ["data", "skipDuplicates"],
  AddressCreateWithoutPrimaryAccountInput: ["id", "createdAt", "updatedAt", "account", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "contacts", "website", "hoursOfOperation", "venueStyle", "features", "details", "public", "deletedDate", "deleted", "featuresOfBuisness", "phones", "rooms"],
  AddressCreateOrConnectWithoutPrimaryAccountInput: ["where", "create"],
  AddressCreateWithoutAccountInput: ["id", "createdAt", "updatedAt", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "contacts", "website", "hoursOfOperation", "venueStyle", "features", "details", "public", "primaryAccount", "deletedDate", "deleted", "featuresOfBuisness", "phones", "rooms"],
  AddressCreateOrConnectWithoutAccountInput: ["where", "create"],
  AddressCreateManyAccountInputEnvelope: ["data", "skipDuplicates"],
  ContactAtAddressCreateWithoutAccountInput: ["address", "jobTitle", "phone", "email", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ContactAtAddressCreateOrConnectWithoutAccountInput: ["where", "create"],
  ContactAtAddressCreateManyAccountInputEnvelope: ["data", "skipDuplicates"],
  ApplicationCreateWithoutAccountInput: ["id", "name", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ApplicationCreateOrConnectWithoutAccountInput: ["where", "create"],
  ApplicationCreateManyAccountInputEnvelope: ["data", "skipDuplicates"],
  EmailCreateWithoutAccountInput: ["id", "associatedContact", "domain", "email", "verified", "public", "primary", "path", "copy", "notifyFrom", "imap_authUser", "imap_authPass", "imap_accessToken", "imap_authServer", "imap_host", "imap_port", "imap_secure", "imap_tslRejectUnauthorized", "imap_tslMinVersion", "imap_resyncDelay", "smtp_authUser", "smtp_authPass", "smtp_accessToken", "smtp_authServer", "smtp_host", "smtp_port", "smtp_secure", "smtp_tslRejectUnauthorized", "smtp_tslMinVersion", "oauth2_authorize", "oauth2_provider", "oauth2_authUser", "oauth2_accessToken", "oauth2_refreshToken", "oauth2_expires", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmailCreateOrConnectWithoutAccountInput: ["where", "create"],
  EmailCreateManyAccountInputEnvelope: ["data", "skipDuplicates"],
  FilesCreateWithoutAccountInput: ["id", "name", "rtw", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FilesCreateOrConnectWithoutAccountInput: ["where", "create"],
  PhoneCreateWithoutAccountInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "address", "phone", "public"],
  PhoneCreateOrConnectWithoutAccountInput: ["where", "create"],
  PhoneCreateManyAccountInputEnvelope: ["data", "skipDuplicates"],
  RTWCreateWithoutAccountInput: ["id", "files", "name", "active", "startDate", "endDate", "createdAt", "updatedAt", "deletedDate", "deleted"],
  RTWCreateOrConnectWithoutAccountInput: ["where", "create"],
  RTWCreateManyAccountInputEnvelope: ["data", "skipDuplicates"],
  SIABadgeCreateWithoutAccountInput: ["id", "licenseSector", "type", "licenseExplanation", "additionalTerms", "createdAt", "active", "expiry", "updatedAt", "deletedDate", "deleted", "siaChecks"],
  SIABadgeCreateOrConnectWithoutAccountInput: ["where", "create"],
  SIABadgeCreateManyAccountInputEnvelope: ["data", "skipDuplicates"],
  StatusOnAccountCreateWithoutAccountInput: ["status", "createdAt", "updatedAt", "deletedDate", "deleted"],
  StatusOnAccountCreateOrConnectWithoutAccountInput: ["where", "create"],
  StatusOnAccountCreateManyAccountInputEnvelope: ["data", "skipDuplicates"],
  SubscriptionOnAccountCreateWithoutAccountInput: ["subscription", "active", "deactivated", "activated", "startedAt", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubscriptionOnAccountCreateOrConnectWithoutAccountInput: ["where", "create"],
  SubscriptionOnAccountCreateManyAccountInputEnvelope: ["data", "skipDuplicates"],
  TransactionCreateWithoutAccountInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "SIACheck", "data"],
  TransactionCreateOrConnectWithoutAccountInput: ["where", "create"],
  TransactionCreateManyAccountInputEnvelope: ["data", "skipDuplicates"],
  EmployersOnAccountUpsertWithWhereUniqueWithoutAccountInput: ["where", "update", "create"],
  EmployersOnAccountUpdateWithWhereUniqueWithoutAccountInput: ["where", "data"],
  EmployersOnAccountUpdateManyWithWhereWithoutAccountInput: ["where", "data"],
  EmployersOnAccountScalarWhereInput: ["AND", "OR", "NOT", "accountId", "employerId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmployersOnAccountUpsertWithWhereUniqueWithoutEmployerInput: ["where", "update", "create"],
  EmployersOnAccountUpdateWithWhereUniqueWithoutEmployerInput: ["where", "data"],
  EmployersOnAccountUpdateManyWithWhereWithoutEmployerInput: ["where", "data"],
  SubuserOnAccountUpsertWithWhereUniqueWithoutAccountInput: ["where", "update", "create"],
  SubuserOnAccountUpdateWithWhereUniqueWithoutAccountInput: ["where", "data"],
  SubuserOnAccountUpdateManyWithWhereWithoutAccountInput: ["where", "data"],
  SubuserOnAccountScalarWhereInput: ["AND", "OR", "NOT", "accountId", "subuserId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubuserOnAccountUpsertWithWhereUniqueWithoutSubuserInput: ["where", "update", "create"],
  SubuserOnAccountUpdateWithWhereUniqueWithoutSubuserInput: ["where", "data"],
  SubuserOnAccountUpdateManyWithWhereWithoutSubuserInput: ["where", "data"],
  ManagersOnAccountUpsertWithWhereUniqueWithoutAccountInput: ["where", "update", "create"],
  ManagersOnAccountUpdateWithWhereUniqueWithoutAccountInput: ["where", "data"],
  ManagersOnAccountUpdateManyWithWhereWithoutAccountInput: ["where", "data"],
  ManagersOnAccountScalarWhereInput: ["AND", "OR", "NOT", "accountId", "managersId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ManagersOnAccountUpsertWithWhereUniqueWithoutManagersInput: ["where", "update", "create"],
  ManagersOnAccountUpdateWithWhereUniqueWithoutManagersInput: ["where", "data"],
  ManagersOnAccountUpdateManyWithWhereWithoutManagersInput: ["where", "data"],
  SaltUpsertWithoutAccountInput: ["update", "create"],
  SaltUpdateWithoutAccountInput: ["id", "salt", "expiry", "deletedDate", "deleted"],
  TokenUpsertWithWhereUniqueWithoutAccountInput: ["where", "update", "create"],
  TokenUpdateWithWhereUniqueWithoutAccountInput: ["where", "data"],
  TokenUpdateManyWithWhereWithoutAccountInput: ["where", "data"],
  TokenScalarWhereInput: ["AND", "OR", "NOT", "id", "nickname", "createdAt", "updatedAt", "type", "value", "expiry", "accountID", "deletedDate", "deleted"],
  AddressUpsertWithoutPrimaryAccountInput: ["update", "create"],
  AddressUpdateWithoutPrimaryAccountInput: ["id", "createdAt", "updatedAt", "account", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "contacts", "website", "hoursOfOperation", "venueStyle", "features", "details", "public", "deletedDate", "deleted", "featuresOfBuisness", "phones", "rooms"],
  AddressUpsertWithWhereUniqueWithoutAccountInput: ["where", "update", "create"],
  AddressUpdateWithWhereUniqueWithoutAccountInput: ["where", "data"],
  AddressUpdateManyWithWhereWithoutAccountInput: ["where", "data"],
  AddressScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "accountId", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "website", "hoursOfOperation", "features", "details", "public", "primaryaccountId", "deletedDate", "deleted"],
  ContactAtAddressUpsertWithWhereUniqueWithoutAccountInput: ["where", "update", "create"],
  ContactAtAddressUpdateWithWhereUniqueWithoutAccountInput: ["where", "data"],
  ContactAtAddressUpdateManyWithWhereWithoutAccountInput: ["where", "data"],
  ContactAtAddressScalarWhereInput: ["AND", "OR", "NOT", "accountId", "addressId", "jobTitle", "phone", "emailId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ApplicationUpsertWithWhereUniqueWithoutAccountInput: ["where", "update", "create"],
  ApplicationUpdateWithWhereUniqueWithoutAccountInput: ["where", "data"],
  ApplicationUpdateManyWithWhereWithoutAccountInput: ["where", "data"],
  ApplicationScalarWhereInput: ["AND", "OR", "NOT", "id", "name", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmailUpsertWithWhereUniqueWithoutAccountInput: ["where", "update", "create"],
  EmailUpdateWithWhereUniqueWithoutAccountInput: ["where", "data"],
  EmailUpdateManyWithWhereWithoutAccountInput: ["where", "data"],
  EmailScalarWhereInput: ["AND", "OR", "NOT", "id", "domainId", "email", "accountId", "verified", "public", "primary", "path", "copy", "notifyFrom", "imap_authUser", "imap_authPass", "imap_accessToken", "imap_authServer", "imap_host", "imap_port", "imap_secure", "imap_tslRejectUnauthorized", "imap_tslMinVersion", "imap_resyncDelay", "smtp_authUser", "smtp_authPass", "smtp_accessToken", "smtp_authServer", "smtp_host", "smtp_port", "smtp_secure", "smtp_tslRejectUnauthorized", "smtp_tslMinVersion", "oauth2_authorize", "oauth2_provider", "oauth2_authUser", "oauth2_accessToken", "oauth2_refreshToken", "oauth2_expires", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FilesUpsertWithWhereUniqueWithoutAccountInput: ["where", "update", "create"],
  FilesUpdateWithWhereUniqueWithoutAccountInput: ["where", "data"],
  FilesUpdateManyWithWhereWithoutAccountInput: ["where", "data"],
  FilesScalarWhereInput: ["AND", "OR", "NOT", "id", "name", "rtwId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  PhoneUpsertWithWhereUniqueWithoutAccountInput: ["where", "update", "create"],
  PhoneUpdateWithWhereUniqueWithoutAccountInput: ["where", "data"],
  PhoneUpdateManyWithWhereWithoutAccountInput: ["where", "data"],
  PhoneScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "deletedDate", "deleted", "accountId", "addressId", "phone", "public"],
  RTWUpsertWithWhereUniqueWithoutAccountInput: ["where", "update", "create"],
  RTWUpdateWithWhereUniqueWithoutAccountInput: ["where", "data"],
  RTWUpdateManyWithWhereWithoutAccountInput: ["where", "data"],
  RTWScalarWhereInput: ["AND", "OR", "NOT", "id", "name", "active", "startDate", "endDate", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SIABadgeUpsertWithWhereUniqueWithoutAccountInput: ["where", "update", "create"],
  SIABadgeUpdateWithWhereUniqueWithoutAccountInput: ["where", "data"],
  SIABadgeUpdateManyWithWhereWithoutAccountInput: ["where", "data"],
  SIABadgeScalarWhereInput: ["AND", "OR", "NOT", "id", "licenseSector", "type", "licenseExplanation", "additionalTerms", "createdAt", "active", "expiry", "updatedAt", "deletedDate", "deleted", "account_id"],
  StatusOnAccountUpsertWithWhereUniqueWithoutAccountInput: ["where", "update", "create"],
  StatusOnAccountUpdateWithWhereUniqueWithoutAccountInput: ["where", "data"],
  StatusOnAccountUpdateManyWithWhereWithoutAccountInput: ["where", "data"],
  StatusOnAccountScalarWhereInput: ["AND", "OR", "NOT", "statusId", "accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubscriptionOnAccountUpsertWithWhereUniqueWithoutAccountInput: ["where", "update", "create"],
  SubscriptionOnAccountUpdateWithWhereUniqueWithoutAccountInput: ["where", "data"],
  SubscriptionOnAccountUpdateManyWithWhereWithoutAccountInput: ["where", "data"],
  SubscriptionOnAccountScalarWhereInput: ["AND", "OR", "NOT", "subscriptionId", "accountId", "active", "deactivated", "activated", "startedAt", "createdAt", "updatedAt", "deletedDate", "deleted"],
  TransactionUpsertWithWhereUniqueWithoutAccountInput: ["where", "update", "create"],
  TransactionUpdateWithWhereUniqueWithoutAccountInput: ["where", "data"],
  TransactionUpdateManyWithWhereWithoutAccountInput: ["where", "data"],
  TransactionScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "deletedDate", "deleted", "accountId", "data"],
  AccountCreateWithoutApiTokenInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountCreateOrConnectWithoutApiTokenInput: ["where", "create"],
  AccountUpsertWithoutApiTokenInput: ["update", "create"],
  AccountUpdateWithoutApiTokenInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountCreateWithoutSaltInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountCreateOrConnectWithoutSaltInput: ["where", "create"],
  AccountUpsertWithoutSaltInput: ["update", "create"],
  AccountUpdateWithoutSaltInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountCreateWithoutAccessesInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountCreateOrConnectWithoutAccessesInput: ["where", "create"],
  AccountCreateWithoutSubusersInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountCreateOrConnectWithoutSubusersInput: ["where", "create"],
  AccountUpsertWithoutAccessesInput: ["update", "create"],
  AccountUpdateWithoutAccessesInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountUpsertWithoutSubusersInput: ["update", "create"],
  AccountUpdateWithoutSubusersInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountCreateWithoutEmployerInput: ["id", "prn", "username", "accountType", "subsciption", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountCreateOrConnectWithoutEmployerInput: ["where", "create"],
  AccountCreateWithoutEmployeesInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountCreateOrConnectWithoutEmployeesInput: ["where", "create"],
  AccountUpsertWithoutEmployerInput: ["update", "create"],
  AccountUpdateWithoutEmployerInput: ["id", "prn", "username", "accountType", "subsciption", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountUpsertWithoutEmployeesInput: ["update", "create"],
  AccountUpdateWithoutEmployeesInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountCreateWithoutAccountsInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountCreateOrConnectWithoutAccountsInput: ["where", "create"],
  AccountCreateWithoutManagersInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountCreateOrConnectWithoutManagersInput: ["where", "create"],
  AccountUpsertWithoutAccountsInput: ["update", "create"],
  AccountUpdateWithoutAccountsInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountUpsertWithoutManagersInput: ["update", "create"],
  AccountUpdateWithoutManagersInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountCreateWithoutAddressesInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountCreateOrConnectWithoutAddressesInput: ["where", "create"],
  ContactAtAddressCreateWithoutAddressInput: ["account", "jobTitle", "phone", "email", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ContactAtAddressCreateOrConnectWithoutAddressInput: ["where", "create"],
  ContactAtAddressCreateManyAddressInputEnvelope: ["data", "skipDuplicates"],
  VenueStyleCreateWithoutAddressInput: ["id", "createdAt", "updatedAt", "name", "details", "deletedDate", "deleted"],
  VenueStyleCreateOrConnectWithoutAddressInput: ["where", "create"],
  AccountCreateWithoutPrimaryAddressInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountCreateOrConnectWithoutPrimaryAddressInput: ["where", "create"],
  FeatureOfAddressCreateWithoutAddressInput: ["feature", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfAddressCreateOrConnectWithoutAddressInput: ["where", "create"],
  FeatureOfAddressCreateManyAddressInputEnvelope: ["data", "skipDuplicates"],
  PhoneCreateWithoutAddressInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "account", "phone", "public"],
  PhoneCreateOrConnectWithoutAddressInput: ["where", "create"],
  PhoneCreateManyAddressInputEnvelope: ["data", "skipDuplicates"],
  RoomCreateWithoutAddressInput: ["id", "featuresOfRoom", "createdAt", "updatedAt", "deletedDate", "deleted", "name", "floor", "building", "accessibility", "checkin", "checkout", "length", "width", "height", "arrangements"],
  RoomCreateOrConnectWithoutAddressInput: ["where", "create"],
  RoomCreateManyAddressInputEnvelope: ["data", "skipDuplicates"],
  AccountUpsertWithoutAddressesInput: ["update", "create"],
  AccountUpdateWithoutAddressesInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  ContactAtAddressUpsertWithWhereUniqueWithoutAddressInput: ["where", "update", "create"],
  ContactAtAddressUpdateWithWhereUniqueWithoutAddressInput: ["where", "data"],
  ContactAtAddressUpdateManyWithWhereWithoutAddressInput: ["where", "data"],
  VenueStyleUpsertWithWhereUniqueWithoutAddressInput: ["where", "update", "create"],
  VenueStyleUpdateWithWhereUniqueWithoutAddressInput: ["where", "data"],
  VenueStyleUpdateManyWithWhereWithoutAddressInput: ["where", "data"],
  VenueStyleScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "name", "details", "deletedDate", "deleted"],
  AccountUpsertWithoutPrimaryAddressInput: ["update", "create"],
  AccountUpdateWithoutPrimaryAddressInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  FeatureOfAddressUpsertWithWhereUniqueWithoutAddressInput: ["where", "update", "create"],
  FeatureOfAddressUpdateWithWhereUniqueWithoutAddressInput: ["where", "data"],
  FeatureOfAddressUpdateManyWithWhereWithoutAddressInput: ["where", "data"],
  FeatureOfAddressScalarWhereInput: ["AND", "OR", "NOT", "addressId", "featureId", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  PhoneUpsertWithWhereUniqueWithoutAddressInput: ["where", "update", "create"],
  PhoneUpdateWithWhereUniqueWithoutAddressInput: ["where", "data"],
  PhoneUpdateManyWithWhereWithoutAddressInput: ["where", "data"],
  RoomUpsertWithWhereUniqueWithoutAddressInput: ["where", "update", "create"],
  RoomUpdateWithWhereUniqueWithoutAddressInput: ["where", "data"],
  RoomUpdateManyWithWhereWithoutAddressInput: ["where", "data"],
  RoomScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "updatedAt", "deletedDate", "deleted", "addressId", "name", "floor", "building", "accessibility", "checkin", "checkout", "length", "width", "height"],
  AccountCreateWithoutContactOfAddressInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountCreateOrConnectWithoutContactOfAddressInput: ["where", "create"],
  AddressCreateWithoutContactsInput: ["id", "createdAt", "updatedAt", "account", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "website", "hoursOfOperation", "venueStyle", "features", "details", "public", "primaryAccount", "deletedDate", "deleted", "featuresOfBuisness", "phones", "rooms"],
  AddressCreateOrConnectWithoutContactsInput: ["where", "create"],
  EmailCreateWithoutAssociatedContactInput: ["id", "domain", "email", "account", "verified", "public", "primary", "path", "copy", "notifyFrom", "imap_authUser", "imap_authPass", "imap_accessToken", "imap_authServer", "imap_host", "imap_port", "imap_secure", "imap_tslRejectUnauthorized", "imap_tslMinVersion", "imap_resyncDelay", "smtp_authUser", "smtp_authPass", "smtp_accessToken", "smtp_authServer", "smtp_host", "smtp_port", "smtp_secure", "smtp_tslRejectUnauthorized", "smtp_tslMinVersion", "oauth2_authorize", "oauth2_provider", "oauth2_authUser", "oauth2_accessToken", "oauth2_refreshToken", "oauth2_expires", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmailCreateOrConnectWithoutAssociatedContactInput: ["where", "create"],
  AccountUpsertWithoutContactOfAddressInput: ["update", "create"],
  AccountUpdateWithoutContactOfAddressInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AddressUpsertWithoutContactsInput: ["update", "create"],
  AddressUpdateWithoutContactsInput: ["id", "createdAt", "updatedAt", "account", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "website", "hoursOfOperation", "venueStyle", "features", "details", "public", "primaryAccount", "deletedDate", "deleted", "featuresOfBuisness", "phones", "rooms"],
  EmailUpsertWithoutAssociatedContactInput: ["update", "create"],
  EmailUpdateWithoutAssociatedContactInput: ["id", "domain", "email", "account", "verified", "public", "primary", "path", "copy", "notifyFrom", "imap_authUser", "imap_authPass", "imap_accessToken", "imap_authServer", "imap_host", "imap_port", "imap_secure", "imap_tslRejectUnauthorized", "imap_tslMinVersion", "imap_resyncDelay", "smtp_authUser", "smtp_authPass", "smtp_accessToken", "smtp_authServer", "smtp_host", "smtp_port", "smtp_secure", "smtp_tslRejectUnauthorized", "smtp_tslMinVersion", "oauth2_authorize", "oauth2_provider", "oauth2_authUser", "oauth2_accessToken", "oauth2_refreshToken", "oauth2_expires", "createdAt", "updatedAt", "deletedDate", "deleted"],
  AddressCreateWithoutVenueStyleInput: ["id", "createdAt", "updatedAt", "account", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "contacts", "website", "hoursOfOperation", "features", "details", "public", "primaryAccount", "deletedDate", "deleted", "featuresOfBuisness", "phones", "rooms"],
  AddressCreateOrConnectWithoutVenueStyleInput: ["where", "create"],
  AddressUpsertWithWhereUniqueWithoutVenueStyleInput: ["where", "update", "create"],
  AddressUpdateWithWhereUniqueWithoutVenueStyleInput: ["where", "data"],
  AddressUpdateManyWithWhereWithoutVenueStyleInput: ["where", "data"],
  ContactAtAddressCreateWithoutEmailInput: ["account", "address", "jobTitle", "phone", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ContactAtAddressCreateOrConnectWithoutEmailInput: ["where", "create"],
  ContactAtAddressCreateManyEmailInputEnvelope: ["data", "skipDuplicates"],
  DomainCreateWithoutLinkedEmailsInput: ["id", "domain", "verified", "dnsType", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  DomainCreateOrConnectWithoutLinkedEmailsInput: ["where", "create"],
  AccountCreateWithoutEmailsInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountCreateOrConnectWithoutEmailsInput: ["where", "create"],
  ContactAtAddressUpsertWithWhereUniqueWithoutEmailInput: ["where", "update", "create"],
  ContactAtAddressUpdateWithWhereUniqueWithoutEmailInput: ["where", "data"],
  ContactAtAddressUpdateManyWithWhereWithoutEmailInput: ["where", "data"],
  DomainUpsertWithoutLinkedEmailsInput: ["update", "create"],
  DomainUpdateWithoutLinkedEmailsInput: ["id", "domain", "verified", "dnsType", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  AccountUpsertWithoutEmailsInput: ["update", "create"],
  AccountUpdateWithoutEmailsInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountCreateWithoutApplicationInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountCreateOrConnectWithoutApplicationInput: ["where", "create"],
  AccountUpsertWithoutApplicationInput: ["update", "create"],
  AccountUpdateWithoutApplicationInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "emails", "files", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  EmailCreateWithoutDomainInput: ["id", "associatedContact", "email", "account", "verified", "public", "primary", "path", "copy", "notifyFrom", "imap_authUser", "imap_authPass", "imap_accessToken", "imap_authServer", "imap_host", "imap_port", "imap_secure", "imap_tslRejectUnauthorized", "imap_tslMinVersion", "imap_resyncDelay", "smtp_authUser", "smtp_authPass", "smtp_accessToken", "smtp_authServer", "smtp_host", "smtp_port", "smtp_secure", "smtp_tslRejectUnauthorized", "smtp_tslMinVersion", "oauth2_authorize", "oauth2_provider", "oauth2_authUser", "oauth2_accessToken", "oauth2_refreshToken", "oauth2_expires", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmailCreateOrConnectWithoutDomainInput: ["where", "create"],
  EmailCreateManyDomainInputEnvelope: ["data", "skipDuplicates"],
  EmailUpsertWithWhereUniqueWithoutDomainInput: ["where", "update", "create"],
  EmailUpdateWithWhereUniqueWithoutDomainInput: ["where", "data"],
  EmailUpdateManyWithWhereWithoutDomainInput: ["where", "data"],
  FeatureOfRoomCreateWithoutFeatureInput: ["room", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfRoomCreateOrConnectWithoutFeatureInput: ["where", "create"],
  FeatureOfRoomCreateManyFeatureInputEnvelope: ["data", "skipDuplicates"],
  FeatureOfAddressCreateWithoutFeatureInput: ["address", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfAddressCreateOrConnectWithoutFeatureInput: ["where", "create"],
  FeatureOfAddressCreateManyFeatureInputEnvelope: ["data", "skipDuplicates"],
  FeatureOfRoomUpsertWithWhereUniqueWithoutFeatureInput: ["where", "update", "create"],
  FeatureOfRoomUpdateWithWhereUniqueWithoutFeatureInput: ["where", "data"],
  FeatureOfRoomUpdateManyWithWhereWithoutFeatureInput: ["where", "data"],
  FeatureOfRoomScalarWhereInput: ["AND", "OR", "NOT", "roomId", "featureId", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfAddressUpsertWithWhereUniqueWithoutFeatureInput: ["where", "update", "create"],
  FeatureOfAddressUpdateWithWhereUniqueWithoutFeatureInput: ["where", "data"],
  FeatureOfAddressUpdateManyWithWhereWithoutFeatureInput: ["where", "data"],
  FeatureCreateWithoutFeatureOfRoomInput: ["id", "name", "type", "featureOfAddress", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureCreateOrConnectWithoutFeatureOfRoomInput: ["where", "create"],
  RoomCreateWithoutFeaturesOfRoomInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "address", "name", "floor", "building", "accessibility", "checkin", "checkout", "length", "width", "height", "arrangements"],
  RoomCreateOrConnectWithoutFeaturesOfRoomInput: ["where", "create"],
  FeatureUpsertWithoutFeatureOfRoomInput: ["update", "create"],
  FeatureUpdateWithoutFeatureOfRoomInput: ["id", "name", "type", "featureOfAddress", "createdAt", "updatedAt", "deletedDate", "deleted"],
  RoomUpsertWithoutFeaturesOfRoomInput: ["update", "create"],
  RoomUpdateWithoutFeaturesOfRoomInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "address", "name", "floor", "building", "accessibility", "checkin", "checkout", "length", "width", "height", "arrangements"],
  FeatureCreateWithoutFeatureOfAddressInput: ["id", "name", "type", "featureOfRoom", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureCreateOrConnectWithoutFeatureOfAddressInput: ["where", "create"],
  AddressCreateWithoutFeaturesOfBuisnessInput: ["id", "createdAt", "updatedAt", "account", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "contacts", "website", "hoursOfOperation", "venueStyle", "features", "details", "public", "primaryAccount", "deletedDate", "deleted", "phones", "rooms"],
  AddressCreateOrConnectWithoutFeaturesOfBuisnessInput: ["where", "create"],
  FeatureUpsertWithoutFeatureOfAddressInput: ["update", "create"],
  FeatureUpdateWithoutFeatureOfAddressInput: ["id", "name", "type", "featureOfRoom", "createdAt", "updatedAt", "deletedDate", "deleted"],
  AddressUpsertWithoutFeaturesOfBuisnessInput: ["update", "create"],
  AddressUpdateWithoutFeaturesOfBuisnessInput: ["id", "createdAt", "updatedAt", "account", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "contacts", "website", "hoursOfOperation", "venueStyle", "features", "details", "public", "primaryAccount", "deletedDate", "deleted", "phones", "rooms"],
  FeatureOfRoomCreateWithoutRoomInput: ["feature", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfRoomCreateOrConnectWithoutRoomInput: ["where", "create"],
  FeatureOfRoomCreateManyRoomInputEnvelope: ["data", "skipDuplicates"],
  AddressCreateWithoutRoomsInput: ["id", "createdAt", "updatedAt", "account", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "contacts", "website", "hoursOfOperation", "venueStyle", "features", "details", "public", "primaryAccount", "deletedDate", "deleted", "featuresOfBuisness", "phones"],
  AddressCreateOrConnectWithoutRoomsInput: ["where", "create"],
  ArrangementOfRoomCreateWithoutRoomInput: ["arrangement", "capacity", "details", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ArrangementOfRoomCreateOrConnectWithoutRoomInput: ["where", "create"],
  ArrangementOfRoomCreateManyRoomInputEnvelope: ["data", "skipDuplicates"],
  FeatureOfRoomUpsertWithWhereUniqueWithoutRoomInput: ["where", "update", "create"],
  FeatureOfRoomUpdateWithWhereUniqueWithoutRoomInput: ["where", "data"],
  FeatureOfRoomUpdateManyWithWhereWithoutRoomInput: ["where", "data"],
  AddressUpsertWithoutRoomsInput: ["update", "create"],
  AddressUpdateWithoutRoomsInput: ["id", "createdAt", "updatedAt", "account", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "contacts", "website", "hoursOfOperation", "venueStyle", "features", "details", "public", "primaryAccount", "deletedDate", "deleted", "featuresOfBuisness", "phones"],
  ArrangementOfRoomUpsertWithWhereUniqueWithoutRoomInput: ["where", "update", "create"],
  ArrangementOfRoomUpdateWithWhereUniqueWithoutRoomInput: ["where", "data"],
  ArrangementOfRoomUpdateManyWithWhereWithoutRoomInput: ["where", "data"],
  ArrangementOfRoomScalarWhereInput: ["AND", "OR", "NOT", "roomId", "arrangementId", "capacity", "details", "createdAt", "updatedAt", "deletedDate", "deleted"],
  RTWCreateWithoutFilesInput: ["id", "name", "active", "startDate", "endDate", "account", "createdAt", "updatedAt", "deletedDate", "deleted"],
  RTWCreateOrConnectWithoutFilesInput: ["where", "create"],
  AccountCreateWithoutFilesInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountCreateOrConnectWithoutFilesInput: ["where", "create"],
  RTWUpsertWithoutFilesInput: ["update", "create"],
  RTWUpdateWithoutFilesInput: ["id", "name", "active", "startDate", "endDate", "account", "createdAt", "updatedAt", "deletedDate", "deleted"],
  AccountUpsertWithWhereUniqueWithoutFilesInput: ["where", "update", "create"],
  AccountUpdateWithWhereUniqueWithoutFilesInput: ["where", "data"],
  AccountUpdateManyWithWhereWithoutFilesInput: ["where", "data"],
  AccountScalarWhereInput: ["AND", "OR", "NOT", "id", "prn", "username", "accountType", "subsciption", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "resetPasswordToken", "resetPasswordExpires", "deletedDate", "deleted"],
  FilesCreateWithoutRtwInput: ["id", "name", "account", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FilesCreateOrConnectWithoutRtwInput: ["where", "create"],
  FilesCreateManyRtwInputEnvelope: ["data", "skipDuplicates"],
  AccountCreateWithoutRtwInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "sia", "Status", "subscription", "transactions"],
  AccountCreateOrConnectWithoutRtwInput: ["where", "create"],
  FilesUpsertWithWhereUniqueWithoutRtwInput: ["where", "update", "create"],
  FilesUpdateWithWhereUniqueWithoutRtwInput: ["where", "data"],
  FilesUpdateManyWithWhereWithoutRtwInput: ["where", "data"],
  AccountUpsertWithoutRtwInput: ["update", "create"],
  AccountUpdateWithoutRtwInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "sia", "Status", "subscription", "transactions"],
  AccountCreateWithoutPhonesInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "rtw", "sia", "Status", "subscription", "transactions"],
  AccountCreateOrConnectWithoutPhonesInput: ["where", "create"],
  AddressCreateWithoutPhonesInput: ["id", "createdAt", "updatedAt", "account", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "contacts", "website", "hoursOfOperation", "venueStyle", "features", "details", "public", "primaryAccount", "deletedDate", "deleted", "featuresOfBuisness", "rooms"],
  AddressCreateOrConnectWithoutPhonesInput: ["where", "create"],
  AccountUpsertWithoutPhonesInput: ["update", "create"],
  AccountUpdateWithoutPhonesInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "rtw", "sia", "Status", "subscription", "transactions"],
  AddressUpsertWithoutPhonesInput: ["update", "create"],
  AddressUpdateWithoutPhonesInput: ["id", "createdAt", "updatedAt", "account", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "contacts", "website", "hoursOfOperation", "venueStyle", "features", "details", "public", "primaryAccount", "deletedDate", "deleted", "featuresOfBuisness", "rooms"],
  ArrangementCreateWithoutRoomInput: ["id", "createdAt", "updatedAt", "name", "icon", "details", "deletedDate", "deleted"],
  ArrangementCreateOrConnectWithoutRoomInput: ["where", "create"],
  RoomCreateWithoutArrangementsInput: ["id", "featuresOfRoom", "createdAt", "updatedAt", "deletedDate", "deleted", "address", "name", "floor", "building", "accessibility", "checkin", "checkout", "length", "width", "height"],
  RoomCreateOrConnectWithoutArrangementsInput: ["where", "create"],
  ArrangementUpsertWithoutRoomInput: ["update", "create"],
  ArrangementUpdateWithoutRoomInput: ["id", "createdAt", "updatedAt", "name", "icon", "details", "deletedDate", "deleted"],
  RoomUpsertWithoutArrangementsInput: ["update", "create"],
  RoomUpdateWithoutArrangementsInput: ["id", "featuresOfRoom", "createdAt", "updatedAt", "deletedDate", "deleted", "address", "name", "floor", "building", "accessibility", "checkin", "checkout", "length", "width", "height"],
  ArrangementOfRoomCreateWithoutArrangementInput: ["room", "capacity", "details", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ArrangementOfRoomCreateOrConnectWithoutArrangementInput: ["where", "create"],
  ArrangementOfRoomCreateManyArrangementInputEnvelope: ["data", "skipDuplicates"],
  ArrangementOfRoomUpsertWithWhereUniqueWithoutArrangementInput: ["where", "update", "create"],
  ArrangementOfRoomUpdateWithWhereUniqueWithoutArrangementInput: ["where", "data"],
  ArrangementOfRoomUpdateManyWithWhereWithoutArrangementInput: ["where", "data"],
  SIACheckCreateWithoutBadgeInput: ["id", "status", "AuthUrl", "pubUrl", "createdAt", "updatedAt", "deletedDate", "deleted", "error", "transactions"],
  SIACheckCreateOrConnectWithoutBadgeInput: ["where", "create"],
  SIACheckCreateManyBadgeInputEnvelope: ["data", "skipDuplicates"],
  AccountCreateWithoutSiaInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "Status", "subscription", "transactions"],
  AccountCreateOrConnectWithoutSiaInput: ["where", "create"],
  SIACheckUpsertWithWhereUniqueWithoutBadgeInput: ["where", "update", "create"],
  SIACheckUpdateWithWhereUniqueWithoutBadgeInput: ["where", "data"],
  SIACheckUpdateManyWithWhereWithoutBadgeInput: ["where", "data"],
  SIACheckScalarWhereInput: ["AND", "OR", "NOT", "id", "sia_id", "status", "AuthUrl", "pubUrl", "createdAt", "updatedAt", "deletedDate", "deleted", "error", "transactionId"],
  AccountUpsertWithoutSiaInput: ["update", "create"],
  AccountUpdateWithoutSiaInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "Status", "subscription", "transactions"],
  SIABadgeCreateWithoutSiaChecksInput: ["id", "licenseSector", "type", "licenseExplanation", "additionalTerms", "createdAt", "active", "expiry", "updatedAt", "deletedDate", "deleted", "account"],
  SIABadgeCreateOrConnectWithoutSiaChecksInput: ["where", "create"],
  TransactionCreateWithoutSIACheckInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "account", "data"],
  TransactionCreateOrConnectWithoutSIACheckInput: ["where", "create"],
  SIABadgeUpsertWithoutSiaChecksInput: ["update", "create"],
  SIABadgeUpdateWithoutSiaChecksInput: ["id", "licenseSector", "type", "licenseExplanation", "additionalTerms", "createdAt", "active", "expiry", "updatedAt", "deletedDate", "deleted", "account"],
  TransactionUpsertWithoutSIACheckInput: ["update", "create"],
  TransactionUpdateWithoutSIACheckInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "account", "data"],
  StatusCreateWithoutAccountInput: ["id", "name", "createdAt", "updatedAt", "deletedDate", "deleted"],
  StatusCreateOrConnectWithoutAccountInput: ["where", "create"],
  AccountCreateWithoutStatusInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "subscription", "transactions"],
  AccountCreateOrConnectWithoutStatusInput: ["where", "create"],
  StatusUpsertWithoutAccountInput: ["update", "create"],
  StatusUpdateWithoutAccountInput: ["id", "name", "createdAt", "updatedAt", "deletedDate", "deleted"],
  AccountUpsertWithoutStatusInput: ["update", "create"],
  AccountUpdateWithoutStatusInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "subscription", "transactions"],
  StatusOnAccountCreateWithoutStatusInput: ["account", "createdAt", "updatedAt", "deletedDate", "deleted"],
  StatusOnAccountCreateOrConnectWithoutStatusInput: ["where", "create"],
  StatusOnAccountCreateManyStatusInputEnvelope: ["data", "skipDuplicates"],
  StatusOnAccountUpsertWithWhereUniqueWithoutStatusInput: ["where", "update", "create"],
  StatusOnAccountUpdateWithWhereUniqueWithoutStatusInput: ["where", "data"],
  StatusOnAccountUpdateManyWithWhereWithoutStatusInput: ["where", "data"],
  SubscriptionOnAccountCreateWithoutSubscriptionInput: ["account", "active", "deactivated", "activated", "startedAt", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubscriptionOnAccountCreateOrConnectWithoutSubscriptionInput: ["where", "create"],
  SubscriptionOnAccountCreateManySubscriptionInputEnvelope: ["data", "skipDuplicates"],
  SubscriptionOnAccountUpsertWithWhereUniqueWithoutSubscriptionInput: ["where", "update", "create"],
  SubscriptionOnAccountUpdateWithWhereUniqueWithoutSubscriptionInput: ["where", "data"],
  SubscriptionOnAccountUpdateManyWithWhereWithoutSubscriptionInput: ["where", "data"],
  SubscriptionCreateWithoutAccountsInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "name", "cost", "details"],
  SubscriptionCreateOrConnectWithoutAccountsInput: ["where", "create"],
  AccountCreateWithoutSubscriptionInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "transactions"],
  AccountCreateOrConnectWithoutSubscriptionInput: ["where", "create"],
  SubscriptionUpsertWithoutAccountsInput: ["update", "create"],
  SubscriptionUpdateWithoutAccountsInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "name", "cost", "details"],
  AccountUpsertWithoutSubscriptionInput: ["update", "create"],
  AccountUpdateWithoutSubscriptionInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "transactions"],
  AccountCreateWithoutTransactionsInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription"],
  AccountCreateOrConnectWithoutTransactionsInput: ["where", "create"],
  SIACheckCreateWithoutTransactionsInput: ["id", "badge", "status", "AuthUrl", "pubUrl", "createdAt", "updatedAt", "deletedDate", "deleted", "error"],
  SIACheckCreateOrConnectWithoutTransactionsInput: ["where", "create"],
  SIACheckCreateManyTransactionsInputEnvelope: ["data", "skipDuplicates"],
  AccountUpsertWithoutTransactionsInput: ["update", "create"],
  AccountUpdateWithoutTransactionsInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "files", "phones", "rtw", "sia", "Status", "subscription"],
  SIACheckUpsertWithWhereUniqueWithoutTransactionsInput: ["where", "update", "create"],
  SIACheckUpdateWithWhereUniqueWithoutTransactionsInput: ["where", "data"],
  SIACheckUpdateManyWithWhereWithoutTransactionsInput: ["where", "data"],
  EmployersOnAccountCreateManyAccountInput: ["employerId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmployersOnAccountCreateManyEmployerInput: ["accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubuserOnAccountCreateManyAccountInput: ["subuserId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubuserOnAccountCreateManySubuserInput: ["accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ManagersOnAccountCreateManyAccountInput: ["managersId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ManagersOnAccountCreateManyManagersInput: ["accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  TokenCreateManyAccountInput: ["id", "nickname", "createdAt", "updatedAt", "type", "value", "expiry", "deletedDate", "deleted"],
  AddressCreateManyAccountInput: ["id", "createdAt", "updatedAt", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "website", "hoursOfOperation", "features", "details", "public", "primaryaccountId", "deletedDate", "deleted"],
  ContactAtAddressCreateManyAccountInput: ["addressId", "jobTitle", "phone", "emailId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ApplicationCreateManyAccountInput: ["id", "name", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmailCreateManyAccountInput: ["id", "domainId", "email", "verified", "public", "primary", "path", "copy", "notifyFrom", "imap_authUser", "imap_authPass", "imap_accessToken", "imap_authServer", "imap_host", "imap_port", "imap_secure", "imap_tslRejectUnauthorized", "imap_tslMinVersion", "imap_resyncDelay", "smtp_authUser", "smtp_authPass", "smtp_accessToken", "smtp_authServer", "smtp_host", "smtp_port", "smtp_secure", "smtp_tslRejectUnauthorized", "smtp_tslMinVersion", "oauth2_authorize", "oauth2_provider", "oauth2_authUser", "oauth2_accessToken", "oauth2_refreshToken", "oauth2_expires", "createdAt", "updatedAt", "deletedDate", "deleted"],
  PhoneCreateManyAccountInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "addressId", "phone", "public"],
  RTWCreateManyAccountInput: ["id", "name", "active", "startDate", "endDate", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SIABadgeCreateManyAccountInput: ["id", "licenseSector", "type", "licenseExplanation", "additionalTerms", "createdAt", "active", "expiry", "updatedAt", "deletedDate", "deleted"],
  StatusOnAccountCreateManyAccountInput: ["statusId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubscriptionOnAccountCreateManyAccountInput: ["subscriptionId", "active", "deactivated", "activated", "startedAt", "createdAt", "updatedAt", "deletedDate", "deleted"],
  TransactionCreateManyAccountInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "data"],
  EmployersOnAccountUpdateWithoutAccountInput: ["employer", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmployersOnAccountUpdateWithoutEmployerInput: ["account", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubuserOnAccountUpdateWithoutAccountInput: ["subuser", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubuserOnAccountUpdateWithoutSubuserInput: ["account", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ManagersOnAccountUpdateWithoutAccountInput: ["managers", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ManagersOnAccountUpdateWithoutManagersInput: ["account", "createdAt", "updatedAt", "deletedDate", "deleted"],
  TokenUpdateWithoutAccountInput: ["id", "nickname", "createdAt", "updatedAt", "type", "value", "expiry", "deletedDate", "deleted"],
  AddressUpdateWithoutAccountInput: ["id", "createdAt", "updatedAt", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "contacts", "website", "hoursOfOperation", "venueStyle", "features", "details", "public", "primaryAccount", "deletedDate", "deleted", "featuresOfBuisness", "phones", "rooms"],
  ContactAtAddressUpdateWithoutAccountInput: ["address", "jobTitle", "phone", "email", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ApplicationUpdateWithoutAccountInput: ["id", "name", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmailUpdateWithoutAccountInput: ["id", "associatedContact", "domain", "email", "verified", "public", "primary", "path", "copy", "notifyFrom", "imap_authUser", "imap_authPass", "imap_accessToken", "imap_authServer", "imap_host", "imap_port", "imap_secure", "imap_tslRejectUnauthorized", "imap_tslMinVersion", "imap_resyncDelay", "smtp_authUser", "smtp_authPass", "smtp_accessToken", "smtp_authServer", "smtp_host", "smtp_port", "smtp_secure", "smtp_tslRejectUnauthorized", "smtp_tslMinVersion", "oauth2_authorize", "oauth2_provider", "oauth2_authUser", "oauth2_accessToken", "oauth2_refreshToken", "oauth2_expires", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FilesUpdateWithoutAccountInput: ["id", "name", "rtw", "createdAt", "updatedAt", "deletedDate", "deleted"],
  PhoneUpdateWithoutAccountInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "address", "phone", "public"],
  RTWUpdateWithoutAccountInput: ["id", "files", "name", "active", "startDate", "endDate", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SIABadgeUpdateWithoutAccountInput: ["id", "licenseSector", "type", "licenseExplanation", "additionalTerms", "createdAt", "active", "expiry", "updatedAt", "deletedDate", "deleted", "siaChecks"],
  StatusOnAccountUpdateWithoutAccountInput: ["status", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubscriptionOnAccountUpdateWithoutAccountInput: ["subscription", "active", "deactivated", "activated", "startedAt", "createdAt", "updatedAt", "deletedDate", "deleted"],
  TransactionUpdateWithoutAccountInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "SIACheck", "data"],
  ContactAtAddressCreateManyAddressInput: ["accountId", "jobTitle", "phone", "emailId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfAddressCreateManyAddressInput: ["featureId", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  PhoneCreateManyAddressInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "accountId", "phone", "public"],
  RoomCreateManyAddressInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "name", "floor", "building", "accessibility", "checkin", "checkout", "length", "width", "height"],
  ContactAtAddressUpdateWithoutAddressInput: ["account", "jobTitle", "phone", "email", "createdAt", "updatedAt", "deletedDate", "deleted"],
  VenueStyleUpdateWithoutAddressInput: ["id", "createdAt", "updatedAt", "name", "details", "deletedDate", "deleted"],
  FeatureOfAddressUpdateWithoutAddressInput: ["feature", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  PhoneUpdateWithoutAddressInput: ["id", "createdAt", "updatedAt", "deletedDate", "deleted", "account", "phone", "public"],
  RoomUpdateWithoutAddressInput: ["id", "featuresOfRoom", "createdAt", "updatedAt", "deletedDate", "deleted", "name", "floor", "building", "accessibility", "checkin", "checkout", "length", "width", "height", "arrangements"],
  AddressUpdateWithoutVenueStyleInput: ["id", "createdAt", "updatedAt", "account", "type", "coords", "street", "city", "state", "country", "zipcode", "addressName", "name", "parking", "contacts", "website", "hoursOfOperation", "features", "details", "public", "primaryAccount", "deletedDate", "deleted", "featuresOfBuisness", "phones", "rooms"],
  ContactAtAddressCreateManyEmailInput: ["accountId", "addressId", "jobTitle", "phone", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ContactAtAddressUpdateWithoutEmailInput: ["account", "address", "jobTitle", "phone", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmailCreateManyDomainInput: ["id", "email", "accountId", "verified", "public", "primary", "path", "copy", "notifyFrom", "imap_authUser", "imap_authPass", "imap_accessToken", "imap_authServer", "imap_host", "imap_port", "imap_secure", "imap_tslRejectUnauthorized", "imap_tslMinVersion", "imap_resyncDelay", "smtp_authUser", "smtp_authPass", "smtp_accessToken", "smtp_authServer", "smtp_host", "smtp_port", "smtp_secure", "smtp_tslRejectUnauthorized", "smtp_tslMinVersion", "oauth2_authorize", "oauth2_provider", "oauth2_authUser", "oauth2_accessToken", "oauth2_refreshToken", "oauth2_expires", "createdAt", "updatedAt", "deletedDate", "deleted"],
  EmailUpdateWithoutDomainInput: ["id", "associatedContact", "email", "account", "verified", "public", "primary", "path", "copy", "notifyFrom", "imap_authUser", "imap_authPass", "imap_accessToken", "imap_authServer", "imap_host", "imap_port", "imap_secure", "imap_tslRejectUnauthorized", "imap_tslMinVersion", "imap_resyncDelay", "smtp_authUser", "smtp_authPass", "smtp_accessToken", "smtp_authServer", "smtp_host", "smtp_port", "smtp_secure", "smtp_tslRejectUnauthorized", "smtp_tslMinVersion", "oauth2_authorize", "oauth2_provider", "oauth2_authUser", "oauth2_accessToken", "oauth2_refreshToken", "oauth2_expires", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfRoomCreateManyFeatureInput: ["roomId", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfAddressCreateManyFeatureInput: ["addressId", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfRoomUpdateWithoutFeatureInput: ["room", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfAddressUpdateWithoutFeatureInput: ["address", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfRoomCreateManyRoomInput: ["featureId", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ArrangementOfRoomCreateManyRoomInput: ["arrangementId", "capacity", "details", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FeatureOfRoomUpdateWithoutRoomInput: ["feature", "data", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ArrangementOfRoomUpdateWithoutRoomInput: ["arrangement", "capacity", "details", "createdAt", "updatedAt", "deletedDate", "deleted"],
  AccountUpdateWithoutFilesInput: ["id", "prn", "username", "accountType", "subsciption", "employer", "employees", "accesses", "subusers", "accounts", "managers", "createdAt", "updatedAt", "lastLogin", "applied", "promoted", "retired", "title", "firstname", "midname", "lastname", "Salutation", "dob", "sex", "label", "password", "Salt", "resetPasswordToken", "resetPasswordExpires", "apiToken", "deletedDate", "deleted", "primaryAddress", "addresses", "contactOfAddress", "application", "emails", "phones", "rtw", "sia", "Status", "subscription", "transactions"],
  FilesCreateManyRtwInput: ["id", "name", "createdAt", "updatedAt", "deletedDate", "deleted"],
  FilesUpdateWithoutRtwInput: ["id", "name", "account", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ArrangementOfRoomCreateManyArrangementInput: ["roomId", "capacity", "details", "createdAt", "updatedAt", "deletedDate", "deleted"],
  ArrangementOfRoomUpdateWithoutArrangementInput: ["room", "capacity", "details", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SIACheckCreateManyBadgeInput: ["id", "status", "AuthUrl", "pubUrl", "createdAt", "updatedAt", "deletedDate", "deleted", "error", "transactionId"],
  SIACheckUpdateWithoutBadgeInput: ["id", "status", "AuthUrl", "pubUrl", "createdAt", "updatedAt", "deletedDate", "deleted", "error", "transactions"],
  StatusOnAccountCreateManyStatusInput: ["accountId", "createdAt", "updatedAt", "deletedDate", "deleted"],
  StatusOnAccountUpdateWithoutStatusInput: ["account", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubscriptionOnAccountCreateManySubscriptionInput: ["accountId", "active", "deactivated", "activated", "startedAt", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SubscriptionOnAccountUpdateWithoutSubscriptionInput: ["account", "active", "deactivated", "activated", "startedAt", "createdAt", "updatedAt", "deletedDate", "deleted"],
  SIACheckCreateManyTransactionsInput: ["id", "sia_id", "status", "AuthUrl", "pubUrl", "createdAt", "updatedAt", "deletedDate", "deleted", "error"],
  SIACheckUpdateWithoutTransactionsInput: ["id", "badge", "status", "AuthUrl", "pubUrl", "createdAt", "updatedAt", "deletedDate", "deleted", "error"]
};

type InputTypesNames = keyof typeof inputTypes;

type InputTypeFieldNames<TInput extends InputTypesNames> = Exclude<
  keyof typeof inputTypes[TInput]["prototype"],
  number | symbol
>;

type InputTypeFieldsConfig<
  TInput extends InputTypesNames
  > = FieldsConfig<InputTypeFieldNames<TInput>>;

export type InputTypeConfig<TInput extends InputTypesNames> = {
  class?: ClassDecorator[];
  fields?: InputTypeFieldsConfig<TInput>;
};

export type InputTypesEnhanceMap = {
  [TInput in InputTypesNames]?: InputTypeConfig<TInput>;
};

export function applyInputTypesEnhanceMap(
  inputTypesEnhanceMap: InputTypesEnhanceMap,
) {
  for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
    const inputTypeName = inputTypeEnhanceMapKey as keyof typeof inputTypesEnhanceMap;
    const typeConfig = inputTypesEnhanceMap[inputTypeName]!;
    const typeClass = inputTypes[inputTypeName];
    const typeTarget = typeClass.prototype;
    applyTypeClassEnhanceConfig(
      typeConfig,
      typeClass,
      typeTarget,
      inputsInfo[inputTypeName as keyof typeof inputsInfo],
    );
  }
}

