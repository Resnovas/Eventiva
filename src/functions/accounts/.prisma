model Account {
  id String @id @default(uuid())
  username String? @unique
  emails Email[]
  phones Phone[]
  accountType AccountType @default(USER)
  subsciption Boolean @default(false)
  subscription SubscriptionOnAccount[]

  // Sub users
  accesses SubuserOnAccount[] @relation("shared")
  subusers SubuserOnAccount[] @relation("subuser")
  
  // Managers
  accounts ManagersOnAccount[] @relation("managed")
  managers ManagersOnAccount[] @relation("managers")
  
  // Account logs
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime @default(now())
  applied DateTime @default(now())
  promoted DateTime @default(now())
  retired DateTime @default(now())
  transactions Transaction[] // all interactions of this account

  // Personal details
  title Title? 
  firstname String?
  midname String?
  lastname String[]
  Salutation String?
  contactOfAdress ContactAtAddress[]
  dob DateTime
  sex String?
  label String[]
  Status StatusOnAccount[]
  application Application[] // the application and information on application
  primaryAddress Address? @relation("account")
  addresses Address[] @relation("address")
  rtw RTW[] // Right to work
  // qualifications Qualifications[]
  // notes Notes[]
  files Files[]
  // payroll Payroll[]
  
  // Password things
  password String?
  resetPasswordToken String? @unique
  resetPasswordExpires DateTime?
  apiToken Token[]
}

model Token {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type TokenType
  value String @unique
  valid Boolean @default(true)
  expiry DateTime

  account Account @relation(fields: [apiToken], references: [id])
  apiToken String
}

model SubuserOnAccount {
  accountId String
  subuserId String
  account Account @relation("shared", fields: [accountId], references: [id])
  subuser Account @relation("subuser", fields: [subuserId], references: [id])

  @@id([accountId, subuserId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ManagersOnAccount {
  accountId String
  managersId String
  account Account @relation("managed", fields: [accountId], references: [id])
  managers Account @relation("managers", fields: [managersId], references: [id])

  @@id([accountId, managersId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AccountType {
  USER
  VENUE
  SUPPLIER
  SOFTWARE
}

enum Title {
  Miss
  Ms
  Mrs
  Mr
  Dr
}

enum TokenType {
  API
  PERSONAL
  SYSTEM
}